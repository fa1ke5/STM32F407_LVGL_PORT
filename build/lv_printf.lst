ARM GAS  D:\Temp\ccNq2L4j.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lv_printf.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._out_buffer,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_out_buffer:
  26              	.LVL0:
  27              	.LFB130:
  28              		.file 1 "lvgl/src/lv_misc/lv_printf.c"
   1:lvgl/src/lv_misc/lv_printf.c **** ///////////////////////////////////////////////////////////////////////////////
   2:lvgl/src/lv_misc/lv_printf.c **** // \author (c) Marco Paland (info@paland.com)
   3:lvgl/src/lv_misc/lv_printf.c **** //             2014-2019, PALANDesign Hannover, Germany
   4:lvgl/src/lv_misc/lv_printf.c **** //
   5:lvgl/src/lv_misc/lv_printf.c **** // \license The MIT License (MIT)
   6:lvgl/src/lv_misc/lv_printf.c **** //
   7:lvgl/src/lv_misc/lv_printf.c **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   8:lvgl/src/lv_misc/lv_printf.c **** // of this software and associated documentation files (the "Software"), to deal
   9:lvgl/src/lv_misc/lv_printf.c **** // in the Software without restriction, including without limitation the rights
  10:lvgl/src/lv_misc/lv_printf.c **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:lvgl/src/lv_misc/lv_printf.c **** // copies of the Software, and to permit persons to whom the Software is
  12:lvgl/src/lv_misc/lv_printf.c **** // furnished to do so, subject to the following conditions:
  13:lvgl/src/lv_misc/lv_printf.c **** //
  14:lvgl/src/lv_misc/lv_printf.c **** // The above copyright notice and this permission notice shall be included in
  15:lvgl/src/lv_misc/lv_printf.c **** // all copies or substantial portions of the Software.
  16:lvgl/src/lv_misc/lv_printf.c **** //
  17:lvgl/src/lv_misc/lv_printf.c **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:lvgl/src/lv_misc/lv_printf.c **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:lvgl/src/lv_misc/lv_printf.c **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:lvgl/src/lv_misc/lv_printf.c **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:lvgl/src/lv_misc/lv_printf.c **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:lvgl/src/lv_misc/lv_printf.c **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:lvgl/src/lv_misc/lv_printf.c **** // THE SOFTWARE.
  24:lvgl/src/lv_misc/lv_printf.c **** //
  25:lvgl/src/lv_misc/lv_printf.c **** // \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on
  26:lvgl/src/lv_misc/lv_printf.c **** //        embedded systems with a very limited resources. These routines are thread
  27:lvgl/src/lv_misc/lv_printf.c **** //        safe and reentrant!
  28:lvgl/src/lv_misc/lv_printf.c **** //        Use this instead of the bloated standard/newlib printf cause these use
  29:lvgl/src/lv_misc/lv_printf.c **** //        malloc for printf (and may not be thread safe).
  30:lvgl/src/lv_misc/lv_printf.c **** //
ARM GAS  D:\Temp\ccNq2L4j.s 			page 2


  31:lvgl/src/lv_misc/lv_printf.c **** ///////////////////////////////////////////////////////////////////////////////
  32:lvgl/src/lv_misc/lv_printf.c **** 
  33:lvgl/src/lv_misc/lv_printf.c **** #include "lv_printf.h"
  34:lvgl/src/lv_misc/lv_printf.c **** 
  35:lvgl/src/lv_misc/lv_printf.c **** #if LV_SPRINTF_CUSTOM == 0
  36:lvgl/src/lv_misc/lv_printf.c **** 
  37:lvgl/src/lv_misc/lv_printf.c **** #include <stdbool.h>
  38:lvgl/src/lv_misc/lv_printf.c **** #include <stdint.h>
  39:lvgl/src/lv_misc/lv_printf.c **** 
  40:lvgl/src/lv_misc/lv_printf.c **** #define PRINTF_DISABLE_SUPPORT_FLOAT    LV_SPRINTF_DISABLE_FLOAT
  41:lvgl/src/lv_misc/lv_printf.c **** 
  42:lvgl/src/lv_misc/lv_printf.c **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  43:lvgl/src/lv_misc/lv_printf.c **** // numeric number including padded zeros (dynamically created on stack)
  44:lvgl/src/lv_misc/lv_printf.c **** // default: 32 byte
  45:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_NTOA_BUFFER_SIZE
  46:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_NTOA_BUFFER_SIZE    32U
  47:lvgl/src/lv_misc/lv_printf.c **** #endif
  48:lvgl/src/lv_misc/lv_printf.c **** 
  49:lvgl/src/lv_misc/lv_printf.c **** // 'ftoa' conversion buffer size, this must be big enough to hold one converted
  50:lvgl/src/lv_misc/lv_printf.c **** // float number including padded zeros (dynamically created on stack)
  51:lvgl/src/lv_misc/lv_printf.c **** // default: 32 byte
  52:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_FTOA_BUFFER_SIZE
  53:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_FTOA_BUFFER_SIZE    32U
  54:lvgl/src/lv_misc/lv_printf.c **** #endif
  55:lvgl/src/lv_misc/lv_printf.c **** 
  56:lvgl/src/lv_misc/lv_printf.c **** // support for the floating point type (%f)
  57:lvgl/src/lv_misc/lv_printf.c **** // default: activated
  58:lvgl/src/lv_misc/lv_printf.c **** #if !PRINTF_DISABLE_SUPPORT_FLOAT
  59:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_SUPPORT_FLOAT
  60:lvgl/src/lv_misc/lv_printf.c **** #endif
  61:lvgl/src/lv_misc/lv_printf.c **** 
  62:lvgl/src/lv_misc/lv_printf.c **** // support for exponential floating point notation (%e/%g)
  63:lvgl/src/lv_misc/lv_printf.c **** // default: activated
  64:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL
  65:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_SUPPORT_EXPONENTIAL
  66:lvgl/src/lv_misc/lv_printf.c **** #endif
  67:lvgl/src/lv_misc/lv_printf.c **** 
  68:lvgl/src/lv_misc/lv_printf.c **** // define the default floating point precision
  69:lvgl/src/lv_misc/lv_printf.c **** // default: 6 digits
  70:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_DEFAULT_FLOAT_PRECISION
  71:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_DEFAULT_FLOAT_PRECISION 6U
  72:lvgl/src/lv_misc/lv_printf.c **** #endif
  73:lvgl/src/lv_misc/lv_printf.c **** 
  74:lvgl/src/lv_misc/lv_printf.c **** // define the largest float suitable to print with %f
  75:lvgl/src/lv_misc/lv_printf.c **** // default: 1e9
  76:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_MAX_FLOAT
  77:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_MAX_FLOAT 1e9
  78:lvgl/src/lv_misc/lv_printf.c **** #endif
  79:lvgl/src/lv_misc/lv_printf.c **** 
  80:lvgl/src/lv_misc/lv_printf.c **** // support for the long long types (%llu or %p)
  81:lvgl/src/lv_misc/lv_printf.c **** // default: activated
  82:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
  83:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_SUPPORT_LONG_LONG
  84:lvgl/src/lv_misc/lv_printf.c **** #endif
  85:lvgl/src/lv_misc/lv_printf.c **** 
  86:lvgl/src/lv_misc/lv_printf.c **** // support for the ptrdiff_t type (%t)
  87:lvgl/src/lv_misc/lv_printf.c **** // ptrdiff_t is normally defined in <stddef.h> as long or long long type
ARM GAS  D:\Temp\ccNq2L4j.s 			page 3


  88:lvgl/src/lv_misc/lv_printf.c **** // default: activated
  89:lvgl/src/lv_misc/lv_printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
  90:lvgl/src/lv_misc/lv_printf.c ****     #define PRINTF_SUPPORT_PTRDIFF_T
  91:lvgl/src/lv_misc/lv_printf.c **** #endif
  92:lvgl/src/lv_misc/lv_printf.c **** 
  93:lvgl/src/lv_misc/lv_printf.c **** ///////////////////////////////////////////////////////////////////////////////
  94:lvgl/src/lv_misc/lv_printf.c **** 
  95:lvgl/src/lv_misc/lv_printf.c **** // internal flag definitions
  96:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_ZEROPAD   (1U <<  0U)
  97:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_LEFT      (1U <<  1U)
  98:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_PLUS      (1U <<  2U)
  99:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_SPACE     (1U <<  3U)
 100:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_HASH      (1U <<  4U)
 101:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_UPPERCASE (1U <<  5U)
 102:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_CHAR      (1U <<  6U)
 103:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_SHORT     (1U <<  7U)
 104:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_LONG      (1U <<  8U)
 105:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_LONG_LONG (1U <<  9U)
 106:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_PRECISION (1U << 10U)
 107:lvgl/src/lv_misc/lv_printf.c **** #define FLAGS_ADAPT_EXP (1U << 11U)
 108:lvgl/src/lv_misc/lv_printf.c **** 
 109:lvgl/src/lv_misc/lv_printf.c **** // import float.h for DBL_MAX
 110:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 111:lvgl/src/lv_misc/lv_printf.c ****     #include <float.h>
 112:lvgl/src/lv_misc/lv_printf.c **** #endif
 113:lvgl/src/lv_misc/lv_printf.c **** 
 114:lvgl/src/lv_misc/lv_printf.c **** // output function type
 115:lvgl/src/lv_misc/lv_printf.c **** typedef void (*out_fct_type)(char character, void * buffer, size_t idx, size_t maxlen);
 116:lvgl/src/lv_misc/lv_printf.c **** 
 117:lvgl/src/lv_misc/lv_printf.c **** // wrapper (used as buffer) for output function type
 118:lvgl/src/lv_misc/lv_printf.c **** typedef struct {
 119:lvgl/src/lv_misc/lv_printf.c ****     void (*fct)(char character, void * arg);
 120:lvgl/src/lv_misc/lv_printf.c ****     void * arg;
 121:lvgl/src/lv_misc/lv_printf.c **** } out_fct_wrap_type;
 122:lvgl/src/lv_misc/lv_printf.c **** 
 123:lvgl/src/lv_misc/lv_printf.c **** // internal buffer output
 124:lvgl/src/lv_misc/lv_printf.c **** static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
 125:lvgl/src/lv_misc/lv_printf.c **** {
  29              		.loc 1 125 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 126:lvgl/src/lv_misc/lv_printf.c ****     if(idx < maxlen) {
  34              		.loc 1 126 5 view .LVU1
  35              		.loc 1 126 7 is_stmt 0 view .LVU2
  36 0000 9A42     		cmp	r2, r3
  37 0002 00D2     		bcs	.L1
 127:lvgl/src/lv_misc/lv_printf.c ****         ((char *)buffer)[idx] = character;
  38              		.loc 1 127 9 is_stmt 1 view .LVU3
  39              		.loc 1 127 31 is_stmt 0 view .LVU4
  40 0004 8854     		strb	r0, [r1, r2]
  41              	.L1:
 128:lvgl/src/lv_misc/lv_printf.c ****     }
 129:lvgl/src/lv_misc/lv_printf.c **** }
  42              		.loc 1 129 1 view .LVU5
  43 0006 7047     		bx	lr
ARM GAS  D:\Temp\ccNq2L4j.s 			page 4


  44              		.cfi_endproc
  45              	.LFE130:
  47              		.section	.text._out_null,"ax",%progbits
  48              		.align	1
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv4-sp-d16
  54              	_out_null:
  55              	.LVL1:
  56              	.LFB131:
 130:lvgl/src/lv_misc/lv_printf.c **** 
 131:lvgl/src/lv_misc/lv_printf.c **** // internal null output
 132:lvgl/src/lv_misc/lv_printf.c **** static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
 133:lvgl/src/lv_misc/lv_printf.c **** {
  57              		.loc 1 133 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 134:lvgl/src/lv_misc/lv_printf.c ****     (void)character;
  62              		.loc 1 134 5 view .LVU7
 135:lvgl/src/lv_misc/lv_printf.c ****     (void)buffer;
  63              		.loc 1 135 5 view .LVU8
 136:lvgl/src/lv_misc/lv_printf.c ****     (void)idx;
  64              		.loc 1 136 5 view .LVU9
 137:lvgl/src/lv_misc/lv_printf.c ****     (void)maxlen;
  65              		.loc 1 137 5 view .LVU10
 138:lvgl/src/lv_misc/lv_printf.c **** }
  66              		.loc 1 138 1 is_stmt 0 view .LVU11
  67 0000 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE131:
  71              		.section	.text._atoi,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	_atoi:
  79              	.LVL2:
  80              	.LFB134:
 139:lvgl/src/lv_misc/lv_printf.c **** 
 140:lvgl/src/lv_misc/lv_printf.c **** // internal secure strlen
 141:lvgl/src/lv_misc/lv_printf.c **** // \return The length of the string (excluding the terminating 0) limited by 'maxsize'
 142:lvgl/src/lv_misc/lv_printf.c **** static inline unsigned int _strnlen_s(const char * str, size_t maxsize)
 143:lvgl/src/lv_misc/lv_printf.c **** {
 144:lvgl/src/lv_misc/lv_printf.c ****     const char * s;
 145:lvgl/src/lv_misc/lv_printf.c ****     for(s = str; *s && maxsize--; ++s);
 146:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 147:lvgl/src/lv_misc/lv_printf.c **** }
 148:lvgl/src/lv_misc/lv_printf.c **** 
 149:lvgl/src/lv_misc/lv_printf.c **** // internal test if char is a digit (0-9)
 150:lvgl/src/lv_misc/lv_printf.c **** // \return true if char is a digit
 151:lvgl/src/lv_misc/lv_printf.c **** static inline bool _is_digit(char ch)
 152:lvgl/src/lv_misc/lv_printf.c **** {
 153:lvgl/src/lv_misc/lv_printf.c ****     return (ch >= '0') && (ch <= '9');
ARM GAS  D:\Temp\ccNq2L4j.s 			page 5


 154:lvgl/src/lv_misc/lv_printf.c **** }
 155:lvgl/src/lv_misc/lv_printf.c **** 
 156:lvgl/src/lv_misc/lv_printf.c **** // internal ASCII string to unsigned int conversion
 157:lvgl/src/lv_misc/lv_printf.c **** static unsigned int _atoi(const char ** str)
 158:lvgl/src/lv_misc/lv_printf.c **** {
  81              		.loc 1 158 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
 159:lvgl/src/lv_misc/lv_printf.c ****     unsigned int i = 0U;
  86              		.loc 1 159 5 view .LVU13
 160:lvgl/src/lv_misc/lv_printf.c ****     while(_is_digit(**str)) {
  87              		.loc 1 160 5 view .LVU14
 159:lvgl/src/lv_misc/lv_printf.c ****     unsigned int i = 0U;
  88              		.loc 1 159 18 is_stmt 0 view .LVU15
  89 0000 0023     		movs	r3, #0
  90              	.LVL3:
  91              	.L5:
  92              		.loc 1 160 22 view .LVU16
  93 0002 0168     		ldr	r1, [r0]
  94              		.loc 1 160 11 view .LVU17
  95 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  96              	.LVL4:
  97              	.LBB20:
  98              	.LBI20:
 151:lvgl/src/lv_misc/lv_printf.c **** {
  99              		.loc 1 151 20 is_stmt 1 view .LVU18
 100              	.LBB21:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 101              		.loc 1 153 5 view .LVU19
 153:lvgl/src/lv_misc/lv_printf.c **** }
 102              		.loc 1 153 24 is_stmt 0 view .LVU20
 103 0006 303A     		subs	r2, r2, #48
 104              	.LVL5:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 105              		.loc 1 153 24 view .LVU21
 106 0008 D2B2     		uxtb	r2, r2
 107              	.LVL6:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 108              		.loc 1 153 24 view .LVU22
 109              	.LBE21:
 110              	.LBE20:
 111              		.loc 1 160 10 view .LVU23
 112 000a 092A     		cmp	r2, #9
 113 000c 08D8     		bhi	.L7
 161:lvgl/src/lv_misc/lv_printf.c ****         i = i * 10U + (unsigned int)(*((*str)++) - '0');
 114              		.loc 1 161 9 is_stmt 1 view .LVU24
 115              		.loc 1 161 15 is_stmt 0 view .LVU25
 116 000e 03EB8303 		add	r3, r3, r3, lsl #2
 117              	.LVL7:
 118              		.loc 1 161 15 view .LVU26
 119 0012 5A00     		lsls	r2, r3, #1
 120              		.loc 1 161 46 view .LVU27
 121 0014 4B1C     		adds	r3, r1, #1
 122 0016 0360     		str	r3, [r0]
 123              		.loc 1 161 38 view .LVU28
ARM GAS  D:\Temp\ccNq2L4j.s 			page 6


 124 0018 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 125              		.loc 1 161 21 view .LVU29
 126 001a 1344     		add	r3, r3, r2
 127              		.loc 1 161 11 view .LVU30
 128 001c 303B     		subs	r3, r3, #48
 129              	.LVL8:
 130              		.loc 1 161 11 view .LVU31
 131 001e F0E7     		b	.L5
 132              	.L7:
 162:lvgl/src/lv_misc/lv_printf.c ****     }
 163:lvgl/src/lv_misc/lv_printf.c ****     return i;
 133              		.loc 1 163 5 is_stmt 1 view .LVU32
 164:lvgl/src/lv_misc/lv_printf.c **** }
 134              		.loc 1 164 1 is_stmt 0 view .LVU33
 135 0020 1846     		mov	r0, r3
 136              	.LVL9:
 137              		.loc 1 164 1 view .LVU34
 138 0022 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE134:
 142              		.section	.text._out_rev,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu fpv4-sp-d16
 149              	_out_rev:
 150              	.LVL10:
 151              	.LFB135:
 165:lvgl/src/lv_misc/lv_printf.c **** 
 166:lvgl/src/lv_misc/lv_printf.c **** // output the specified string in reverse, taking care of any zero-padding
 167:lvgl/src/lv_misc/lv_printf.c **** static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf
 168:lvgl/src/lv_misc/lv_printf.c ****                        unsigned int width, unsigned int flags)
 169:lvgl/src/lv_misc/lv_printf.c **** {
 152              		.loc 1 169 1 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 16, pretend = 0, frame = 8
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		.loc 1 169 1 is_stmt 0 view .LVU36
 157 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 36
 160              		.cfi_offset 4, -36
 161              		.cfi_offset 5, -32
 162              		.cfi_offset 6, -28
 163              		.cfi_offset 7, -24
 164              		.cfi_offset 8, -20
 165              		.cfi_offset 9, -16
 166              		.cfi_offset 10, -12
 167              		.cfi_offset 11, -8
 168              		.cfi_offset 14, -4
 169 0004 83B0     		sub	sp, sp, #12
 170              	.LCFI1:
 171              		.cfi_def_cfa_offset 48
 172 0006 0546     		mov	r5, r0
 173 0008 0191     		str	r1, [sp, #4]
 174 000a 9346     		mov	fp, r2
ARM GAS  D:\Temp\ccNq2L4j.s 			page 7


 175 000c 1E46     		mov	r6, r3
 176 000e DDF83090 		ldr	r9, [sp, #48]
 177 0012 0D9C     		ldr	r4, [sp, #52]
 178 0014 DDF83880 		ldr	r8, [sp, #56]
 170:lvgl/src/lv_misc/lv_printf.c ****     const size_t start_idx = idx;
 179              		.loc 1 170 5 is_stmt 1 view .LVU37
 180              	.LVL11:
 171:lvgl/src/lv_misc/lv_printf.c **** 
 172:lvgl/src/lv_misc/lv_printf.c ****     // pad spaces up to given width
 173:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 181              		.loc 1 173 5 view .LVU38
 182              		.loc 1 173 7 is_stmt 0 view .LVU39
 183 0018 0F9B     		ldr	r3, [sp, #60]
 184              	.LVL12:
 185              		.loc 1 173 7 view .LVU40
 186 001a 13F0030F 		tst	r3, #3
 187 001e 09D0     		beq	.L17
 188              	.LVL13:
 189              	.L10:
 174:lvgl/src/lv_misc/lv_printf.c ****         size_t i;
 175:lvgl/src/lv_misc/lv_printf.c ****         for(i = len; i < width; i++) {
 176:lvgl/src/lv_misc/lv_printf.c ****             out(' ', buffer, idx++, maxlen);
 177:lvgl/src/lv_misc/lv_printf.c ****         }
 178:lvgl/src/lv_misc/lv_printf.c ****     }
 179:lvgl/src/lv_misc/lv_printf.c **** 
 180:lvgl/src/lv_misc/lv_printf.c ****     // reverse string
 181:lvgl/src/lv_misc/lv_printf.c ****     while(len) {
 190              		.loc 1 181 10 view .LVU41
 191 0020 A4B1     		cbz	r4, .L20
 182:lvgl/src/lv_misc/lv_printf.c ****         out(buf[--len], buffer, idx++, maxlen);
 192              		.loc 1 182 9 is_stmt 1 view .LVU42
 193 0022 013C     		subs	r4, r4, #1
 194              	.LVL14:
 195              		.loc 1 182 9 is_stmt 0 view .LVU43
 196 0024 571C     		adds	r7, r2, #1
 197              	.LVL15:
 198              		.loc 1 182 9 view .LVU44
 199 0026 3346     		mov	r3, r6
 200 0028 0199     		ldr	r1, [sp, #4]
 201 002a 19F80400 		ldrb	r0, [r9, r4]	@ zero_extendqisi2
 202 002e A847     		blx	r5
 203              	.LVL16:
 204 0030 3A46     		mov	r2, r7
 205 0032 F5E7     		b	.L10
 206              	.LVL17:
 207              	.L17:
 208              	.LBB22:
 175:lvgl/src/lv_misc/lv_printf.c ****             out(' ', buffer, idx++, maxlen);
 209              		.loc 1 175 15 view .LVU45
 210 0034 2746     		mov	r7, r4
 211              	.LVL18:
 212              	.L9:
 175:lvgl/src/lv_misc/lv_printf.c ****             out(' ', buffer, idx++, maxlen);
 213              		.loc 1 175 9 discriminator 1 view .LVU46
 214 0036 4745     		cmp	r7, r8
 215 0038 F2D2     		bcs	.L10
 176:lvgl/src/lv_misc/lv_printf.c ****         }
ARM GAS  D:\Temp\ccNq2L4j.s 			page 8


 216              		.loc 1 176 13 is_stmt 1 discriminator 3 view .LVU47
 217 003a 02F1010A 		add	r10, r2, #1
 218              	.LVL19:
 176:lvgl/src/lv_misc/lv_printf.c ****         }
 219              		.loc 1 176 13 is_stmt 0 discriminator 3 view .LVU48
 220 003e 3346     		mov	r3, r6
 221 0040 0199     		ldr	r1, [sp, #4]
 222 0042 2020     		movs	r0, #32
 223 0044 A847     		blx	r5
 224              	.LVL20:
 175:lvgl/src/lv_misc/lv_printf.c ****             out(' ', buffer, idx++, maxlen);
 225              		.loc 1 175 34 discriminator 3 view .LVU49
 226 0046 0137     		adds	r7, r7, #1
 227              	.LVL21:
 176:lvgl/src/lv_misc/lv_printf.c ****         }
 228              		.loc 1 176 13 discriminator 3 view .LVU50
 229 0048 5246     		mov	r2, r10
 230 004a F4E7     		b	.L9
 231              	.LVL22:
 232              	.L20:
 176:lvgl/src/lv_misc/lv_printf.c ****         }
 233              		.loc 1 176 13 discriminator 3 view .LVU51
 234              	.LBE22:
 183:lvgl/src/lv_misc/lv_printf.c ****     }
 184:lvgl/src/lv_misc/lv_printf.c **** 
 185:lvgl/src/lv_misc/lv_printf.c ****     // append pad spaces up to given width
 186:lvgl/src/lv_misc/lv_printf.c ****     if(flags & FLAGS_LEFT) {
 235              		.loc 1 186 5 is_stmt 1 view .LVU52
 236              		.loc 1 186 7 is_stmt 0 view .LVU53
 237 004c 0F9B     		ldr	r3, [sp, #60]
 238 004e 13F0020F 		tst	r3, #2
 239 0052 03D1     		bne	.L14
 240              	.LVL23:
 241              	.L8:
 187:lvgl/src/lv_misc/lv_printf.c ****         while(idx - start_idx < width) {
 188:lvgl/src/lv_misc/lv_printf.c ****             out(' ', buffer, idx++, maxlen);
 189:lvgl/src/lv_misc/lv_printf.c ****         }
 190:lvgl/src/lv_misc/lv_printf.c ****     }
 191:lvgl/src/lv_misc/lv_printf.c **** 
 192:lvgl/src/lv_misc/lv_printf.c ****     return idx;
 193:lvgl/src/lv_misc/lv_printf.c **** }
 242              		.loc 1 193 1 view .LVU54
 243 0054 1046     		mov	r0, r2
 244 0056 03B0     		add	sp, sp, #12
 245              	.LCFI2:
 246              		.cfi_remember_state
 247              		.cfi_def_cfa_offset 36
 248              		@ sp needed
 249 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 250              	.LVL24:
 251              	.L14:
 252              	.LCFI3:
 253              		.cfi_restore_state
 187:lvgl/src/lv_misc/lv_printf.c ****         while(idx - start_idx < width) {
 254              		.loc 1 187 19 view .LVU55
 255 005c A2EB0B03 		sub	r3, r2, fp
 187:lvgl/src/lv_misc/lv_printf.c ****         while(idx - start_idx < width) {
ARM GAS  D:\Temp\ccNq2L4j.s 			page 9


 256              		.loc 1 187 14 view .LVU56
 257 0060 4345     		cmp	r3, r8
 258 0062 F7D2     		bcs	.L8
 188:lvgl/src/lv_misc/lv_printf.c ****         }
 259              		.loc 1 188 13 is_stmt 1 view .LVU57
 260 0064 541C     		adds	r4, r2, #1
 261              	.LVL25:
 188:lvgl/src/lv_misc/lv_printf.c ****         }
 262              		.loc 1 188 13 is_stmt 0 view .LVU58
 263 0066 3346     		mov	r3, r6
 264 0068 0199     		ldr	r1, [sp, #4]
 265 006a 2020     		movs	r0, #32
 266 006c A847     		blx	r5
 267              	.LVL26:
 268 006e 2246     		mov	r2, r4
 269 0070 F4E7     		b	.L14
 270              		.cfi_endproc
 271              	.LFE135:
 273              		.section	.text._ntoa_format,"ax",%progbits
 274              		.align	1
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	_ntoa_format:
 281              	.LVL27:
 282              	.LFB136:
 194:lvgl/src/lv_misc/lv_printf.c **** 
 195:lvgl/src/lv_misc/lv_printf.c **** // internal itoa format
 196:lvgl/src/lv_misc/lv_printf.c **** static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, 
 197:lvgl/src/lv_misc/lv_printf.c ****                            bool negative, unsigned int base, unsigned int prec, unsigned int width,
 198:lvgl/src/lv_misc/lv_printf.c **** {
 283              		.loc 1 198 1 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 28, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		.loc 1 198 1 is_stmt 0 view .LVU60
 288 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 289              	.LCFI4:
 290              		.cfi_def_cfa_offset 28
 291              		.cfi_offset 4, -28
 292              		.cfi_offset 5, -24
 293              		.cfi_offset 6, -20
 294              		.cfi_offset 7, -16
 295              		.cfi_offset 8, -12
 296              		.cfi_offset 9, -8
 297              		.cfi_offset 14, -4
 298 0004 85B0     		sub	sp, sp, #20
 299              	.LCFI5:
 300              		.cfi_def_cfa_offset 48
 301 0006 0C9D     		ldr	r5, [sp, #48]
 302 0008 0D9C     		ldr	r4, [sp, #52]
 303 000a 9DF83890 		ldrb	r9, [sp, #56]	@ zero_extendqisi2
 304 000e DDF83C80 		ldr	r8, [sp, #60]
 305 0012 DDF840E0 		ldr	lr, [sp, #64]
 306 0016 DDF844C0 		ldr	ip, [sp, #68]
 307 001a 129E     		ldr	r6, [sp, #72]
ARM GAS  D:\Temp\ccNq2L4j.s 			page 10


 199:lvgl/src/lv_misc/lv_printf.c ****     // pad leading zeros
 200:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_LEFT)) {
 308              		.loc 1 200 5 is_stmt 1 view .LVU61
 309              		.loc 1 200 7 is_stmt 0 view .LVU62
 310 001c 16F0020F 		tst	r6, #2
 311 0020 1FD1     		bne	.L22
 201:lvgl/src/lv_misc/lv_printf.c ****         if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) 
 312              		.loc 1 201 9 is_stmt 1 view .LVU63
 313              		.loc 1 201 11 is_stmt 0 view .LVU64
 314 0022 BCF1000F 		cmp	ip, #0
 315 0026 0AD0     		beq	.L25
 316              		.loc 1 201 18 discriminator 1 view .LVU65
 317 0028 16F0010F 		tst	r6, #1
 318 002c 07D0     		beq	.L25
 319              		.loc 1 201 45 discriminator 2 view .LVU66
 320 002e B9F1000F 		cmp	r9, #0
 321 0032 02D1     		bne	.L24
 322              		.loc 1 201 58 discriminator 3 view .LVU67
 323 0034 16F00C0F 		tst	r6, #12
 324 0038 01D0     		beq	.L25
 325              	.L24:
 202:lvgl/src/lv_misc/lv_printf.c ****             width--;
 326              		.loc 1 202 13 is_stmt 1 view .LVU68
 327              		.loc 1 202 18 is_stmt 0 view .LVU69
 328 003a 0CF1FF3C 		add	ip, ip, #-1
 329              	.LVL28:
 330              	.L25:
 203:lvgl/src/lv_misc/lv_printf.c ****         }
 204:lvgl/src/lv_misc/lv_printf.c ****         while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 331              		.loc 1 204 14 view .LVU70
 332 003e 7445     		cmp	r4, lr
 333 0040 08D2     		bcs	.L28
 334              		.loc 1 204 28 discriminator 1 view .LVU71
 335 0042 1F2C     		cmp	r4, #31
 336 0044 06D8     		bhi	.L28
 205:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 337              		.loc 1 205 13 is_stmt 1 view .LVU72
 338              	.LVL29:
 339              		.loc 1 205 24 is_stmt 0 view .LVU73
 340 0046 3027     		movs	r7, #48
 341 0048 2F55     		strb	r7, [r5, r4]
 342              		.loc 1 205 20 view .LVU74
 343 004a 0134     		adds	r4, r4, #1
 344              	.LVL30:
 345              		.loc 1 205 20 view .LVU75
 346 004c F7E7     		b	.L25
 347              	.L29:
 206:lvgl/src/lv_misc/lv_printf.c ****         }
 207:lvgl/src/lv_misc/lv_printf.c ****         while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 208:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 348              		.loc 1 208 13 is_stmt 1 view .LVU76
 349              	.LVL31:
 350              		.loc 1 208 24 is_stmt 0 view .LVU77
 351 004e 3027     		movs	r7, #48
 352 0050 2F55     		strb	r7, [r5, r4]
 353              		.loc 1 208 20 view .LVU78
 354 0052 0134     		adds	r4, r4, #1
ARM GAS  D:\Temp\ccNq2L4j.s 			page 11


 355              	.LVL32:
 356              	.L28:
 207:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 357              		.loc 1 207 14 view .LVU79
 358 0054 16F0010F 		tst	r6, #1
 359 0058 03D0     		beq	.L22
 207:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 360              		.loc 1 207 39 discriminator 1 view .LVU80
 361 005a 6445     		cmp	r4, ip
 362 005c 01D2     		bcs	.L22
 207:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 363              		.loc 1 207 56 discriminator 2 view .LVU81
 364 005e 1F2C     		cmp	r4, #31
 365 0060 F5D9     		bls	.L29
 366              	.LVL33:
 367              	.L22:
 209:lvgl/src/lv_misc/lv_printf.c ****         }
 210:lvgl/src/lv_misc/lv_printf.c ****     }
 211:lvgl/src/lv_misc/lv_printf.c **** 
 212:lvgl/src/lv_misc/lv_printf.c ****     // handle hash
 213:lvgl/src/lv_misc/lv_printf.c ****     if(flags & FLAGS_HASH) {
 368              		.loc 1 213 5 is_stmt 1 view .LVU82
 369              		.loc 1 213 7 is_stmt 0 view .LVU83
 370 0062 16F0100F 		tst	r6, #16
 371 0066 15D0     		beq	.L30
 214:lvgl/src/lv_misc/lv_printf.c ****         if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 372              		.loc 1 214 9 is_stmt 1 view .LVU84
 373              		.loc 1 214 11 is_stmt 0 view .LVU85
 374 0068 16F4806F 		tst	r6, #1024
 375 006c 04D1     		bne	.L31
 376              		.loc 1 214 39 discriminator 1 view .LVU86
 377 006e 1CB1     		cbz	r4, .L31
 378              		.loc 1 214 46 discriminator 2 view .LVU87
 379 0070 7445     		cmp	r4, lr
 380 0072 21D0     		beq	.L32
 381              		.loc 1 214 64 discriminator 3 view .LVU88
 382 0074 6445     		cmp	r4, ip
 383 0076 1FD0     		beq	.L32
 384              	.L31:
 215:lvgl/src/lv_misc/lv_printf.c ****             len--;
 216:lvgl/src/lv_misc/lv_printf.c ****             if(len && (base == 16U)) {
 217:lvgl/src/lv_misc/lv_printf.c ****                 len--;
 218:lvgl/src/lv_misc/lv_printf.c ****             }
 219:lvgl/src/lv_misc/lv_printf.c ****         }
 220:lvgl/src/lv_misc/lv_printf.c ****         if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 385              		.loc 1 220 9 is_stmt 1 view .LVU89
 386              		.loc 1 220 11 is_stmt 0 view .LVU90
 387 0078 B8F1100F 		cmp	r8, #16
 388 007c 27D0     		beq	.L42
 389              	.L33:
 221:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'x';
 222:lvgl/src/lv_misc/lv_printf.c ****         }
 223:lvgl/src/lv_misc/lv_printf.c ****         else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 390              		.loc 1 223 14 is_stmt 1 view .LVU91
 391              		.loc 1 223 16 is_stmt 0 view .LVU92
 392 007e B8F1100F 		cmp	r8, #16
 393 0082 2DD0     		beq	.L43
ARM GAS  D:\Temp\ccNq2L4j.s 			page 12


 394              	.L35:
 224:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'X';
 225:lvgl/src/lv_misc/lv_printf.c ****         }
 226:lvgl/src/lv_misc/lv_printf.c ****         else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 395              		.loc 1 226 14 is_stmt 1 view .LVU93
 396              		.loc 1 226 16 is_stmt 0 view .LVU94
 397 0084 B8F1020F 		cmp	r8, #2
 398 0088 33D0     		beq	.L44
 399              	.L34:
 227:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'b';
 228:lvgl/src/lv_misc/lv_printf.c ****         }
 229:lvgl/src/lv_misc/lv_printf.c ****         if(len < PRINTF_NTOA_BUFFER_SIZE) {
 400              		.loc 1 229 9 is_stmt 1 view .LVU95
 401              		.loc 1 229 11 is_stmt 0 view .LVU96
 402 008a 1F2C     		cmp	r4, #31
 403 008c 02D8     		bhi	.L30
 230:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 404              		.loc 1 230 13 is_stmt 1 view .LVU97
 405              	.LVL34:
 406              		.loc 1 230 24 is_stmt 0 view .LVU98
 407 008e 3027     		movs	r7, #48
 408 0090 2F55     		strb	r7, [r5, r4]
 409              		.loc 1 230 20 view .LVU99
 410 0092 0134     		adds	r4, r4, #1
 411              	.LVL35:
 412              	.L30:
 231:lvgl/src/lv_misc/lv_printf.c ****         }
 232:lvgl/src/lv_misc/lv_printf.c ****     }
 233:lvgl/src/lv_misc/lv_printf.c **** 
 234:lvgl/src/lv_misc/lv_printf.c ****     if(len < PRINTF_NTOA_BUFFER_SIZE) {
 413              		.loc 1 234 5 is_stmt 1 view .LVU100
 414              		.loc 1 234 7 is_stmt 0 view .LVU101
 415 0094 1F2C     		cmp	r4, #31
 416 0096 05D8     		bhi	.L36
 235:lvgl/src/lv_misc/lv_printf.c ****         if(negative) {
 417              		.loc 1 235 9 is_stmt 1 view .LVU102
 418              		.loc 1 235 11 is_stmt 0 view .LVU103
 419 0098 B9F1000F 		cmp	r9, #0
 420 009c 2FD0     		beq	.L37
 236:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '-';
 421              		.loc 1 236 13 is_stmt 1 view .LVU104
 422              	.LVL36:
 423              		.loc 1 236 24 is_stmt 0 view .LVU105
 424 009e 2D27     		movs	r7, #45
 425 00a0 2F55     		strb	r7, [r5, r4]
 426              		.loc 1 236 20 view .LVU106
 427 00a2 0134     		adds	r4, r4, #1
 428              	.LVL37:
 429              	.L36:
 237:lvgl/src/lv_misc/lv_printf.c ****         }
 238:lvgl/src/lv_misc/lv_printf.c ****         else if(flags & FLAGS_PLUS) {
 239:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '+';  // ignore the space if the '+' exists
 240:lvgl/src/lv_misc/lv_printf.c ****         }
 241:lvgl/src/lv_misc/lv_printf.c ****         else if(flags & FLAGS_SPACE) {
 242:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = ' ';
 243:lvgl/src/lv_misc/lv_printf.c ****         }
 244:lvgl/src/lv_misc/lv_printf.c ****     }
ARM GAS  D:\Temp\ccNq2L4j.s 			page 13


 245:lvgl/src/lv_misc/lv_printf.c **** 
 246:lvgl/src/lv_misc/lv_printf.c ****     return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 430              		.loc 1 246 5 is_stmt 1 view .LVU107
 431              		.loc 1 246 12 is_stmt 0 view .LVU108
 432 00a4 0396     		str	r6, [sp, #12]
 433 00a6 CDF808C0 		str	ip, [sp, #8]
 434 00aa 0194     		str	r4, [sp, #4]
 435 00ac 0095     		str	r5, [sp]
 436 00ae FFF7FEFF 		bl	_out_rev
 437              	.LVL38:
 247:lvgl/src/lv_misc/lv_printf.c **** }
 438              		.loc 1 247 1 view .LVU109
 439 00b2 05B0     		add	sp, sp, #20
 440              	.LCFI6:
 441              		.cfi_remember_state
 442              		.cfi_def_cfa_offset 28
 443              		@ sp needed
 444 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 445              	.LVL39:
 446              	.L32:
 447              	.LCFI7:
 448              		.cfi_restore_state
 215:lvgl/src/lv_misc/lv_printf.c ****             if(len && (base == 16U)) {
 449              		.loc 1 215 13 is_stmt 1 view .LVU110
 216:lvgl/src/lv_misc/lv_printf.c ****                 len--;
 450              		.loc 1 216 13 view .LVU111
 216:lvgl/src/lv_misc/lv_printf.c ****                 len--;
 451              		.loc 1 216 15 is_stmt 0 view .LVU112
 452 00b8 671E     		subs	r7, r4, #1
 453              	.LVL40:
 216:lvgl/src/lv_misc/lv_printf.c ****                 len--;
 454              		.loc 1 216 15 view .LVU113
 455 00ba 06D0     		beq	.L39
 216:lvgl/src/lv_misc/lv_printf.c ****                 len--;
 456              		.loc 1 216 20 discriminator 1 view .LVU114
 457 00bc B8F1100F 		cmp	r8, #16
 458 00c0 01D0     		beq	.L45
 215:lvgl/src/lv_misc/lv_printf.c ****             if(len && (base == 16U)) {
 459              		.loc 1 215 16 view .LVU115
 460 00c2 3C46     		mov	r4, r7
 461 00c4 D8E7     		b	.L31
 462              	.L45:
 217:lvgl/src/lv_misc/lv_printf.c ****             }
 463              		.loc 1 217 17 is_stmt 1 view .LVU116
 217:lvgl/src/lv_misc/lv_printf.c ****             }
 464              		.loc 1 217 20 is_stmt 0 view .LVU117
 465 00c6 023C     		subs	r4, r4, #2
 466              	.LVL41:
 217:lvgl/src/lv_misc/lv_printf.c ****             }
 467              		.loc 1 217 20 view .LVU118
 468 00c8 D6E7     		b	.L31
 469              	.LVL42:
 470              	.L39:
 215:lvgl/src/lv_misc/lv_printf.c ****             if(len && (base == 16U)) {
 471              		.loc 1 215 16 view .LVU119
 472 00ca 3C46     		mov	r4, r7
 473 00cc D4E7     		b	.L31
ARM GAS  D:\Temp\ccNq2L4j.s 			page 14


 474              	.LVL43:
 475              	.L42:
 220:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'x';
 476              		.loc 1 220 26 discriminator 1 view .LVU120
 477 00ce 16F0200F 		tst	r6, #32
 478 00d2 D4D1     		bne	.L33
 220:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'x';
 479              		.loc 1 220 56 discriminator 2 view .LVU121
 480 00d4 1F2C     		cmp	r4, #31
 481 00d6 D2D8     		bhi	.L33
 221:lvgl/src/lv_misc/lv_printf.c ****         }
 482              		.loc 1 221 13 is_stmt 1 view .LVU122
 483              	.LVL44:
 221:lvgl/src/lv_misc/lv_printf.c ****         }
 484              		.loc 1 221 24 is_stmt 0 view .LVU123
 485 00d8 7827     		movs	r7, #120
 486 00da 2F55     		strb	r7, [r5, r4]
 221:lvgl/src/lv_misc/lv_printf.c ****         }
 487              		.loc 1 221 20 view .LVU124
 488 00dc 0134     		adds	r4, r4, #1
 489              	.LVL45:
 221:lvgl/src/lv_misc/lv_printf.c ****         }
 490              		.loc 1 221 24 view .LVU125
 491 00de D4E7     		b	.L34
 492              	.L43:
 223:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'X';
 493              		.loc 1 223 31 discriminator 1 view .LVU126
 494 00e0 16F0200F 		tst	r6, #32
 495 00e4 CED0     		beq	.L35
 223:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'X';
 496              		.loc 1 223 60 discriminator 2 view .LVU127
 497 00e6 1F2C     		cmp	r4, #31
 498 00e8 CCD8     		bhi	.L35
 224:lvgl/src/lv_misc/lv_printf.c ****         }
 499              		.loc 1 224 13 is_stmt 1 view .LVU128
 500              	.LVL46:
 224:lvgl/src/lv_misc/lv_printf.c ****         }
 501              		.loc 1 224 24 is_stmt 0 view .LVU129
 502 00ea 5827     		movs	r7, #88
 503 00ec 2F55     		strb	r7, [r5, r4]
 224:lvgl/src/lv_misc/lv_printf.c ****         }
 504              		.loc 1 224 20 view .LVU130
 505 00ee 0134     		adds	r4, r4, #1
 506              	.LVL47:
 224:lvgl/src/lv_misc/lv_printf.c ****         }
 507              		.loc 1 224 24 view .LVU131
 508 00f0 CBE7     		b	.L34
 509              	.L44:
 226:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = 'b';
 510              		.loc 1 226 30 discriminator 1 view .LVU132
 511 00f2 1F2C     		cmp	r4, #31
 512 00f4 C9D8     		bhi	.L34
 227:lvgl/src/lv_misc/lv_printf.c ****         }
 513              		.loc 1 227 13 is_stmt 1 view .LVU133
 514              	.LVL48:
 227:lvgl/src/lv_misc/lv_printf.c ****         }
 515              		.loc 1 227 24 is_stmt 0 view .LVU134
ARM GAS  D:\Temp\ccNq2L4j.s 			page 15


 516 00f6 6227     		movs	r7, #98
 517 00f8 2F55     		strb	r7, [r5, r4]
 227:lvgl/src/lv_misc/lv_printf.c ****         }
 518              		.loc 1 227 20 view .LVU135
 519 00fa 0134     		adds	r4, r4, #1
 520              	.LVL49:
 227:lvgl/src/lv_misc/lv_printf.c ****         }
 521              		.loc 1 227 20 view .LVU136
 522 00fc C5E7     		b	.L34
 523              	.L37:
 238:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '+';  // ignore the space if the '+' exists
 524              		.loc 1 238 14 is_stmt 1 view .LVU137
 238:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '+';  // ignore the space if the '+' exists
 525              		.loc 1 238 16 is_stmt 0 view .LVU138
 526 00fe 16F0040F 		tst	r6, #4
 527 0102 03D0     		beq	.L38
 239:lvgl/src/lv_misc/lv_printf.c ****         }
 528              		.loc 1 239 13 is_stmt 1 view .LVU139
 529              	.LVL50:
 239:lvgl/src/lv_misc/lv_printf.c ****         }
 530              		.loc 1 239 24 is_stmt 0 view .LVU140
 531 0104 2B27     		movs	r7, #43
 532 0106 2F55     		strb	r7, [r5, r4]
 239:lvgl/src/lv_misc/lv_printf.c ****         }
 533              		.loc 1 239 20 view .LVU141
 534 0108 0134     		adds	r4, r4, #1
 535              	.LVL51:
 239:lvgl/src/lv_misc/lv_printf.c ****         }
 536              		.loc 1 239 20 view .LVU142
 537 010a CBE7     		b	.L36
 538              	.L38:
 241:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = ' ';
 539              		.loc 1 241 14 is_stmt 1 view .LVU143
 241:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = ' ';
 540              		.loc 1 241 16 is_stmt 0 view .LVU144
 541 010c 16F0080F 		tst	r6, #8
 542 0110 C8D0     		beq	.L36
 242:lvgl/src/lv_misc/lv_printf.c ****         }
 543              		.loc 1 242 13 is_stmt 1 view .LVU145
 544              	.LVL52:
 242:lvgl/src/lv_misc/lv_printf.c ****         }
 545              		.loc 1 242 24 is_stmt 0 view .LVU146
 546 0112 2027     		movs	r7, #32
 547 0114 2F55     		strb	r7, [r5, r4]
 242:lvgl/src/lv_misc/lv_printf.c ****         }
 548              		.loc 1 242 20 view .LVU147
 549 0116 0134     		adds	r4, r4, #1
 550              	.LVL53:
 242:lvgl/src/lv_misc/lv_printf.c ****         }
 551              		.loc 1 242 20 view .LVU148
 552 0118 C4E7     		b	.L36
 553              		.cfi_endproc
 554              	.LFE136:
 556              		.section	.text._ntoa_long,"ax",%progbits
 557              		.align	1
 558              		.syntax unified
 559              		.thumb
ARM GAS  D:\Temp\ccNq2L4j.s 			page 16


 560              		.thumb_func
 561              		.fpu fpv4-sp-d16
 563              	_ntoa_long:
 564              	.LVL54:
 565              	.LFB137:
 248:lvgl/src/lv_misc/lv_printf.c **** 
 249:lvgl/src/lv_misc/lv_printf.c **** // internal itoa for 'long' type
 250:lvgl/src/lv_misc/lv_printf.c **** static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long 
 251:lvgl/src/lv_misc/lv_printf.c ****                          unsigned long base, unsigned int prec, unsigned int width, unsigned int fl
 252:lvgl/src/lv_misc/lv_printf.c **** {
 566              		.loc 1 252 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 24, pretend = 0, frame = 32
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		.loc 1 252 1 is_stmt 0 view .LVU150
 571 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 572              	.LCFI8:
 573              		.cfi_def_cfa_offset 24
 574              		.cfi_offset 4, -24
 575              		.cfi_offset 5, -20
 576              		.cfi_offset 6, -16
 577              		.cfi_offset 7, -12
 578              		.cfi_offset 8, -8
 579              		.cfi_offset 14, -4
 580 0004 90B0     		sub	sp, sp, #64
 581              	.LCFI9:
 582              		.cfi_def_cfa_offset 88
 583 0006 169D     		ldr	r5, [sp, #88]
 584 0008 189F     		ldr	r7, [sp, #96]
 585 000a DDF86CC0 		ldr	ip, [sp, #108]
 253:lvgl/src/lv_misc/lv_printf.c ****     char buf[PRINTF_NTOA_BUFFER_SIZE];
 586              		.loc 1 253 5 is_stmt 1 view .LVU151
 254:lvgl/src/lv_misc/lv_printf.c ****     size_t len = 0U;
 587              		.loc 1 254 5 view .LVU152
 588              	.LVL55:
 255:lvgl/src/lv_misc/lv_printf.c **** 
 256:lvgl/src/lv_misc/lv_printf.c ****     // no hash for 0 values
 257:lvgl/src/lv_misc/lv_printf.c ****     if(!value) {
 589              		.loc 1 257 5 view .LVU153
 590              		.loc 1 257 7 is_stmt 0 view .LVU154
 591 000e 0DB9     		cbnz	r5, .L47
 258:lvgl/src/lv_misc/lv_printf.c ****         flags &= ~FLAGS_HASH;
 592              		.loc 1 258 9 is_stmt 1 view .LVU155
 593              		.loc 1 258 15 is_stmt 0 view .LVU156
 594 0010 2CF0100C 		bic	ip, ip, #16
 595              	.LVL56:
 596              	.L47:
 259:lvgl/src/lv_misc/lv_printf.c ****     }
 260:lvgl/src/lv_misc/lv_printf.c **** 
 261:lvgl/src/lv_misc/lv_printf.c ****     // write if precision != 0 and value is != 0
 262:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_PRECISION) || value) {
 597              		.loc 1 262 5 is_stmt 1 view .LVU157
 598              		.loc 1 262 7 is_stmt 0 view .LVU158
 599 0014 1CF48066 		ands	r6, ip, #1024
 600 0018 1BD0     		beq	.L53
 601              		.loc 1 262 35 discriminator 1 view .LVU159
 602 001a 3DB3     		cbz	r5, .L54
ARM GAS  D:\Temp\ccNq2L4j.s 			page 17


 603 001c 0026     		movs	r6, #0
 604 001e 18E0     		b	.L53
 605              	.LVL57:
 606              	.L50:
 607              	.LBB23:
 263:lvgl/src/lv_misc/lv_printf.c ****         do {
 264:lvgl/src/lv_misc/lv_printf.c ****             const char digit = (char)(value % base);
 265:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 608              		.loc 1 265 91 discriminator 2 view .LVU160
 609 0020 1CF0200F 		tst	ip, #32
 610 0024 1FD0     		beq	.L55
 611              		.loc 1 265 91 view .LVU161
 612 0026 4FF0410E 		mov	lr, #65
 613              	.L52:
 614              		.loc 1 265 91 discriminator 7 view .LVU162
 615 002a 7444     		add	r4, r4, lr
 616              	.LVL58:
 617              		.loc 1 265 91 discriminator 7 view .LVU163
 618 002c E4B2     		uxtb	r4, r4
 619              		.loc 1 265 24 discriminator 7 view .LVU164
 620 002e 0A3C     		subs	r4, r4, #10
 621 0030 E4B2     		uxtb	r4, r4
 622              	.L51:
 623              		.loc 1 265 20 discriminator 8 view .LVU165
 624 0032 06F1010E 		add	lr, r6, #1
 625              	.LVL59:
 626              		.loc 1 265 24 discriminator 8 view .LVU166
 627 0036 0DF14008 		add	r8, sp, #64
 628 003a 4644     		add	r6, r6, r8
 629 003c 06F8204C 		strb	r4, [r6, #-32]
 266:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 630              		.loc 1 266 13 is_stmt 1 discriminator 8 view .LVU167
 631              		.loc 1 266 19 is_stmt 0 discriminator 8 view .LVU168
 632 0040 B5FBF7F4 		udiv	r4, r5, r7
 633              	.LVL60:
 634              		.loc 1 266 19 discriminator 8 view .LVU169
 635              	.LBE23:
 267:lvgl/src/lv_misc/lv_printf.c ****         } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 636              		.loc 1 267 9 discriminator 8 view .LVU170
 637 0044 BD42     		cmp	r5, r7
 638 0046 13D3     		bcc	.L49
 639              		.loc 1 267 23 discriminator 1 view .LVU171
 640 0048 BEF11F0F 		cmp	lr, #31
 641 004c 10D8     		bhi	.L49
 642              	.LBB24:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 643              		.loc 1 265 20 view .LVU172
 644 004e 7646     		mov	r6, lr
 266:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 645              		.loc 1 266 19 view .LVU173
 646 0050 2546     		mov	r5, r4
 647              	.LVL61:
 648              	.L53:
 266:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 649              		.loc 1 266 19 view .LVU174
 650              	.LBE24:
 263:lvgl/src/lv_misc/lv_printf.c ****             const char digit = (char)(value % base);
ARM GAS  D:\Temp\ccNq2L4j.s 			page 18


 651              		.loc 1 263 9 is_stmt 1 view .LVU175
 652              	.LBB25:
 264:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 653              		.loc 1 264 13 view .LVU176
 264:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 654              		.loc 1 264 45 is_stmt 0 view .LVU177
 655 0052 B5FBF7F4 		udiv	r4, r5, r7
 656 0056 07FB1454 		mls	r4, r7, r4, r5
 264:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 657              		.loc 1 264 24 view .LVU178
 658 005a E4B2     		uxtb	r4, r4
 659              	.LVL62:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 660              		.loc 1 265 13 is_stmt 1 view .LVU179
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 661              		.loc 1 265 24 is_stmt 0 view .LVU180
 662 005c 092C     		cmp	r4, #9
 663 005e DFD8     		bhi	.L50
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 664              		.loc 1 265 24 discriminator 1 view .LVU181
 665 0060 3034     		adds	r4, r4, #48
 666              	.LVL63:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 667              		.loc 1 265 24 discriminator 1 view .LVU182
 668 0062 E4B2     		uxtb	r4, r4
 669              	.LVL64:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 670              		.loc 1 265 24 discriminator 1 view .LVU183
 671 0064 E5E7     		b	.L51
 672              	.LVL65:
 673              	.L55:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 674              		.loc 1 265 91 view .LVU184
 675 0066 4FF0610E 		mov	lr, #97
 676 006a DEE7     		b	.L52
 677              	.LVL66:
 678              	.L54:
 265:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 679              		.loc 1 265 91 view .LVU185
 680              	.LBE25:
 254:lvgl/src/lv_misc/lv_printf.c **** 
 681              		.loc 1 254 12 view .LVU186
 682 006c 4FF0000E 		mov	lr, #0
 683              	.LVL67:
 684              	.L49:
 268:lvgl/src/lv_misc/lv_printf.c ****     }
 269:lvgl/src/lv_misc/lv_printf.c **** 
 270:lvgl/src/lv_misc/lv_printf.c ****     return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, wid
 685              		.loc 1 270 5 is_stmt 1 view .LVU187
 686              		.loc 1 270 12 is_stmt 0 view .LVU188
 687 0070 CDF818C0 		str	ip, [sp, #24]
 688 0074 1A9C     		ldr	r4, [sp, #104]
 689 0076 0594     		str	r4, [sp, #20]
 690 0078 199C     		ldr	r4, [sp, #100]
 691 007a 0494     		str	r4, [sp, #16]
 692 007c 0397     		str	r7, [sp, #12]
 693 007e 9DF85C40 		ldrb	r4, [sp, #92]	@ zero_extendqisi2
ARM GAS  D:\Temp\ccNq2L4j.s 			page 19


 694 0082 0294     		str	r4, [sp, #8]
 695 0084 CDF804E0 		str	lr, [sp, #4]
 696 0088 08AC     		add	r4, sp, #32
 697 008a 0094     		str	r4, [sp]
 698 008c FFF7FEFF 		bl	_ntoa_format
 699              	.LVL68:
 271:lvgl/src/lv_misc/lv_printf.c **** }
 700              		.loc 1 271 1 view .LVU189
 701 0090 10B0     		add	sp, sp, #64
 702              	.LCFI10:
 703              		.cfi_def_cfa_offset 24
 704              		@ sp needed
 705 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 706              		.loc 1 271 1 view .LVU190
 707              		.cfi_endproc
 708              	.LFE137:
 710              		.global	__aeabi_uldivmod
 711              		.section	.text._ntoa_long_long,"ax",%progbits
 712              		.align	1
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	_ntoa_long_long:
 719              	.LVL69:
 720              	.LFB138:
 272:lvgl/src/lv_misc/lv_printf.c **** 
 273:lvgl/src/lv_misc/lv_printf.c **** // internal itoa for 'long long' type
 274:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 275:lvgl/src/lv_misc/lv_printf.c **** static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned 
 276:lvgl/src/lv_misc/lv_printf.c ****                               bool negative, unsigned long long base, unsigned int prec, unsigned i
 277:lvgl/src/lv_misc/lv_printf.c **** {
 721              		.loc 1 277 1 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 36, pretend = 0, frame = 48
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              		.loc 1 277 1 is_stmt 0 view .LVU192
 726 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 727              	.LCFI11:
 728              		.cfi_def_cfa_offset 36
 729              		.cfi_offset 4, -36
 730              		.cfi_offset 5, -32
 731              		.cfi_offset 6, -28
 732              		.cfi_offset 7, -24
 733              		.cfi_offset 8, -20
 734              		.cfi_offset 9, -16
 735              		.cfi_offset 10, -12
 736              		.cfi_offset 11, -8
 737              		.cfi_offset 14, -4
 738 0004 95B0     		sub	sp, sp, #84
 739              	.LCFI12:
 740              		.cfi_def_cfa_offset 120
 741 0006 0990     		str	r0, [sp, #36]
 742 0008 0A91     		str	r1, [sp, #40]
 743 000a 0B92     		str	r2, [sp, #44]
 744 000c 9B46     		mov	fp, r3
 745 000e DDE91E45 		ldrd	r4, [sp, #120]
ARM GAS  D:\Temp\ccNq2L4j.s 			page 20


 746 0012 DDE92289 		ldrd	r8, [sp, #136]
 747 0016 DDF898A0 		ldr	r10, [sp, #152]
 278:lvgl/src/lv_misc/lv_printf.c ****     char buf[PRINTF_NTOA_BUFFER_SIZE];
 748              		.loc 1 278 5 is_stmt 1 view .LVU193
 279:lvgl/src/lv_misc/lv_printf.c ****     size_t len = 0U;
 749              		.loc 1 279 5 view .LVU194
 750              	.LVL70:
 280:lvgl/src/lv_misc/lv_printf.c **** 
 281:lvgl/src/lv_misc/lv_printf.c ****     // no hash for 0 values
 282:lvgl/src/lv_misc/lv_printf.c ****     if(!value) {
 751              		.loc 1 282 5 view .LVU195
 752              		.loc 1 282 7 is_stmt 0 view .LVU196
 753 001a 54EA0503 		orrs	r3, r4, r5
 754              	.LVL71:
 755              		.loc 1 282 7 view .LVU197
 756 001e 01D1     		bne	.L59
 283:lvgl/src/lv_misc/lv_printf.c ****         flags &= ~FLAGS_HASH;
 757              		.loc 1 283 9 is_stmt 1 view .LVU198
 758              		.loc 1 283 15 is_stmt 0 view .LVU199
 759 0020 2AF0100A 		bic	r10, r10, #16
 760              	.LVL72:
 761              	.L59:
 284:lvgl/src/lv_misc/lv_printf.c ****     }
 285:lvgl/src/lv_misc/lv_printf.c **** 
 286:lvgl/src/lv_misc/lv_printf.c ****     // write if precision != 0 and value is != 0
 287:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_PRECISION) || value) {
 762              		.loc 1 287 5 is_stmt 1 view .LVU200
 763              		.loc 1 287 7 is_stmt 0 view .LVU201
 764 0024 1AF48066 		ands	r6, r10, #1024
 765 0028 20D0     		beq	.L65
 766              		.loc 1 287 35 discriminator 1 view .LVU202
 767 002a 54EA0503 		orrs	r3, r4, r5
 768 002e 2BD0     		beq	.L66
 769 0030 0026     		movs	r6, #0
 770 0032 1BE0     		b	.L65
 771              	.LVL73:
 772              	.L62:
 773              	.LBB26:
 288:lvgl/src/lv_misc/lv_printf.c ****         do {
 289:lvgl/src/lv_misc/lv_printf.c ****             const char digit = (char)(value % base);
 290:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 774              		.loc 1 290 91 discriminator 2 view .LVU203
 775 0034 1AF0200F 		tst	r10, #32
 776 0038 24D0     		beq	.L67
 777              		.loc 1 290 91 view .LVU204
 778 003a 4123     		movs	r3, #65
 779              	.L64:
 780              		.loc 1 290 91 discriminator 7 view .LVU205
 781 003c 1A44     		add	r2, r2, r3
 782              	.LVL74:
 783              		.loc 1 290 91 discriminator 7 view .LVU206
 784 003e D2B2     		uxtb	r2, r2
 785              		.loc 1 290 24 discriminator 7 view .LVU207
 786 0040 0A3A     		subs	r2, r2, #10
 787 0042 D2B2     		uxtb	r2, r2
 788              	.L63:
 789              		.loc 1 290 20 discriminator 8 view .LVU208
ARM GAS  D:\Temp\ccNq2L4j.s 			page 21


 790 0044 771C     		adds	r7, r6, #1
 791              	.LVL75:
 792              		.loc 1 290 24 discriminator 8 view .LVU209
 793 0046 14AB     		add	r3, sp, #80
 794 0048 1E44     		add	r6, r6, r3
 795 004a 06F8202C 		strb	r2, [r6, #-32]
 291:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 796              		.loc 1 291 13 is_stmt 1 discriminator 8 view .LVU210
 797              		.loc 1 291 19 is_stmt 0 discriminator 8 view .LVU211
 798 004e 4246     		mov	r2, r8
 799 0050 4B46     		mov	r3, r9
 800 0052 2046     		mov	r0, r4
 801 0054 2946     		mov	r1, r5
 802 0056 FFF7FEFF 		bl	__aeabi_uldivmod
 803              	.LVL76:
 804              		.loc 1 291 19 discriminator 8 view .LVU212
 805              	.LBE26:
 292:lvgl/src/lv_misc/lv_printf.c ****         } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 806              		.loc 1 292 9 discriminator 8 view .LVU213
 807 005a 4D45     		cmp	r5, r9
 808 005c 08BF     		it	eq
 809 005e 4445     		cmpeq	r4, r8
 810 0060 13D3     		bcc	.L61
 811              		.loc 1 292 23 discriminator 1 view .LVU214
 812 0062 1F2F     		cmp	r7, #31
 813 0064 11D8     		bhi	.L61
 814              	.LBB27:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 815              		.loc 1 290 20 view .LVU215
 816 0066 3E46     		mov	r6, r7
 291:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 817              		.loc 1 291 19 view .LVU216
 818 0068 0446     		mov	r4, r0
 819 006a 0D46     		mov	r5, r1
 820              	.LVL77:
 821              	.L65:
 291:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 822              		.loc 1 291 19 view .LVU217
 823              	.LBE27:
 288:lvgl/src/lv_misc/lv_printf.c ****             const char digit = (char)(value % base);
 824              		.loc 1 288 9 is_stmt 1 view .LVU218
 825              	.LBB28:
 289:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 826              		.loc 1 289 13 view .LVU219
 289:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 827              		.loc 1 289 45 is_stmt 0 view .LVU220
 828 006c 4246     		mov	r2, r8
 829 006e 4B46     		mov	r3, r9
 830 0070 2046     		mov	r0, r4
 831 0072 2946     		mov	r1, r5
 832 0074 FFF7FEFF 		bl	__aeabi_uldivmod
 833              	.LVL78:
 289:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit -
 834              		.loc 1 289 24 view .LVU221
 835 0078 D2B2     		uxtb	r2, r2
 836              	.LVL79:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
ARM GAS  D:\Temp\ccNq2L4j.s 			page 22


 837              		.loc 1 290 13 is_stmt 1 view .LVU222
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 838              		.loc 1 290 24 is_stmt 0 view .LVU223
 839 007a 092A     		cmp	r2, #9
 840 007c DAD8     		bhi	.L62
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 841              		.loc 1 290 24 discriminator 1 view .LVU224
 842 007e 3032     		adds	r2, r2, #48
 843              	.LVL80:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 844              		.loc 1 290 24 discriminator 1 view .LVU225
 845 0080 D2B2     		uxtb	r2, r2
 846              	.LVL81:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 847              		.loc 1 290 24 discriminator 1 view .LVU226
 848 0082 DFE7     		b	.L63
 849              	.LVL82:
 850              	.L67:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 851              		.loc 1 290 91 view .LVU227
 852 0084 6123     		movs	r3, #97
 853 0086 D9E7     		b	.L64
 854              	.LVL83:
 855              	.L66:
 290:lvgl/src/lv_misc/lv_printf.c ****             value /= base;
 856              		.loc 1 290 91 view .LVU228
 857              	.LBE28:
 279:lvgl/src/lv_misc/lv_printf.c **** 
 858              		.loc 1 279 12 view .LVU229
 859 0088 0027     		movs	r7, #0
 860              	.LVL84:
 861              	.L61:
 293:lvgl/src/lv_misc/lv_printf.c ****     }
 294:lvgl/src/lv_misc/lv_printf.c **** 
 295:lvgl/src/lv_misc/lv_printf.c ****     return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, wid
 862              		.loc 1 295 5 is_stmt 1 view .LVU230
 863              		.loc 1 295 12 is_stmt 0 view .LVU231
 864 008a CDF818A0 		str	r10, [sp, #24]
 865 008e 259B     		ldr	r3, [sp, #148]
 866 0090 0593     		str	r3, [sp, #20]
 867 0092 249B     		ldr	r3, [sp, #144]
 868 0094 0493     		str	r3, [sp, #16]
 869 0096 CDF80C80 		str	r8, [sp, #12]
 870 009a 9DF88030 		ldrb	r3, [sp, #128]	@ zero_extendqisi2
 871 009e 0293     		str	r3, [sp, #8]
 872 00a0 0197     		str	r7, [sp, #4]
 873 00a2 0CAB     		add	r3, sp, #48
 874 00a4 0093     		str	r3, [sp]
 875 00a6 5B46     		mov	r3, fp
 876 00a8 0B9A     		ldr	r2, [sp, #44]
 877 00aa 0A99     		ldr	r1, [sp, #40]
 878 00ac 0998     		ldr	r0, [sp, #36]
 879 00ae FFF7FEFF 		bl	_ntoa_format
 880              	.LVL85:
 296:lvgl/src/lv_misc/lv_printf.c **** }
 881              		.loc 1 296 1 view .LVU232
 882 00b2 15B0     		add	sp, sp, #84
ARM GAS  D:\Temp\ccNq2L4j.s 			page 23


 883              	.LCFI13:
 884              		.cfi_def_cfa_offset 36
 885              		@ sp needed
 886 00b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 887              		.loc 1 296 1 view .LVU233
 888              		.cfi_endproc
 889              	.LFE138:
 891              		.section	.text._vsnprintf,"ax",%progbits
 892              		.align	1
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu fpv4-sp-d16
 898              	_vsnprintf:
 899              	.LVL86:
 900              	.LFB139:
 297:lvgl/src/lv_misc/lv_printf.c **** #endif  // PRINTF_SUPPORT_LONG_LONG
 298:lvgl/src/lv_misc/lv_printf.c **** 
 299:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 300:lvgl/src/lv_misc/lv_printf.c **** 
 301:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 302:lvgl/src/lv_misc/lv_printf.c **** // forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT
 303:lvgl/src/lv_misc/lv_printf.c **** static size_t _etoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen, double value, unsig
 304:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int width, unsigned int flags);
 305:lvgl/src/lv_misc/lv_printf.c **** #endif
 306:lvgl/src/lv_misc/lv_printf.c **** 
 307:lvgl/src/lv_misc/lv_printf.c **** // internal ftoa for fixed decimal floating point
 308:lvgl/src/lv_misc/lv_printf.c **** static size_t _ftoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen, double value, unsig
 309:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int width, unsigned int flags)
 310:lvgl/src/lv_misc/lv_printf.c **** {
 311:lvgl/src/lv_misc/lv_printf.c ****     char buf[PRINTF_FTOA_BUFFER_SIZE];
 312:lvgl/src/lv_misc/lv_printf.c ****     size_t len  = 0U;
 313:lvgl/src/lv_misc/lv_printf.c ****     double diff = 0.0;
 314:lvgl/src/lv_misc/lv_printf.c **** 
 315:lvgl/src/lv_misc/lv_printf.c ****     // powers of 10
 316:lvgl/src/lv_misc/lv_printf.c ****     static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 
 317:lvgl/src/lv_misc/lv_printf.c **** 
 318:lvgl/src/lv_misc/lv_printf.c ****     // test for special values
 319:lvgl/src/lv_misc/lv_printf.c ****     if(value != value)
 320:lvgl/src/lv_misc/lv_printf.c ****         return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 321:lvgl/src/lv_misc/lv_printf.c ****     if(value < -DBL_MAX)
 322:lvgl/src/lv_misc/lv_printf.c ****         return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 323:lvgl/src/lv_misc/lv_printf.c ****     if(value > DBL_MAX)
 324:lvgl/src/lv_misc/lv_printf.c ****         return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & F
 325:lvgl/src/lv_misc/lv_printf.c ****                         flags);
 326:lvgl/src/lv_misc/lv_printf.c **** 
 327:lvgl/src/lv_misc/lv_printf.c ****     // test for very large values
 328:lvgl/src/lv_misc/lv_printf.c ****     // standard printf behavior is to print EVERY whole number digit -- which could be 100s of char
 329:lvgl/src/lv_misc/lv_printf.c ****     if((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 330:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 331:lvgl/src/lv_misc/lv_printf.c ****         return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 332:lvgl/src/lv_misc/lv_printf.c **** #else
 333:lvgl/src/lv_misc/lv_printf.c ****         return 0U;
 334:lvgl/src/lv_misc/lv_printf.c **** #endif
 335:lvgl/src/lv_misc/lv_printf.c ****     }
 336:lvgl/src/lv_misc/lv_printf.c **** 
 337:lvgl/src/lv_misc/lv_printf.c ****     // test for negative
ARM GAS  D:\Temp\ccNq2L4j.s 			page 24


 338:lvgl/src/lv_misc/lv_printf.c ****     bool negative = false;
 339:lvgl/src/lv_misc/lv_printf.c ****     if(value < 0) {
 340:lvgl/src/lv_misc/lv_printf.c ****         negative = true;
 341:lvgl/src/lv_misc/lv_printf.c ****         value = 0 - value;
 342:lvgl/src/lv_misc/lv_printf.c ****     }
 343:lvgl/src/lv_misc/lv_printf.c **** 
 344:lvgl/src/lv_misc/lv_printf.c ****     // set default precision, if not set explicitly
 345:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_PRECISION)) {
 346:lvgl/src/lv_misc/lv_printf.c ****         prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 347:lvgl/src/lv_misc/lv_printf.c ****     }
 348:lvgl/src/lv_misc/lv_printf.c ****     // limit precision to 9, cause a prec >= 10 can lead to overflow errors
 349:lvgl/src/lv_misc/lv_printf.c ****     while((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 350:lvgl/src/lv_misc/lv_printf.c ****         buf[len++] = '0';
 351:lvgl/src/lv_misc/lv_printf.c ****         prec--;
 352:lvgl/src/lv_misc/lv_printf.c ****     }
 353:lvgl/src/lv_misc/lv_printf.c **** 
 354:lvgl/src/lv_misc/lv_printf.c ****     int whole = (int)value;
 355:lvgl/src/lv_misc/lv_printf.c ****     double tmp = (value - whole) * pow10[prec];
 356:lvgl/src/lv_misc/lv_printf.c ****     unsigned long frac = (unsigned long)tmp;
 357:lvgl/src/lv_misc/lv_printf.c ****     diff = tmp - frac;
 358:lvgl/src/lv_misc/lv_printf.c **** 
 359:lvgl/src/lv_misc/lv_printf.c ****     if(diff > 0.5) {
 360:lvgl/src/lv_misc/lv_printf.c ****         ++frac;
 361:lvgl/src/lv_misc/lv_printf.c ****         // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 362:lvgl/src/lv_misc/lv_printf.c ****         if(frac >= pow10[prec]) {
 363:lvgl/src/lv_misc/lv_printf.c ****             frac = 0;
 364:lvgl/src/lv_misc/lv_printf.c ****             ++whole;
 365:lvgl/src/lv_misc/lv_printf.c ****         }
 366:lvgl/src/lv_misc/lv_printf.c ****     }
 367:lvgl/src/lv_misc/lv_printf.c ****     else if(diff < 0.5) {
 368:lvgl/src/lv_misc/lv_printf.c ****     }
 369:lvgl/src/lv_misc/lv_printf.c ****     else if((frac == 0U) || (frac & 1U)) {
 370:lvgl/src/lv_misc/lv_printf.c ****         // if halfway, round up if odd OR if last digit is 0
 371:lvgl/src/lv_misc/lv_printf.c ****         ++frac;
 372:lvgl/src/lv_misc/lv_printf.c ****     }
 373:lvgl/src/lv_misc/lv_printf.c **** 
 374:lvgl/src/lv_misc/lv_printf.c ****     if(prec == 0U) {
 375:lvgl/src/lv_misc/lv_printf.c ****         diff = value - (double)whole;
 376:lvgl/src/lv_misc/lv_printf.c ****         if((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 377:lvgl/src/lv_misc/lv_printf.c ****             // exactly 0.5 and ODD, then round up
 378:lvgl/src/lv_misc/lv_printf.c ****             // 1.5 -> 2, but 2.5 -> 2
 379:lvgl/src/lv_misc/lv_printf.c ****             ++whole;
 380:lvgl/src/lv_misc/lv_printf.c ****         }
 381:lvgl/src/lv_misc/lv_printf.c ****     }
 382:lvgl/src/lv_misc/lv_printf.c ****     else {
 383:lvgl/src/lv_misc/lv_printf.c ****         unsigned int count = prec;
 384:lvgl/src/lv_misc/lv_printf.c ****         // now do fractional part, as an unsigned number
 385:lvgl/src/lv_misc/lv_printf.c ****         while(len < PRINTF_FTOA_BUFFER_SIZE) {
 386:lvgl/src/lv_misc/lv_printf.c ****             --count;
 387:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = (char)(48U + (frac % 10U));
 388:lvgl/src/lv_misc/lv_printf.c ****             if(!(frac /= 10U)) {
 389:lvgl/src/lv_misc/lv_printf.c ****                 break;
 390:lvgl/src/lv_misc/lv_printf.c ****             }
 391:lvgl/src/lv_misc/lv_printf.c ****         }
 392:lvgl/src/lv_misc/lv_printf.c ****         // add extra 0s
 393:lvgl/src/lv_misc/lv_printf.c ****         while((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 394:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
ARM GAS  D:\Temp\ccNq2L4j.s 			page 25


 395:lvgl/src/lv_misc/lv_printf.c ****         }
 396:lvgl/src/lv_misc/lv_printf.c ****         if(len < PRINTF_FTOA_BUFFER_SIZE) {
 397:lvgl/src/lv_misc/lv_printf.c ****             // add decimal
 398:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '.';
 399:lvgl/src/lv_misc/lv_printf.c ****         }
 400:lvgl/src/lv_misc/lv_printf.c ****     }
 401:lvgl/src/lv_misc/lv_printf.c **** 
 402:lvgl/src/lv_misc/lv_printf.c ****     // do whole part, number is reversed
 403:lvgl/src/lv_misc/lv_printf.c ****     while(len < PRINTF_FTOA_BUFFER_SIZE) {
 404:lvgl/src/lv_misc/lv_printf.c ****         buf[len++] = (char)(48 + (whole % 10));
 405:lvgl/src/lv_misc/lv_printf.c ****         if(!(whole /= 10)) {
 406:lvgl/src/lv_misc/lv_printf.c ****             break;
 407:lvgl/src/lv_misc/lv_printf.c ****         }
 408:lvgl/src/lv_misc/lv_printf.c ****     }
 409:lvgl/src/lv_misc/lv_printf.c **** 
 410:lvgl/src/lv_misc/lv_printf.c ****     // pad leading zeros
 411:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 412:lvgl/src/lv_misc/lv_printf.c ****         if(width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 413:lvgl/src/lv_misc/lv_printf.c ****             width--;
 414:lvgl/src/lv_misc/lv_printf.c ****         }
 415:lvgl/src/lv_misc/lv_printf.c ****         while((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 416:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '0';
 417:lvgl/src/lv_misc/lv_printf.c ****         }
 418:lvgl/src/lv_misc/lv_printf.c ****     }
 419:lvgl/src/lv_misc/lv_printf.c **** 
 420:lvgl/src/lv_misc/lv_printf.c ****     if(len < PRINTF_FTOA_BUFFER_SIZE) {
 421:lvgl/src/lv_misc/lv_printf.c ****         if(negative) {
 422:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '-';
 423:lvgl/src/lv_misc/lv_printf.c ****         }
 424:lvgl/src/lv_misc/lv_printf.c ****         else if(flags & FLAGS_PLUS) {
 425:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = '+';  // ignore the space if the '+' exists
 426:lvgl/src/lv_misc/lv_printf.c ****         }
 427:lvgl/src/lv_misc/lv_printf.c ****         else if(flags & FLAGS_SPACE) {
 428:lvgl/src/lv_misc/lv_printf.c ****             buf[len++] = ' ';
 429:lvgl/src/lv_misc/lv_printf.c ****         }
 430:lvgl/src/lv_misc/lv_printf.c ****     }
 431:lvgl/src/lv_misc/lv_printf.c **** 
 432:lvgl/src/lv_misc/lv_printf.c ****     return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 433:lvgl/src/lv_misc/lv_printf.c **** }
 434:lvgl/src/lv_misc/lv_printf.c **** 
 435:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 436:lvgl/src/lv_misc/lv_printf.c **** // internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.ja
 437:lvgl/src/lv_misc/lv_printf.c **** static size_t _etoa(out_fct_type out, char * buffer, size_t idx, size_t maxlen, double value, unsig
 438:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int width, unsigned int flags)
 439:lvgl/src/lv_misc/lv_printf.c **** {
 440:lvgl/src/lv_misc/lv_printf.c ****     // check for NaN and special values
 441:lvgl/src/lv_misc/lv_printf.c ****     if((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 442:lvgl/src/lv_misc/lv_printf.c ****         return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 443:lvgl/src/lv_misc/lv_printf.c ****     }
 444:lvgl/src/lv_misc/lv_printf.c **** 
 445:lvgl/src/lv_misc/lv_printf.c ****     // determine the sign
 446:lvgl/src/lv_misc/lv_printf.c ****     const bool negative = value < 0;
 447:lvgl/src/lv_misc/lv_printf.c ****     if(negative) {
 448:lvgl/src/lv_misc/lv_printf.c ****         value = -value;
 449:lvgl/src/lv_misc/lv_printf.c ****     }
 450:lvgl/src/lv_misc/lv_printf.c **** 
 451:lvgl/src/lv_misc/lv_printf.c ****     // default precision
ARM GAS  D:\Temp\ccNq2L4j.s 			page 26


 452:lvgl/src/lv_misc/lv_printf.c ****     if(!(flags & FLAGS_PRECISION)) {
 453:lvgl/src/lv_misc/lv_printf.c ****         prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 454:lvgl/src/lv_misc/lv_printf.c ****     }
 455:lvgl/src/lv_misc/lv_printf.c **** 
 456:lvgl/src/lv_misc/lv_printf.c ****     // determine the decimal exponent
 457:lvgl/src/lv_misc/lv_printf.c ****     // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
 458:lvgl/src/lv_misc/lv_printf.c ****     union {
 459:lvgl/src/lv_misc/lv_printf.c ****         uint64_t U;
 460:lvgl/src/lv_misc/lv_printf.c ****         double   F;
 461:lvgl/src/lv_misc/lv_printf.c ****     } conv;
 462:lvgl/src/lv_misc/lv_printf.c **** 
 463:lvgl/src/lv_misc/lv_printf.c ****     conv.F = value;
 464:lvgl/src/lv_misc/lv_printf.c ****     int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 465:lvgl/src/lv_misc/lv_printf.c ****     conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is
 466:lvgl/src/lv_misc/lv_printf.c ****     // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
 467:lvgl/src/lv_misc/lv_printf.c ****     int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602
 468:lvgl/src/lv_misc/lv_printf.c ****     // now we want to compute 10^expval but we want to be sure it won't overflow
 469:lvgl/src/lv_misc/lv_printf.c ****     exp2 = (int)(expval * 3.321928094887362 + 0.5);
 470:lvgl/src/lv_misc/lv_printf.c ****     const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 471:lvgl/src/lv_misc/lv_printf.c ****     const double z2 = z * z;
 472:lvgl/src/lv_misc/lv_printf.c ****     conv.U = (uint64_t)(exp2 + 1023) << 52U;
 473:lvgl/src/lv_misc/lv_printf.c ****     // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_func
 474:lvgl/src/lv_misc/lv_printf.c ****     conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 475:lvgl/src/lv_misc/lv_printf.c ****     // correct for rounding errors
 476:lvgl/src/lv_misc/lv_printf.c ****     if(value < conv.F) {
 477:lvgl/src/lv_misc/lv_printf.c ****         expval--;
 478:lvgl/src/lv_misc/lv_printf.c ****         conv.F /= 10;
 479:lvgl/src/lv_misc/lv_printf.c ****     }
 480:lvgl/src/lv_misc/lv_printf.c **** 
 481:lvgl/src/lv_misc/lv_printf.c ****     // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
 482:lvgl/src/lv_misc/lv_printf.c ****     unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 483:lvgl/src/lv_misc/lv_printf.c **** 
 484:lvgl/src/lv_misc/lv_printf.c ****     // in "%g" mode, "prec" is the number of *significant figures* not decimals
 485:lvgl/src/lv_misc/lv_printf.c ****     if(flags & FLAGS_ADAPT_EXP) {
 486:lvgl/src/lv_misc/lv_printf.c ****         // do we want to fall-back to "%f" mode?
 487:lvgl/src/lv_misc/lv_printf.c ****         if((value >= 1e-4) && (value < 1e6)) {
 488:lvgl/src/lv_misc/lv_printf.c ****             if((int)prec > expval) {
 489:lvgl/src/lv_misc/lv_printf.c ****                 prec = (unsigned)((int)prec - expval - 1);
 490:lvgl/src/lv_misc/lv_printf.c ****             }
 491:lvgl/src/lv_misc/lv_printf.c ****             else {
 492:lvgl/src/lv_misc/lv_printf.c ****                 prec = 0;
 493:lvgl/src/lv_misc/lv_printf.c ****             }
 494:lvgl/src/lv_misc/lv_printf.c ****             flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 495:lvgl/src/lv_misc/lv_printf.c ****             // no characters in exponent
 496:lvgl/src/lv_misc/lv_printf.c ****             minwidth = 0U;
 497:lvgl/src/lv_misc/lv_printf.c ****             expval   = 0;
 498:lvgl/src/lv_misc/lv_printf.c ****         }
 499:lvgl/src/lv_misc/lv_printf.c ****         else {
 500:lvgl/src/lv_misc/lv_printf.c ****             // we use one sigfig for the whole part
 501:lvgl/src/lv_misc/lv_printf.c ****             if((prec > 0) && (flags & FLAGS_PRECISION)) {
 502:lvgl/src/lv_misc/lv_printf.c ****                 --prec;
 503:lvgl/src/lv_misc/lv_printf.c ****             }
 504:lvgl/src/lv_misc/lv_printf.c ****         }
 505:lvgl/src/lv_misc/lv_printf.c ****     }
 506:lvgl/src/lv_misc/lv_printf.c **** 
 507:lvgl/src/lv_misc/lv_printf.c ****     // will everything fit?
 508:lvgl/src/lv_misc/lv_printf.c ****     unsigned int fwidth = width;
ARM GAS  D:\Temp\ccNq2L4j.s 			page 27


 509:lvgl/src/lv_misc/lv_printf.c ****     if(width > minwidth) {
 510:lvgl/src/lv_misc/lv_printf.c ****         // we didn't fall-back so subtract the characters required for the exponent
 511:lvgl/src/lv_misc/lv_printf.c ****         fwidth -= minwidth;
 512:lvgl/src/lv_misc/lv_printf.c ****     }
 513:lvgl/src/lv_misc/lv_printf.c ****     else {
 514:lvgl/src/lv_misc/lv_printf.c ****         // not enough characters, so go back to default sizing
 515:lvgl/src/lv_misc/lv_printf.c ****         fwidth = 0U;
 516:lvgl/src/lv_misc/lv_printf.c ****     }
 517:lvgl/src/lv_misc/lv_printf.c ****     if((flags & FLAGS_LEFT) && minwidth) {
 518:lvgl/src/lv_misc/lv_printf.c ****         // if we're padding on the right, DON'T pad the floating part
 519:lvgl/src/lv_misc/lv_printf.c ****         fwidth = 0U;
 520:lvgl/src/lv_misc/lv_printf.c ****     }
 521:lvgl/src/lv_misc/lv_printf.c **** 
 522:lvgl/src/lv_misc/lv_printf.c ****     // rescale the float value
 523:lvgl/src/lv_misc/lv_printf.c ****     if(expval) {
 524:lvgl/src/lv_misc/lv_printf.c ****         value /= conv.F;
 525:lvgl/src/lv_misc/lv_printf.c ****     }
 526:lvgl/src/lv_misc/lv_printf.c **** 
 527:lvgl/src/lv_misc/lv_printf.c ****     // output the floating part
 528:lvgl/src/lv_misc/lv_printf.c ****     const size_t start_idx = idx;
 529:lvgl/src/lv_misc/lv_printf.c ****     idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_A
 530:lvgl/src/lv_misc/lv_printf.c **** 
 531:lvgl/src/lv_misc/lv_printf.c ****     // output the exponent part
 532:lvgl/src/lv_misc/lv_printf.c ****     if(minwidth) {
 533:lvgl/src/lv_misc/lv_printf.c ****         // output the exponential symbol
 534:lvgl/src/lv_misc/lv_printf.c ****         out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 535:lvgl/src/lv_misc/lv_printf.c ****         // output the exponent value
 536:lvgl/src/lv_misc/lv_printf.c ****         idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10,
 537:lvgl/src/lv_misc/lv_printf.c ****                          FLAGS_ZEROPAD | FLAGS_PLUS);
 538:lvgl/src/lv_misc/lv_printf.c ****         // might need to right-pad spaces
 539:lvgl/src/lv_misc/lv_printf.c ****         if(flags & FLAGS_LEFT) {
 540:lvgl/src/lv_misc/lv_printf.c ****             while(idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 541:lvgl/src/lv_misc/lv_printf.c ****         }
 542:lvgl/src/lv_misc/lv_printf.c ****     }
 543:lvgl/src/lv_misc/lv_printf.c ****     return idx;
 544:lvgl/src/lv_misc/lv_printf.c **** }
 545:lvgl/src/lv_misc/lv_printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 546:lvgl/src/lv_misc/lv_printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 547:lvgl/src/lv_misc/lv_printf.c **** 
 548:lvgl/src/lv_misc/lv_printf.c **** // internal vsnprintf
 549:lvgl/src/lv_misc/lv_printf.c **** static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va
 550:lvgl/src/lv_misc/lv_printf.c **** {
 901              		.loc 1 550 1 is_stmt 1 view -0
 902              		.cfi_startproc
 903              		@ args = 4, pretend = 0, frame = 16
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              		.loc 1 550 1 is_stmt 0 view .LVU235
 906 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 907              	.LCFI14:
 908              		.cfi_def_cfa_offset 36
 909              		.cfi_offset 4, -36
 910              		.cfi_offset 5, -32
 911              		.cfi_offset 6, -28
 912              		.cfi_offset 7, -24
 913              		.cfi_offset 8, -20
 914              		.cfi_offset 9, -16
 915              		.cfi_offset 10, -12
ARM GAS  D:\Temp\ccNq2L4j.s 			page 28


 916              		.cfi_offset 11, -8
 917              		.cfi_offset 14, -4
 918 0004 8FB0     		sub	sp, sp, #60
 919              	.LCFI15:
 920              		.cfi_def_cfa_offset 96
 921 0006 0646     		mov	r6, r0
 922 0008 0A92     		str	r2, [sp, #40]
 923 000a 0D93     		str	r3, [sp, #52]
 551:lvgl/src/lv_misc/lv_printf.c ****     unsigned int flags, width, precision, n;
 924              		.loc 1 551 5 is_stmt 1 view .LVU236
 552:lvgl/src/lv_misc/lv_printf.c ****     size_t idx = 0U;
 925              		.loc 1 552 5 view .LVU237
 926              	.LVL87:
 553:lvgl/src/lv_misc/lv_printf.c **** 
 554:lvgl/src/lv_misc/lv_printf.c ****     if(!buffer) {
 927              		.loc 1 554 5 view .LVU238
 928              		.loc 1 554 7 is_stmt 0 view .LVU239
 929 000c 0B91     		str	r1, [sp, #44]
 930 000e 0029     		cmp	r1, #0
 931 0010 00F0F782 		beq	.L165
 932              	.L73:
 555:lvgl/src/lv_misc/lv_printf.c ****         // use null output function
 556:lvgl/src/lv_misc/lv_printf.c ****         out = _out_null;
 557:lvgl/src/lv_misc/lv_printf.c ****     }
 558:lvgl/src/lv_misc/lv_printf.c **** 
 559:lvgl/src/lv_misc/lv_printf.c ****     while(*format) {
 560:lvgl/src/lv_misc/lv_printf.c ****         // format specifier?  %[flags][width][.precision][length]
 561:lvgl/src/lv_misc/lv_printf.c ****         if(*format != '%') {
 562:lvgl/src/lv_misc/lv_printf.c ****             // no
 563:lvgl/src/lv_misc/lv_printf.c ****             out(*format, buffer, idx++, maxlen);
 564:lvgl/src/lv_misc/lv_printf.c ****             format++;
 565:lvgl/src/lv_misc/lv_printf.c ****             continue;
 566:lvgl/src/lv_misc/lv_printf.c ****         }
 567:lvgl/src/lv_misc/lv_printf.c ****         else {
 568:lvgl/src/lv_misc/lv_printf.c ****             // yes, evaluate it
 569:lvgl/src/lv_misc/lv_printf.c ****             format++;
 570:lvgl/src/lv_misc/lv_printf.c ****         }
 571:lvgl/src/lv_misc/lv_printf.c **** 
 572:lvgl/src/lv_misc/lv_printf.c ****         // evaluate flags
 573:lvgl/src/lv_misc/lv_printf.c ****         flags = 0U;
 574:lvgl/src/lv_misc/lv_printf.c ****         do {
 575:lvgl/src/lv_misc/lv_printf.c ****             switch(*format) {
 576:lvgl/src/lv_misc/lv_printf.c ****                 case '0':
 577:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_ZEROPAD;
 578:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 579:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 580:lvgl/src/lv_misc/lv_printf.c ****                     break;
 581:lvgl/src/lv_misc/lv_printf.c ****                 case '-':
 582:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_LEFT;
 583:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 584:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 585:lvgl/src/lv_misc/lv_printf.c ****                     break;
 586:lvgl/src/lv_misc/lv_printf.c ****                 case '+':
 587:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_PLUS;
 588:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 589:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 590:lvgl/src/lv_misc/lv_printf.c ****                     break;
ARM GAS  D:\Temp\ccNq2L4j.s 			page 29


 591:lvgl/src/lv_misc/lv_printf.c ****                 case ' ':
 592:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_SPACE;
 593:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 594:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 595:lvgl/src/lv_misc/lv_printf.c ****                     break;
 596:lvgl/src/lv_misc/lv_printf.c ****                 case '#':
 597:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_HASH;
 598:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 599:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 600:lvgl/src/lv_misc/lv_printf.c ****                     break;
 601:lvgl/src/lv_misc/lv_printf.c ****                 default :
 602:lvgl/src/lv_misc/lv_printf.c ****                     n = 0U;
 603:lvgl/src/lv_misc/lv_printf.c ****                     break;
 604:lvgl/src/lv_misc/lv_printf.c ****             }
 605:lvgl/src/lv_misc/lv_printf.c ****         } while(n);
 606:lvgl/src/lv_misc/lv_printf.c **** 
 607:lvgl/src/lv_misc/lv_printf.c ****         // evaluate width field
 608:lvgl/src/lv_misc/lv_printf.c ****         width = 0U;
 609:lvgl/src/lv_misc/lv_printf.c ****         if(_is_digit(*format)) {
 610:lvgl/src/lv_misc/lv_printf.c ****             width = _atoi(&format);
 611:lvgl/src/lv_misc/lv_printf.c ****         }
 612:lvgl/src/lv_misc/lv_printf.c ****         else if(*format == '*') {
 613:lvgl/src/lv_misc/lv_printf.c ****             const int w = va_arg(va, int);
 614:lvgl/src/lv_misc/lv_printf.c ****             if(w < 0) {
 615:lvgl/src/lv_misc/lv_printf.c ****                 flags |= FLAGS_LEFT;    // reverse padding
 616:lvgl/src/lv_misc/lv_printf.c ****                 width = (unsigned int) - w;
 617:lvgl/src/lv_misc/lv_printf.c ****             }
 618:lvgl/src/lv_misc/lv_printf.c ****             else {
 619:lvgl/src/lv_misc/lv_printf.c ****                 width = (unsigned int)w;
 620:lvgl/src/lv_misc/lv_printf.c ****             }
 621:lvgl/src/lv_misc/lv_printf.c ****             format++;
 622:lvgl/src/lv_misc/lv_printf.c ****         }
 623:lvgl/src/lv_misc/lv_printf.c **** 
 624:lvgl/src/lv_misc/lv_printf.c ****         // evaluate precision field
 625:lvgl/src/lv_misc/lv_printf.c ****         precision = 0U;
 626:lvgl/src/lv_misc/lv_printf.c ****         if(*format == '.') {
 627:lvgl/src/lv_misc/lv_printf.c ****             flags |= FLAGS_PRECISION;
 628:lvgl/src/lv_misc/lv_printf.c ****             format++;
 629:lvgl/src/lv_misc/lv_printf.c ****             if(_is_digit(*format)) {
 630:lvgl/src/lv_misc/lv_printf.c ****                 precision = _atoi(&format);
 631:lvgl/src/lv_misc/lv_printf.c ****             }
 632:lvgl/src/lv_misc/lv_printf.c ****             else if(*format == '*') {
 633:lvgl/src/lv_misc/lv_printf.c ****                 const int prec = (int)va_arg(va, int);
 634:lvgl/src/lv_misc/lv_printf.c ****                 precision = prec > 0 ? (unsigned int)prec : 0U;
 635:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 636:lvgl/src/lv_misc/lv_printf.c ****             }
 637:lvgl/src/lv_misc/lv_printf.c ****         }
 638:lvgl/src/lv_misc/lv_printf.c **** 
 639:lvgl/src/lv_misc/lv_printf.c ****         // evaluate length field
 640:lvgl/src/lv_misc/lv_printf.c ****         switch(*format) {
 641:lvgl/src/lv_misc/lv_printf.c ****             case 'l' :
 642:lvgl/src/lv_misc/lv_printf.c ****                 flags |= FLAGS_LONG;
 643:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 644:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'l') {
 645:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_LONG_LONG;
 646:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 647:lvgl/src/lv_misc/lv_printf.c ****                 }
ARM GAS  D:\Temp\ccNq2L4j.s 			page 30


 648:lvgl/src/lv_misc/lv_printf.c ****                 break;
 649:lvgl/src/lv_misc/lv_printf.c ****             case 'h' :
 650:lvgl/src/lv_misc/lv_printf.c ****                 flags |= FLAGS_SHORT;
 651:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 652:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'h') {
 653:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_CHAR;
 654:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 655:lvgl/src/lv_misc/lv_printf.c ****                 }
 656:lvgl/src/lv_misc/lv_printf.c ****                 break;
 657:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_PTRDIFF_T)
 658:lvgl/src/lv_misc/lv_printf.c ****             case 't' :
 659:lvgl/src/lv_misc/lv_printf.c ****                 flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 660:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 661:lvgl/src/lv_misc/lv_printf.c ****                 break;
 662:lvgl/src/lv_misc/lv_printf.c **** #endif
 663:lvgl/src/lv_misc/lv_printf.c ****             case 'j' :
 664:lvgl/src/lv_misc/lv_printf.c ****                 flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 665:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 666:lvgl/src/lv_misc/lv_printf.c ****                 break;
 667:lvgl/src/lv_misc/lv_printf.c ****             case 'z' :
 668:lvgl/src/lv_misc/lv_printf.c ****                 flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 669:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 670:lvgl/src/lv_misc/lv_printf.c ****                 break;
 671:lvgl/src/lv_misc/lv_printf.c ****             default :
 672:lvgl/src/lv_misc/lv_printf.c ****                 break;
 673:lvgl/src/lv_misc/lv_printf.c ****         }
 674:lvgl/src/lv_misc/lv_printf.c **** 
 675:lvgl/src/lv_misc/lv_printf.c ****         // evaluate specifier
 676:lvgl/src/lv_misc/lv_printf.c ****         switch(*format) {
 677:lvgl/src/lv_misc/lv_printf.c ****             case 'd' :
 678:lvgl/src/lv_misc/lv_printf.c ****             case 'i' :
 679:lvgl/src/lv_misc/lv_printf.c ****             case 'u' :
 680:lvgl/src/lv_misc/lv_printf.c ****             case 'x' :
 681:lvgl/src/lv_misc/lv_printf.c ****             case 'X' :
 682:lvgl/src/lv_misc/lv_printf.c ****             case 'o' :
 683:lvgl/src/lv_misc/lv_printf.c ****             case 'b' : {
 684:lvgl/src/lv_misc/lv_printf.c ****                     // set the base
 685:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int base;
 686:lvgl/src/lv_misc/lv_printf.c ****                     if(*format == 'x' || *format == 'X') {
 687:lvgl/src/lv_misc/lv_printf.c ****                         base = 16U;
 688:lvgl/src/lv_misc/lv_printf.c ****                     }
 689:lvgl/src/lv_misc/lv_printf.c ****                     else if(*format == 'o') {
 690:lvgl/src/lv_misc/lv_printf.c ****                         base =  8U;
 691:lvgl/src/lv_misc/lv_printf.c ****                     }
 692:lvgl/src/lv_misc/lv_printf.c ****                     else if(*format == 'b') {
 693:lvgl/src/lv_misc/lv_printf.c ****                         base =  2U;
 694:lvgl/src/lv_misc/lv_printf.c ****                     }
 695:lvgl/src/lv_misc/lv_printf.c ****                     else {
 696:lvgl/src/lv_misc/lv_printf.c ****                         base = 10U;
 697:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_HASH;   // no hash for dec format
 698:lvgl/src/lv_misc/lv_printf.c ****                     }
 699:lvgl/src/lv_misc/lv_printf.c ****                     // uppercase
 700:lvgl/src/lv_misc/lv_printf.c ****                     if(*format == 'X') {
 701:lvgl/src/lv_misc/lv_printf.c ****                         flags |= FLAGS_UPPERCASE;
 702:lvgl/src/lv_misc/lv_printf.c ****                     }
 703:lvgl/src/lv_misc/lv_printf.c **** 
 704:lvgl/src/lv_misc/lv_printf.c ****                     // no plus or space flag for u, x, X, o, b
ARM GAS  D:\Temp\ccNq2L4j.s 			page 31


 705:lvgl/src/lv_misc/lv_printf.c ****                     if((*format != 'i') && (*format != 'd')) {
 706:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 707:lvgl/src/lv_misc/lv_printf.c ****                     }
 708:lvgl/src/lv_misc/lv_printf.c **** 
 709:lvgl/src/lv_misc/lv_printf.c ****                     // ignore '0' flag when precision is given
 710:lvgl/src/lv_misc/lv_printf.c ****                     if(flags & FLAGS_PRECISION) {
 711:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_ZEROPAD;
 712:lvgl/src/lv_misc/lv_printf.c ****                     }
 713:lvgl/src/lv_misc/lv_printf.c **** 
 714:lvgl/src/lv_misc/lv_printf.c ****                     // convert the integer
 715:lvgl/src/lv_misc/lv_printf.c ****                     if((*format == 'i') || (*format == 'd')) {
 716:lvgl/src/lv_misc/lv_printf.c ****                         // signed
 717:lvgl/src/lv_misc/lv_printf.c ****                         if(flags & FLAGS_LONG_LONG) {
 718:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 719:lvgl/src/lv_misc/lv_printf.c ****                             const long long value = va_arg(va, long long);
 720:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(va
 721:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 722:lvgl/src/lv_misc/lv_printf.c **** #endif
 723:lvgl/src/lv_misc/lv_printf.c ****                         }
 724:lvgl/src/lv_misc/lv_printf.c ****                         else if(flags & FLAGS_LONG) {
 725:lvgl/src/lv_misc/lv_printf.c ****                             const long value = va_arg(va, long);
 726:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? 
 727:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 728:lvgl/src/lv_misc/lv_printf.c ****                         }
 729:lvgl/src/lv_misc/lv_printf.c ****                         else {
 730:lvgl/src/lv_misc/lv_printf.c ****                             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags
 731:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 732:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? v
 733:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 734:lvgl/src/lv_misc/lv_printf.c ****                         }
 735:lvgl/src/lv_misc/lv_printf.c ****                     }
 736:lvgl/src/lv_misc/lv_printf.c ****                     else {
 737:lvgl/src/lv_misc/lv_printf.c ****                         // unsigned
 738:lvgl/src/lv_misc/lv_printf.c ****                         if(flags & FLAGS_LONG_LONG) {
 739:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 740:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned lon
 741:lvgl/src/lv_misc/lv_printf.c **** #endif
 742:lvgl/src/lv_misc/lv_printf.c ****                         }
 743:lvgl/src/lv_misc/lv_printf.c ****                         else if(flags & FLAGS_LONG) {
 744:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), f
 745:lvgl/src/lv_misc/lv_printf.c ****                         }
 746:lvgl/src/lv_misc/lv_printf.c ****                         else {
 747:lvgl/src/lv_misc/lv_printf.c ****                             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg
 748:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 749:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 750:lvgl/src/lv_misc/lv_printf.c ****                         }
 751:lvgl/src/lv_misc/lv_printf.c ****                     }
 752:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 753:lvgl/src/lv_misc/lv_printf.c ****                     break;
 754:lvgl/src/lv_misc/lv_printf.c ****                 }
 755:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 756:lvgl/src/lv_misc/lv_printf.c ****             case 'f' :
 757:lvgl/src/lv_misc/lv_printf.c ****             case 'F' :
 758:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'F') flags |= FLAGS_UPPERCASE;
 759:lvgl/src/lv_misc/lv_printf.c ****                 idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 760:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 761:lvgl/src/lv_misc/lv_printf.c ****                 break;
ARM GAS  D:\Temp\ccNq2L4j.s 			page 32


 762:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 763:lvgl/src/lv_misc/lv_printf.c ****             case 'e':
 764:lvgl/src/lv_misc/lv_printf.c ****             case 'E':
 765:lvgl/src/lv_misc/lv_printf.c ****             case 'g':
 766:lvgl/src/lv_misc/lv_printf.c ****             case 'G':
 767:lvgl/src/lv_misc/lv_printf.c ****                 if((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 768:lvgl/src/lv_misc/lv_printf.c ****                 if((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
 769:lvgl/src/lv_misc/lv_printf.c ****                 idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 770:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 771:lvgl/src/lv_misc/lv_printf.c ****                 break;
 772:lvgl/src/lv_misc/lv_printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 773:lvgl/src/lv_misc/lv_printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 774:lvgl/src/lv_misc/lv_printf.c ****             case 'c' : {
 775:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int l = 1U;
 776:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 777:lvgl/src/lv_misc/lv_printf.c ****                     if(!(flags & FLAGS_LEFT)) {
 778:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 779:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 780:lvgl/src/lv_misc/lv_printf.c ****                         }
 781:lvgl/src/lv_misc/lv_printf.c ****                     }
 782:lvgl/src/lv_misc/lv_printf.c ****                     // char output
 783:lvgl/src/lv_misc/lv_printf.c ****                     out((char)va_arg(va, int), buffer, idx++, maxlen);
 784:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 785:lvgl/src/lv_misc/lv_printf.c ****                     if(flags & FLAGS_LEFT) {
 786:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 787:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 788:lvgl/src/lv_misc/lv_printf.c ****                         }
 789:lvgl/src/lv_misc/lv_printf.c ****                     }
 790:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 791:lvgl/src/lv_misc/lv_printf.c ****                     break;
 792:lvgl/src/lv_misc/lv_printf.c ****                 }
 793:lvgl/src/lv_misc/lv_printf.c **** 
 794:lvgl/src/lv_misc/lv_printf.c ****             case 's' : {
 795:lvgl/src/lv_misc/lv_printf.c ****                     const char * p = va_arg(va, char *);
 796:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 797:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 798:lvgl/src/lv_misc/lv_printf.c ****                     if(flags & FLAGS_PRECISION) {
 799:lvgl/src/lv_misc/lv_printf.c ****                         l = (l < precision ? l : precision);
 800:lvgl/src/lv_misc/lv_printf.c ****                     }
 801:lvgl/src/lv_misc/lv_printf.c ****                     if(!(flags & FLAGS_LEFT)) {
 802:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 803:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 804:lvgl/src/lv_misc/lv_printf.c ****                         }
 805:lvgl/src/lv_misc/lv_printf.c ****                     }
 806:lvgl/src/lv_misc/lv_printf.c ****                     // string output
 807:lvgl/src/lv_misc/lv_printf.c ****                     while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 808:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 809:lvgl/src/lv_misc/lv_printf.c ****                     }
 810:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 811:lvgl/src/lv_misc/lv_printf.c ****                     if(flags & FLAGS_LEFT) {
 812:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 813:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 814:lvgl/src/lv_misc/lv_printf.c ****                         }
 815:lvgl/src/lv_misc/lv_printf.c ****                     }
 816:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 817:lvgl/src/lv_misc/lv_printf.c ****                     break;
 818:lvgl/src/lv_misc/lv_printf.c ****                 }
ARM GAS  D:\Temp\ccNq2L4j.s 			page 33


 819:lvgl/src/lv_misc/lv_printf.c **** 
 820:lvgl/src/lv_misc/lv_printf.c ****             case 'p' : {
 821:lvgl/src/lv_misc/lv_printf.c ****                     width = sizeof(void *) * 2U;
 822:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 823:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 824:lvgl/src/lv_misc/lv_printf.c ****                     const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 825:lvgl/src/lv_misc/lv_printf.c ****                     if(is_ll) {
 826:lvgl/src/lv_misc/lv_printf.c ****                         idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void 
 827:lvgl/src/lv_misc/lv_printf.c ****                     }
 828:lvgl/src/lv_misc/lv_printf.c ****                     else {
 829:lvgl/src/lv_misc/lv_printf.c **** #endif
 830:lvgl/src/lv_misc/lv_printf.c ****                         idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_ar
 831:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 832:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 833:lvgl/src/lv_misc/lv_printf.c ****                     }
 834:lvgl/src/lv_misc/lv_printf.c **** #endif
 835:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 836:lvgl/src/lv_misc/lv_printf.c ****                     break;
 837:lvgl/src/lv_misc/lv_printf.c ****                 }
 838:lvgl/src/lv_misc/lv_printf.c **** 
 839:lvgl/src/lv_misc/lv_printf.c ****             case '%' :
 840:lvgl/src/lv_misc/lv_printf.c ****                 out('%', buffer, idx++, maxlen);
 933              		.loc 1 840 17 view .LVU240
 934 0014 0024     		movs	r4, #0
 935              	.LVL88:
 936              	.L146:
 559:lvgl/src/lv_misc/lv_printf.c ****         // format specifier?  %[flags][width][.precision][length]
 937              		.loc 1 559 11 view .LVU241
 938 0016 0D9B     		ldr	r3, [sp, #52]
 939 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 559:lvgl/src/lv_misc/lv_printf.c ****         // format specifier?  %[flags][width][.precision][length]
 940              		.loc 1 559 10 view .LVU242
 941 001a 0028     		cmp	r0, #0
 942 001c 00F0F382 		beq	.L166
 561:lvgl/src/lv_misc/lv_printf.c ****             // no
 943              		.loc 1 561 9 is_stmt 1 view .LVU243
 561:lvgl/src/lv_misc/lv_printf.c ****             // no
 944              		.loc 1 561 11 is_stmt 0 view .LVU244
 945 0020 2528     		cmp	r0, #37
 946 0022 09D0     		beq	.L75
 563:lvgl/src/lv_misc/lv_printf.c ****             format++;
 947              		.loc 1 563 13 is_stmt 1 view .LVU245
 948 0024 651C     		adds	r5, r4, #1
 949              	.LVL89:
 563:lvgl/src/lv_misc/lv_printf.c ****             format++;
 950              		.loc 1 563 13 is_stmt 0 view .LVU246
 951 0026 0A9B     		ldr	r3, [sp, #40]
 952 0028 2246     		mov	r2, r4
 953 002a 0B99     		ldr	r1, [sp, #44]
 954 002c B047     		blx	r6
 955              	.LVL90:
 564:lvgl/src/lv_misc/lv_printf.c ****             continue;
 956              		.loc 1 564 13 is_stmt 1 view .LVU247
 564:lvgl/src/lv_misc/lv_printf.c ****             continue;
 957              		.loc 1 564 19 is_stmt 0 view .LVU248
 958 002e 0D9B     		ldr	r3, [sp, #52]
 959 0030 0133     		adds	r3, r3, #1
ARM GAS  D:\Temp\ccNq2L4j.s 			page 34


 960 0032 0D93     		str	r3, [sp, #52]
 565:lvgl/src/lv_misc/lv_printf.c ****         }
 961              		.loc 1 565 13 is_stmt 1 view .LVU249
 563:lvgl/src/lv_misc/lv_printf.c ****             format++;
 962              		.loc 1 563 13 is_stmt 0 view .LVU250
 963 0034 2C46     		mov	r4, r5
 565:lvgl/src/lv_misc/lv_printf.c ****         }
 964              		.loc 1 565 13 view .LVU251
 965 0036 EEE7     		b	.L146
 966              	.LVL91:
 967              	.L75:
 569:lvgl/src/lv_misc/lv_printf.c ****         }
 968              		.loc 1 569 13 is_stmt 1 view .LVU252
 569:lvgl/src/lv_misc/lv_printf.c ****         }
 969              		.loc 1 569 19 is_stmt 0 view .LVU253
 970 0038 0133     		adds	r3, r3, #1
 971 003a 0D93     		str	r3, [sp, #52]
 573:lvgl/src/lv_misc/lv_printf.c ****         do {
 972              		.loc 1 573 9 is_stmt 1 view .LVU254
 973              	.LVL92:
 573:lvgl/src/lv_misc/lv_printf.c ****         do {
 974              		.loc 1 573 15 is_stmt 0 view .LVU255
 975 003c 4FF0000B 		mov	fp, #0
 976 0040 2DE0     		b	.L77
 977              	.LVL93:
 978              	.L78:
 608:lvgl/src/lv_misc/lv_printf.c ****         if(_is_digit(*format)) {
 979              		.loc 1 608 9 is_stmt 1 view .LVU256
 609:lvgl/src/lv_misc/lv_printf.c ****             width = _atoi(&format);
 980              		.loc 1 609 9 view .LVU257
 981              	.LBB29:
 982              	.LBI29:
 151:lvgl/src/lv_misc/lv_printf.c **** {
 983              		.loc 1 151 20 view .LVU258
 984              	.LBB30:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 985              		.loc 1 153 5 view .LVU259
 153:lvgl/src/lv_misc/lv_printf.c **** }
 986              		.loc 1 153 24 is_stmt 0 view .LVU260
 987 0042 A1F13003 		sub	r3, r1, #48
 988 0046 DBB2     		uxtb	r3, r3
 989              	.LVL94:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 990              		.loc 1 153 24 view .LVU261
 991              	.LBE30:
 992              	.LBE29:
 609:lvgl/src/lv_misc/lv_printf.c ****             width = _atoi(&format);
 993              		.loc 1 609 11 view .LVU262
 994 0048 092B     		cmp	r3, #9
 995 004a 67D9     		bls	.L167
 612:lvgl/src/lv_misc/lv_printf.c ****             const int w = va_arg(va, int);
 996              		.loc 1 612 14 is_stmt 1 view .LVU263
 612:lvgl/src/lv_misc/lv_printf.c ****             const int w = va_arg(va, int);
 997              		.loc 1 612 16 is_stmt 0 view .LVU264
 998 004c 2A29     		cmp	r1, #42
 999 004e 6AD0     		beq	.L168
 608:lvgl/src/lv_misc/lv_printf.c ****         if(_is_digit(*format)) {
ARM GAS  D:\Temp\ccNq2L4j.s 			page 35


 1000              		.loc 1 608 15 view .LVU265
 1001 0050 4FF00009 		mov	r9, #0
 1002              	.LVL95:
 1003              	.L88:
 625:lvgl/src/lv_misc/lv_printf.c ****         if(*format == '.') {
 1004              		.loc 1 625 9 is_stmt 1 view .LVU266
 626:lvgl/src/lv_misc/lv_printf.c ****             flags |= FLAGS_PRECISION;
 1005              		.loc 1 626 9 view .LVU267
 626:lvgl/src/lv_misc/lv_printf.c ****             flags |= FLAGS_PRECISION;
 1006              		.loc 1 626 12 is_stmt 0 view .LVU268
 1007 0054 0D9B     		ldr	r3, [sp, #52]
 1008 0056 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 626:lvgl/src/lv_misc/lv_printf.c ****             flags |= FLAGS_PRECISION;
 1009              		.loc 1 626 11 view .LVU269
 1010 0058 2E2A     		cmp	r2, #46
 1011 005a 74D0     		beq	.L169
 625:lvgl/src/lv_misc/lv_printf.c ****         if(*format == '.') {
 1012              		.loc 1 625 19 view .LVU270
 1013 005c 4FF00008 		mov	r8, #0
 1014              	.LVL96:
 1015              	.L91:
 640:lvgl/src/lv_misc/lv_printf.c ****             case 'l' :
 1016              		.loc 1 640 9 is_stmt 1 view .LVU271
 640:lvgl/src/lv_misc/lv_printf.c ****             case 'l' :
 1017              		.loc 1 640 16 is_stmt 0 view .LVU272
 1018 0060 0D9A     		ldr	r2, [sp, #52]
 1019 0062 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 640:lvgl/src/lv_misc/lv_printf.c ****             case 'l' :
 1020              		.loc 1 640 9 view .LVU273
 1021 0064 683B     		subs	r3, r3, #104
 1022 0066 122B     		cmp	r3, #18
 1023 0068 00F2AB80 		bhi	.L93
 1024 006c DFE813F0 		tbh	[pc, r3, lsl #1]
 1025              	.L95:
 1026 0070 9700     		.2byte	(.L99-.L95)/2
 1027 0072 A900     		.2byte	(.L93-.L95)/2
 1028 0074 0601     		.2byte	(.L98-.L95)/2
 1029 0076 A900     		.2byte	(.L93-.L95)/2
 1030 0078 8900     		.2byte	(.L97-.L95)/2
 1031 007a A900     		.2byte	(.L93-.L95)/2
 1032 007c A900     		.2byte	(.L93-.L95)/2
 1033 007e A900     		.2byte	(.L93-.L95)/2
 1034 0080 A900     		.2byte	(.L93-.L95)/2
 1035 0082 A900     		.2byte	(.L93-.L95)/2
 1036 0084 A900     		.2byte	(.L93-.L95)/2
 1037 0086 A900     		.2byte	(.L93-.L95)/2
 1038 0088 A500     		.2byte	(.L96-.L95)/2
 1039 008a A900     		.2byte	(.L93-.L95)/2
 1040 008c A900     		.2byte	(.L93-.L95)/2
 1041 008e A900     		.2byte	(.L93-.L95)/2
 1042 0090 A900     		.2byte	(.L93-.L95)/2
 1043 0092 A900     		.2byte	(.L93-.L95)/2
 1044 0094 0B01     		.2byte	(.L94-.L95)/2
 1045              	.LVL97:
 1046              		.p2align 1
 1047              	.L79:
 577:lvgl/src/lv_misc/lv_printf.c ****                     format++;
ARM GAS  D:\Temp\ccNq2L4j.s 			page 36


 1048              		.loc 1 577 21 is_stmt 1 view .LVU274
 577:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1049              		.loc 1 577 27 is_stmt 0 view .LVU275
 1050 0096 4BF0010B 		orr	fp, fp, #1
 1051              	.LVL98:
 578:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1052              		.loc 1 578 21 is_stmt 1 view .LVU276
 578:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1053              		.loc 1 578 27 is_stmt 0 view .LVU277
 1054 009a 0133     		adds	r3, r3, #1
 1055 009c 0D93     		str	r3, [sp, #52]
 579:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1056              		.loc 1 579 21 is_stmt 1 view .LVU278
 1057              	.LVL99:
 580:lvgl/src/lv_misc/lv_printf.c ****                 case '-':
 1058              		.loc 1 580 21 view .LVU279
 1059              	.L77:
 574:lvgl/src/lv_misc/lv_printf.c ****             switch(*format) {
 1060              		.loc 1 574 9 view .LVU280
 575:lvgl/src/lv_misc/lv_printf.c ****                 case '0':
 1061              		.loc 1 575 13 view .LVU281
 575:lvgl/src/lv_misc/lv_printf.c ****                 case '0':
 1062              		.loc 1 575 20 is_stmt 0 view .LVU282
 1063 009e 0D9B     		ldr	r3, [sp, #52]
 1064 00a0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 575:lvgl/src/lv_misc/lv_printf.c ****                 case '0':
 1065              		.loc 1 575 13 view .LVU283
 1066 00a2 A1F12002 		sub	r2, r1, #32
 1067 00a6 102A     		cmp	r2, #16
 1068 00a8 CBD8     		bhi	.L78
 1069 00aa 01A0     		adr	r0, .L80
 1070 00ac 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 1071              		.p2align 2
 1072              	.L80:
 1073 00b0 09010000 		.word	.L84+1
 1074 00b4 43000000 		.word	.L78+1
 1075 00b8 43000000 		.word	.L78+1
 1076 00bc 13010000 		.word	.L83+1
 1077 00c0 43000000 		.word	.L78+1
 1078 00c4 43000000 		.word	.L78+1
 1079 00c8 43000000 		.word	.L78+1
 1080 00cc 43000000 		.word	.L78+1
 1081 00d0 43000000 		.word	.L78+1
 1082 00d4 43000000 		.word	.L78+1
 1083 00d8 43000000 		.word	.L78+1
 1084 00dc FF000000 		.word	.L82+1
 1085 00e0 43000000 		.word	.L78+1
 1086 00e4 F5000000 		.word	.L81+1
 1087 00e8 43000000 		.word	.L78+1
 1088 00ec 43000000 		.word	.L78+1
 1089 00f0 97000000 		.word	.L79+1
 1090              		.p2align 1
 1091              	.L81:
 582:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1092              		.loc 1 582 21 is_stmt 1 view .LVU284
 582:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1093              		.loc 1 582 27 is_stmt 0 view .LVU285
ARM GAS  D:\Temp\ccNq2L4j.s 			page 37


 1094 00f4 4BF0020B 		orr	fp, fp, #2
 1095              	.LVL100:
 583:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1096              		.loc 1 583 21 is_stmt 1 view .LVU286
 583:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1097              		.loc 1 583 27 is_stmt 0 view .LVU287
 1098 00f8 0133     		adds	r3, r3, #1
 1099 00fa 0D93     		str	r3, [sp, #52]
 584:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1100              		.loc 1 584 21 is_stmt 1 view .LVU288
 1101              	.LVL101:
 585:lvgl/src/lv_misc/lv_printf.c ****                 case '+':
 1102              		.loc 1 585 21 view .LVU289
 585:lvgl/src/lv_misc/lv_printf.c ****                 case '+':
 1103              		.loc 1 585 21 is_stmt 0 view .LVU290
 1104 00fc CFE7     		b	.L77
 1105              	.LVL102:
 1106              	.L82:
 587:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1107              		.loc 1 587 21 is_stmt 1 view .LVU291
 587:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1108              		.loc 1 587 27 is_stmt 0 view .LVU292
 1109 00fe 4BF0040B 		orr	fp, fp, #4
 1110              	.LVL103:
 588:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1111              		.loc 1 588 21 is_stmt 1 view .LVU293
 588:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1112              		.loc 1 588 27 is_stmt 0 view .LVU294
 1113 0102 0133     		adds	r3, r3, #1
 1114 0104 0D93     		str	r3, [sp, #52]
 589:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1115              		.loc 1 589 21 is_stmt 1 view .LVU295
 1116              	.LVL104:
 590:lvgl/src/lv_misc/lv_printf.c ****                 case ' ':
 1117              		.loc 1 590 21 view .LVU296
 590:lvgl/src/lv_misc/lv_printf.c ****                 case ' ':
 1118              		.loc 1 590 21 is_stmt 0 view .LVU297
 1119 0106 CAE7     		b	.L77
 1120              	.LVL105:
 1121              	.L84:
 592:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1122              		.loc 1 592 21 is_stmt 1 view .LVU298
 592:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1123              		.loc 1 592 27 is_stmt 0 view .LVU299
 1124 0108 4BF0080B 		orr	fp, fp, #8
 1125              	.LVL106:
 593:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1126              		.loc 1 593 21 is_stmt 1 view .LVU300
 593:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1127              		.loc 1 593 27 is_stmt 0 view .LVU301
 1128 010c 0133     		adds	r3, r3, #1
 1129 010e 0D93     		str	r3, [sp, #52]
 594:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1130              		.loc 1 594 21 is_stmt 1 view .LVU302
 1131              	.LVL107:
 595:lvgl/src/lv_misc/lv_printf.c ****                 case '#':
 1132              		.loc 1 595 21 view .LVU303
ARM GAS  D:\Temp\ccNq2L4j.s 			page 38


 595:lvgl/src/lv_misc/lv_printf.c ****                 case '#':
 1133              		.loc 1 595 21 is_stmt 0 view .LVU304
 1134 0110 C5E7     		b	.L77
 1135              	.LVL108:
 1136              	.L83:
 597:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1137              		.loc 1 597 21 is_stmt 1 view .LVU305
 597:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1138              		.loc 1 597 27 is_stmt 0 view .LVU306
 1139 0112 4BF0100B 		orr	fp, fp, #16
 1140              	.LVL109:
 598:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1141              		.loc 1 598 21 is_stmt 1 view .LVU307
 598:lvgl/src/lv_misc/lv_printf.c ****                     n = 1U;
 1142              		.loc 1 598 27 is_stmt 0 view .LVU308
 1143 0116 0133     		adds	r3, r3, #1
 1144 0118 0D93     		str	r3, [sp, #52]
 599:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1145              		.loc 1 599 21 is_stmt 1 view .LVU309
 1146              	.LVL110:
 600:lvgl/src/lv_misc/lv_printf.c ****                 default :
 1147              		.loc 1 600 21 view .LVU310
 600:lvgl/src/lv_misc/lv_printf.c ****                 default :
 1148              		.loc 1 600 21 is_stmt 0 view .LVU311
 1149 011a C0E7     		b	.L77
 1150              	.LVL111:
 1151              	.L167:
 610:lvgl/src/lv_misc/lv_printf.c ****         }
 1152              		.loc 1 610 13 is_stmt 1 view .LVU312
 610:lvgl/src/lv_misc/lv_printf.c ****         }
 1153              		.loc 1 610 21 is_stmt 0 view .LVU313
 1154 011c 0DA8     		add	r0, sp, #52
 1155 011e FFF7FEFF 		bl	_atoi
 1156              	.LVL112:
 1157 0122 8146     		mov	r9, r0
 1158              	.LVL113:
 610:lvgl/src/lv_misc/lv_printf.c ****         }
 1159              		.loc 1 610 21 view .LVU314
 1160 0124 96E7     		b	.L88
 1161              	.LVL114:
 1162              	.L168:
 1163              	.LBB31:
 613:lvgl/src/lv_misc/lv_printf.c ****             if(w < 0) {
 1164              		.loc 1 613 13 is_stmt 1 view .LVU315
 613:lvgl/src/lv_misc/lv_printf.c ****             if(w < 0) {
 1165              		.loc 1 613 23 is_stmt 0 view .LVU316
 1166 0126 189B     		ldr	r3, [sp, #96]
 1167 0128 1A1D     		adds	r2, r3, #4
 1168 012a 1892     		str	r2, [sp, #96]
 1169 012c 1B68     		ldr	r3, [r3]
 614:lvgl/src/lv_misc/lv_printf.c ****                 flags |= FLAGS_LEFT;    // reverse padding
 1170              		.loc 1 614 13 is_stmt 1 view .LVU317
 614:lvgl/src/lv_misc/lv_printf.c ****                 flags |= FLAGS_LEFT;    // reverse padding
 1171              		.loc 1 614 15 is_stmt 0 view .LVU318
 1172 012e 002B     		cmp	r3, #0
 1173 0130 04DB     		blt	.L170
 619:lvgl/src/lv_misc/lv_printf.c ****             }
ARM GAS  D:\Temp\ccNq2L4j.s 			page 39


 1174              		.loc 1 619 17 is_stmt 1 view .LVU319
 619:lvgl/src/lv_misc/lv_printf.c ****             }
 1175              		.loc 1 619 23 is_stmt 0 view .LVU320
 1176 0132 9946     		mov	r9, r3
 1177              	.LVL115:
 1178              	.L90:
 621:lvgl/src/lv_misc/lv_printf.c ****         }
 1179              		.loc 1 621 13 is_stmt 1 view .LVU321
 621:lvgl/src/lv_misc/lv_printf.c ****         }
 1180              		.loc 1 621 19 is_stmt 0 view .LVU322
 1181 0134 0D9B     		ldr	r3, [sp, #52]
 1182 0136 0133     		adds	r3, r3, #1
 1183 0138 0D93     		str	r3, [sp, #52]
 1184 013a 8BE7     		b	.L88
 1185              	.LVL116:
 1186              	.L170:
 615:lvgl/src/lv_misc/lv_printf.c ****                 width = (unsigned int) - w;
 1187              		.loc 1 615 17 is_stmt 1 view .LVU323
 615:lvgl/src/lv_misc/lv_printf.c ****                 width = (unsigned int) - w;
 1188              		.loc 1 615 23 is_stmt 0 view .LVU324
 1189 013c 4BF0020B 		orr	fp, fp, #2
 1190              	.LVL117:
 616:lvgl/src/lv_misc/lv_printf.c ****             }
 1191              		.loc 1 616 17 is_stmt 1 view .LVU325
 616:lvgl/src/lv_misc/lv_printf.c ****             }
 1192              		.loc 1 616 40 is_stmt 0 view .LVU326
 1193 0140 C3F10009 		rsb	r9, r3, #0
 1194              	.LVL118:
 616:lvgl/src/lv_misc/lv_printf.c ****             }
 1195              		.loc 1 616 40 view .LVU327
 1196 0144 F6E7     		b	.L90
 1197              	.LVL119:
 1198              	.L169:
 616:lvgl/src/lv_misc/lv_printf.c ****             }
 1199              		.loc 1 616 40 view .LVU328
 1200              	.LBE31:
 627:lvgl/src/lv_misc/lv_printf.c ****             format++;
 1201              		.loc 1 627 13 is_stmt 1 view .LVU329
 627:lvgl/src/lv_misc/lv_printf.c ****             format++;
 1202              		.loc 1 627 19 is_stmt 0 view .LVU330
 1203 0146 4BF4806B 		orr	fp, fp, #1024
 1204              	.LVL120:
 628:lvgl/src/lv_misc/lv_printf.c ****             if(_is_digit(*format)) {
 1205              		.loc 1 628 13 is_stmt 1 view .LVU331
 628:lvgl/src/lv_misc/lv_printf.c ****             if(_is_digit(*format)) {
 1206              		.loc 1 628 19 is_stmt 0 view .LVU332
 1207 014a 5A1C     		adds	r2, r3, #1
 1208 014c 0D92     		str	r2, [sp, #52]
 629:lvgl/src/lv_misc/lv_printf.c ****                 precision = _atoi(&format);
 1209              		.loc 1 629 13 is_stmt 1 view .LVU333
 629:lvgl/src/lv_misc/lv_printf.c ****                 precision = _atoi(&format);
 1210              		.loc 1 629 16 is_stmt 0 view .LVU334
 1211 014e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1212              	.LVL121:
 1213              	.LBB32:
 1214              	.LBI32:
 151:lvgl/src/lv_misc/lv_printf.c **** {
ARM GAS  D:\Temp\ccNq2L4j.s 			page 40


 1215              		.loc 1 151 20 is_stmt 1 view .LVU335
 1216              	.LBB33:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 1217              		.loc 1 153 5 view .LVU336
 153:lvgl/src/lv_misc/lv_printf.c **** }
 1218              		.loc 1 153 24 is_stmt 0 view .LVU337
 1219 0150 A2F13003 		sub	r3, r2, #48
 1220 0154 DBB2     		uxtb	r3, r3
 1221              	.LVL122:
 153:lvgl/src/lv_misc/lv_printf.c **** }
 1222              		.loc 1 153 24 view .LVU338
 1223              	.LBE33:
 1224              	.LBE32:
 629:lvgl/src/lv_misc/lv_printf.c ****                 precision = _atoi(&format);
 1225              		.loc 1 629 15 view .LVU339
 1226 0156 092B     		cmp	r3, #9
 1227 0158 04D9     		bls	.L171
 632:lvgl/src/lv_misc/lv_printf.c ****                 const int prec = (int)va_arg(va, int);
 1228              		.loc 1 632 18 is_stmt 1 view .LVU340
 632:lvgl/src/lv_misc/lv_printf.c ****                 const int prec = (int)va_arg(va, int);
 1229              		.loc 1 632 20 is_stmt 0 view .LVU341
 1230 015a 2A2A     		cmp	r2, #42
 1231 015c 07D0     		beq	.L172
 625:lvgl/src/lv_misc/lv_printf.c ****         if(*format == '.') {
 1232              		.loc 1 625 19 view .LVU342
 1233 015e 4FF00008 		mov	r8, #0
 1234 0162 7DE7     		b	.L91
 1235              	.L171:
 630:lvgl/src/lv_misc/lv_printf.c ****             }
 1236              		.loc 1 630 17 is_stmt 1 view .LVU343
 630:lvgl/src/lv_misc/lv_printf.c ****             }
 1237              		.loc 1 630 29 is_stmt 0 view .LVU344
 1238 0164 0DA8     		add	r0, sp, #52
 1239 0166 FFF7FEFF 		bl	_atoi
 1240              	.LVL123:
 1241 016a 8046     		mov	r8, r0
 1242              	.LVL124:
 630:lvgl/src/lv_misc/lv_printf.c ****             }
 1243              		.loc 1 630 29 view .LVU345
 1244 016c 78E7     		b	.L91
 1245              	.LVL125:
 1246              	.L172:
 1247              	.LBB34:
 633:lvgl/src/lv_misc/lv_printf.c ****                 precision = prec > 0 ? (unsigned int)prec : 0U;
 1248              		.loc 1 633 17 is_stmt 1 view .LVU346
 633:lvgl/src/lv_misc/lv_printf.c ****                 precision = prec > 0 ? (unsigned int)prec : 0U;
 1249              		.loc 1 633 27 is_stmt 0 view .LVU347
 1250 016e 189B     		ldr	r3, [sp, #96]
 1251 0170 1A1D     		adds	r2, r3, #4
 1252 0172 1892     		str	r2, [sp, #96]
 1253 0174 1B68     		ldr	r3, [r3]
 634:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1254              		.loc 1 634 17 is_stmt 1 view .LVU348
 634:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1255              		.loc 1 634 59 is_stmt 0 view .LVU349
 1256 0176 23EAE378 		bic	r8, r3, r3, asr #31
 1257              	.LVL126:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 41


 635:lvgl/src/lv_misc/lv_printf.c ****             }
 1258              		.loc 1 635 17 is_stmt 1 view .LVU350
 635:lvgl/src/lv_misc/lv_printf.c ****             }
 1259              		.loc 1 635 23 is_stmt 0 view .LVU351
 1260 017a 0D9B     		ldr	r3, [sp, #52]
 1261 017c 0133     		adds	r3, r3, #1
 1262 017e 0D93     		str	r3, [sp, #52]
 1263 0180 6EE7     		b	.L91
 1264              	.L97:
 635:lvgl/src/lv_misc/lv_printf.c ****             }
 1265              		.loc 1 635 23 view .LVU352
 1266              	.LBE34:
 642:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1267              		.loc 1 642 17 is_stmt 1 view .LVU353
 642:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1268              		.loc 1 642 23 is_stmt 0 view .LVU354
 1269 0182 4BF48071 		orr	r1, fp, #256
 1270              	.LVL127:
 643:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'l') {
 1271              		.loc 1 643 17 is_stmt 1 view .LVU355
 643:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'l') {
 1272              		.loc 1 643 23 is_stmt 0 view .LVU356
 1273 0186 531C     		adds	r3, r2, #1
 1274 0188 0D93     		str	r3, [sp, #52]
 644:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_LONG_LONG;
 1275              		.loc 1 644 17 is_stmt 1 view .LVU357
 644:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_LONG_LONG;
 1276              		.loc 1 644 20 is_stmt 0 view .LVU358
 1277 018a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 644:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_LONG_LONG;
 1278              		.loc 1 644 19 view .LVU359
 1279 018c 6C2A     		cmp	r2, #108
 1280 018e 01D0     		beq	.L173
 642:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1281              		.loc 1 642 23 view .LVU360
 1282 0190 8B46     		mov	fp, r1
 1283 0192 16E0     		b	.L93
 1284              	.L173:
 645:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1285              		.loc 1 645 21 is_stmt 1 view .LVU361
 645:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1286              		.loc 1 645 27 is_stmt 0 view .LVU362
 1287 0194 4BF4407B 		orr	fp, fp, #768
 1288              	.LVL128:
 646:lvgl/src/lv_misc/lv_printf.c ****                 }
 1289              		.loc 1 646 21 is_stmt 1 view .LVU363
 646:lvgl/src/lv_misc/lv_printf.c ****                 }
 1290              		.loc 1 646 27 is_stmt 0 view .LVU364
 1291 0198 0133     		adds	r3, r3, #1
 1292 019a 0D93     		str	r3, [sp, #52]
 1293 019c 11E0     		b	.L93
 1294              	.L99:
 650:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1295              		.loc 1 650 17 is_stmt 1 view .LVU365
 650:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1296              		.loc 1 650 23 is_stmt 0 view .LVU366
 1297 019e 4BF08001 		orr	r1, fp, #128
ARM GAS  D:\Temp\ccNq2L4j.s 			page 42


 1298              	.LVL129:
 651:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'h') {
 1299              		.loc 1 651 17 is_stmt 1 view .LVU367
 651:lvgl/src/lv_misc/lv_printf.c ****                 if(*format == 'h') {
 1300              		.loc 1 651 23 is_stmt 0 view .LVU368
 1301 01a2 531C     		adds	r3, r2, #1
 1302 01a4 0D93     		str	r3, [sp, #52]
 652:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_CHAR;
 1303              		.loc 1 652 17 is_stmt 1 view .LVU369
 652:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_CHAR;
 1304              		.loc 1 652 20 is_stmt 0 view .LVU370
 1305 01a6 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 652:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_CHAR;
 1306              		.loc 1 652 19 view .LVU371
 1307 01a8 682A     		cmp	r2, #104
 1308 01aa 01D0     		beq	.L174
 650:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1309              		.loc 1 650 23 view .LVU372
 1310 01ac 8B46     		mov	fp, r1
 1311 01ae 08E0     		b	.L93
 1312              	.L174:
 653:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1313              		.loc 1 653 21 is_stmt 1 view .LVU373
 653:lvgl/src/lv_misc/lv_printf.c ****                     format++;
 1314              		.loc 1 653 27 is_stmt 0 view .LVU374
 1315 01b0 4BF0C00B 		orr	fp, fp, #192
 1316              	.LVL130:
 654:lvgl/src/lv_misc/lv_printf.c ****                 }
 1317              		.loc 1 654 21 is_stmt 1 view .LVU375
 654:lvgl/src/lv_misc/lv_printf.c ****                 }
 1318              		.loc 1 654 27 is_stmt 0 view .LVU376
 1319 01b4 0133     		adds	r3, r3, #1
 1320 01b6 0D93     		str	r3, [sp, #52]
 1321 01b8 03E0     		b	.L93
 1322              	.L96:
 659:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1323              		.loc 1 659 17 is_stmt 1 view .LVU377
 659:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1324              		.loc 1 659 23 is_stmt 0 view .LVU378
 1325 01ba 4BF4807B 		orr	fp, fp, #256
 1326              	.LVL131:
 660:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1327              		.loc 1 660 17 is_stmt 1 view .LVU379
 660:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1328              		.loc 1 660 23 is_stmt 0 view .LVU380
 1329 01be 0132     		adds	r2, r2, #1
 1330 01c0 0D92     		str	r2, [sp, #52]
 661:lvgl/src/lv_misc/lv_printf.c **** #endif
 1331              		.loc 1 661 17 is_stmt 1 view .LVU381
 1332              	.L93:
 676:lvgl/src/lv_misc/lv_printf.c ****             case 'd' :
 1333              		.loc 1 676 9 view .LVU382
 676:lvgl/src/lv_misc/lv_printf.c ****             case 'd' :
 1334              		.loc 1 676 16 is_stmt 0 view .LVU383
 1335 01c2 0D9B     		ldr	r3, [sp, #52]
 1336 01c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 676:lvgl/src/lv_misc/lv_printf.c ****             case 'd' :
ARM GAS  D:\Temp\ccNq2L4j.s 			page 43


 1337              		.loc 1 676 9 view .LVU384
 1338 01c6 A0F12503 		sub	r3, r0, #37
 1339 01ca 532B     		cmp	r3, #83
 1340 01cc 00F20F82 		bhi	.L100
 1341 01d0 DFE813F0 		tbh	[pc, r3, lsl #1]
 1342              	.L102:
 1343 01d4 0202     		.2byte	(.L106-.L102)/2
 1344 01d6 0D02     		.2byte	(.L100-.L102)/2
 1345 01d8 0D02     		.2byte	(.L100-.L102)/2
 1346 01da 0D02     		.2byte	(.L100-.L102)/2
 1347 01dc 0D02     		.2byte	(.L100-.L102)/2
 1348 01de 0D02     		.2byte	(.L100-.L102)/2
 1349 01e0 0D02     		.2byte	(.L100-.L102)/2
 1350 01e2 0D02     		.2byte	(.L100-.L102)/2
 1351 01e4 0D02     		.2byte	(.L100-.L102)/2
 1352 01e6 0D02     		.2byte	(.L100-.L102)/2
 1353 01e8 0D02     		.2byte	(.L100-.L102)/2
 1354 01ea 0D02     		.2byte	(.L100-.L102)/2
 1355 01ec 0D02     		.2byte	(.L100-.L102)/2
 1356 01ee 0D02     		.2byte	(.L100-.L102)/2
 1357 01f0 0D02     		.2byte	(.L100-.L102)/2
 1358 01f2 0D02     		.2byte	(.L100-.L102)/2
 1359 01f4 0D02     		.2byte	(.L100-.L102)/2
 1360 01f6 0D02     		.2byte	(.L100-.L102)/2
 1361 01f8 0D02     		.2byte	(.L100-.L102)/2
 1362 01fa 0D02     		.2byte	(.L100-.L102)/2
 1363 01fc 0D02     		.2byte	(.L100-.L102)/2
 1364 01fe 0D02     		.2byte	(.L100-.L102)/2
 1365 0200 0D02     		.2byte	(.L100-.L102)/2
 1366 0202 0D02     		.2byte	(.L100-.L102)/2
 1367 0204 0D02     		.2byte	(.L100-.L102)/2
 1368 0206 0D02     		.2byte	(.L100-.L102)/2
 1369 0208 0D02     		.2byte	(.L100-.L102)/2
 1370 020a 0D02     		.2byte	(.L100-.L102)/2
 1371 020c 0D02     		.2byte	(.L100-.L102)/2
 1372 020e 0D02     		.2byte	(.L100-.L102)/2
 1373 0210 0D02     		.2byte	(.L100-.L102)/2
 1374 0212 0D02     		.2byte	(.L100-.L102)/2
 1375 0214 0D02     		.2byte	(.L100-.L102)/2
 1376 0216 0D02     		.2byte	(.L100-.L102)/2
 1377 0218 0D02     		.2byte	(.L100-.L102)/2
 1378 021a 0D02     		.2byte	(.L100-.L102)/2
 1379 021c 0D02     		.2byte	(.L100-.L102)/2
 1380 021e 0D02     		.2byte	(.L100-.L102)/2
 1381 0220 0D02     		.2byte	(.L100-.L102)/2
 1382 0222 0D02     		.2byte	(.L100-.L102)/2
 1383 0224 0D02     		.2byte	(.L100-.L102)/2
 1384 0226 0D02     		.2byte	(.L100-.L102)/2
 1385 0228 0D02     		.2byte	(.L100-.L102)/2
 1386 022a 0D02     		.2byte	(.L100-.L102)/2
 1387 022c 0D02     		.2byte	(.L100-.L102)/2
 1388 022e 0D02     		.2byte	(.L100-.L102)/2
 1389 0230 0D02     		.2byte	(.L100-.L102)/2
 1390 0232 0D02     		.2byte	(.L100-.L102)/2
 1391 0234 0D02     		.2byte	(.L100-.L102)/2
 1392 0236 0D02     		.2byte	(.L100-.L102)/2
 1393 0238 0D02     		.2byte	(.L100-.L102)/2
ARM GAS  D:\Temp\ccNq2L4j.s 			page 44


 1394 023a 5E00     		.2byte	(.L101-.L102)/2
 1395 023c 0D02     		.2byte	(.L100-.L102)/2
 1396 023e 0D02     		.2byte	(.L100-.L102)/2
 1397 0240 0D02     		.2byte	(.L100-.L102)/2
 1398 0242 0D02     		.2byte	(.L100-.L102)/2
 1399 0244 0D02     		.2byte	(.L100-.L102)/2
 1400 0246 0D02     		.2byte	(.L100-.L102)/2
 1401 0248 0D02     		.2byte	(.L100-.L102)/2
 1402 024a 0D02     		.2byte	(.L100-.L102)/2
 1403 024c 0D02     		.2byte	(.L100-.L102)/2
 1404 024e 5E00     		.2byte	(.L101-.L102)/2
 1405 0250 5C01     		.2byte	(.L105-.L102)/2
 1406 0252 5E00     		.2byte	(.L101-.L102)/2
 1407 0254 0D02     		.2byte	(.L100-.L102)/2
 1408 0256 0D02     		.2byte	(.L100-.L102)/2
 1409 0258 0D02     		.2byte	(.L100-.L102)/2
 1410 025a 0D02     		.2byte	(.L100-.L102)/2
 1411 025c 5E00     		.2byte	(.L101-.L102)/2
 1412 025e 0D02     		.2byte	(.L100-.L102)/2
 1413 0260 0D02     		.2byte	(.L100-.L102)/2
 1414 0262 0D02     		.2byte	(.L100-.L102)/2
 1415 0264 0D02     		.2byte	(.L100-.L102)/2
 1416 0266 0D02     		.2byte	(.L100-.L102)/2
 1417 0268 5E00     		.2byte	(.L101-.L102)/2
 1418 026a E701     		.2byte	(.L104-.L102)/2
 1419 026c 0D02     		.2byte	(.L100-.L102)/2
 1420 026e 0D02     		.2byte	(.L100-.L102)/2
 1421 0270 8E01     		.2byte	(.L103-.L102)/2
 1422 0272 0D02     		.2byte	(.L100-.L102)/2
 1423 0274 5E00     		.2byte	(.L101-.L102)/2
 1424 0276 0D02     		.2byte	(.L100-.L102)/2
 1425 0278 0D02     		.2byte	(.L100-.L102)/2
 1426 027a 5E00     		.2byte	(.L101-.L102)/2
 1427              		.p2align 1
 1428              	.L98:
 664:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1429              		.loc 1 664 17 is_stmt 1 view .LVU385
 664:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1430              		.loc 1 664 23 is_stmt 0 view .LVU386
 1431 027c 4BF4007B 		orr	fp, fp, #512
 1432              	.LVL132:
 665:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1433              		.loc 1 665 17 is_stmt 1 view .LVU387
 665:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1434              		.loc 1 665 23 is_stmt 0 view .LVU388
 1435 0280 0132     		adds	r2, r2, #1
 1436 0282 0D92     		str	r2, [sp, #52]
 666:lvgl/src/lv_misc/lv_printf.c ****             case 'z' :
 1437              		.loc 1 666 17 is_stmt 1 view .LVU389
 1438 0284 9DE7     		b	.L93
 1439              	.L94:
 668:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1440              		.loc 1 668 17 view .LVU390
 668:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 1441              		.loc 1 668 23 is_stmt 0 view .LVU391
 1442 0286 4BF4807B 		orr	fp, fp, #256
 1443              	.LVL133:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 45


 669:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1444              		.loc 1 669 17 is_stmt 1 view .LVU392
 669:lvgl/src/lv_misc/lv_printf.c ****                 break;
 1445              		.loc 1 669 23 is_stmt 0 view .LVU393
 1446 028a 0132     		adds	r2, r2, #1
 1447 028c 0D92     		str	r2, [sp, #52]
 670:lvgl/src/lv_misc/lv_printf.c ****             default :
 1448              		.loc 1 670 17 is_stmt 1 view .LVU394
 1449 028e 98E7     		b	.L93
 1450              	.L101:
 1451              	.LBB35:
 685:lvgl/src/lv_misc/lv_printf.c ****                     if(*format == 'x' || *format == 'X') {
 1452              		.loc 1 685 21 view .LVU395
 686:lvgl/src/lv_misc/lv_printf.c ****                         base = 16U;
 1453              		.loc 1 686 21 view .LVU396
 686:lvgl/src/lv_misc/lv_printf.c ****                         base = 16U;
 1454              		.loc 1 686 23 is_stmt 0 view .LVU397
 1455 0290 7828     		cmp	r0, #120
 1456 0292 09D0     		beq	.L155
 686:lvgl/src/lv_misc/lv_printf.c ****                         base = 16U;
 1457              		.loc 1 686 39 discriminator 1 view .LVU398
 1458 0294 5828     		cmp	r0, #88
 1459 0296 3BD0     		beq	.L156
 689:lvgl/src/lv_misc/lv_printf.c ****                         base =  8U;
 1460              		.loc 1 689 26 is_stmt 1 view .LVU399
 689:lvgl/src/lv_misc/lv_printf.c ****                         base =  8U;
 1461              		.loc 1 689 28 is_stmt 0 view .LVU400
 1462 0298 6F28     		cmp	r0, #111
 1463 029a 3BD0     		beq	.L157
 692:lvgl/src/lv_misc/lv_printf.c ****                         base =  2U;
 1464              		.loc 1 692 26 is_stmt 1 view .LVU401
 692:lvgl/src/lv_misc/lv_printf.c ****                         base =  2U;
 1465              		.loc 1 692 28 is_stmt 0 view .LVU402
 1466 029c 6228     		cmp	r0, #98
 1467 029e 3BD0     		beq	.L158
 696:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_HASH;   // no hash for dec format
 1468              		.loc 1 696 25 is_stmt 1 view .LVU403
 1469              	.LVL134:
 697:lvgl/src/lv_misc/lv_printf.c ****                     }
 1470              		.loc 1 697 25 view .LVU404
 697:lvgl/src/lv_misc/lv_printf.c ****                     }
 1471              		.loc 1 697 31 is_stmt 0 view .LVU405
 1472 02a0 2BF0100B 		bic	fp, fp, #16
 1473              	.LVL135:
 696:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_HASH;   // no hash for dec format
 1474              		.loc 1 696 30 view .LVU406
 1475 02a4 0A23     		movs	r3, #10
 1476 02a6 00E0     		b	.L107
 1477              	.LVL136:
 1478              	.L155:
 687:lvgl/src/lv_misc/lv_printf.c ****                     }
 1479              		.loc 1 687 30 view .LVU407
 1480 02a8 1023     		movs	r3, #16
 1481              	.L107:
 1482              	.LVL137:
 700:lvgl/src/lv_misc/lv_printf.c ****                         flags |= FLAGS_UPPERCASE;
 1483              		.loc 1 700 21 is_stmt 1 view .LVU408
ARM GAS  D:\Temp\ccNq2L4j.s 			page 46


 700:lvgl/src/lv_misc/lv_printf.c ****                         flags |= FLAGS_UPPERCASE;
 1484              		.loc 1 700 23 is_stmt 0 view .LVU409
 1485 02aa 5828     		cmp	r0, #88
 1486 02ac 36D0     		beq	.L175
 1487              	.L108:
 705:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 1488              		.loc 1 705 21 is_stmt 1 view .LVU410
 705:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 1489              		.loc 1 705 23 is_stmt 0 view .LVU411
 1490 02ae 6928     		cmp	r0, #105
 1491 02b0 03D0     		beq	.L109
 705:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 1492              		.loc 1 705 41 discriminator 1 view .LVU412
 1493 02b2 6428     		cmp	r0, #100
 1494 02b4 01D0     		beq	.L109
 706:lvgl/src/lv_misc/lv_printf.c ****                     }
 1495              		.loc 1 706 25 is_stmt 1 view .LVU413
 706:lvgl/src/lv_misc/lv_printf.c ****                     }
 1496              		.loc 1 706 31 is_stmt 0 view .LVU414
 1497 02b6 2BF00C0B 		bic	fp, fp, #12
 1498              	.LVL138:
 1499              	.L109:
 710:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_ZEROPAD;
 1500              		.loc 1 710 21 is_stmt 1 view .LVU415
 710:lvgl/src/lv_misc/lv_printf.c ****                         flags &= ~FLAGS_ZEROPAD;
 1501              		.loc 1 710 23 is_stmt 0 view .LVU416
 1502 02ba 1BF4806F 		tst	fp, #1024
 1503 02be 01D0     		beq	.L110
 711:lvgl/src/lv_misc/lv_printf.c ****                     }
 1504              		.loc 1 711 25 is_stmt 1 view .LVU417
 711:lvgl/src/lv_misc/lv_printf.c ****                     }
 1505              		.loc 1 711 31 is_stmt 0 view .LVU418
 1506 02c0 2BF0010B 		bic	fp, fp, #1
 1507              	.LVL139:
 1508              	.L110:
 715:lvgl/src/lv_misc/lv_printf.c ****                         // signed
 1509              		.loc 1 715 21 is_stmt 1 view .LVU419
 715:lvgl/src/lv_misc/lv_printf.c ****                         // signed
 1510              		.loc 1 715 23 is_stmt 0 view .LVU420
 1511 02c4 6928     		cmp	r0, #105
 1512 02c6 2CD0     		beq	.L111
 715:lvgl/src/lv_misc/lv_printf.c ****                         // signed
 1513              		.loc 1 715 41 discriminator 1 view .LVU421
 1514 02c8 6428     		cmp	r0, #100
 1515 02ca 2AD0     		beq	.L111
 738:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1516              		.loc 1 738 25 is_stmt 1 view .LVU422
 738:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1517              		.loc 1 738 27 is_stmt 0 view .LVU423
 1518 02cc 1BF4007F 		tst	fp, #512
 1519 02d0 40F09C80 		bne	.L176
 743:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), f
 1520              		.loc 1 743 30 is_stmt 1 view .LVU424
 743:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), f
 1521              		.loc 1 743 32 is_stmt 0 view .LVU425
 1522 02d4 1BF4807F 		tst	fp, #256
 1523 02d8 40F0B580 		bne	.L177
ARM GAS  D:\Temp\ccNq2L4j.s 			page 47


 1524              	.LBB36:
 747:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1525              		.loc 1 747 29 is_stmt 1 view .LVU426
 748:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 1526              		.loc 1 748 115 is_stmt 0 view .LVU427
 1527 02dc 1BF0400F 		tst	fp, #64
 1528 02e0 00F0C780 		beq	.L122
 747:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1529              		.loc 1 747 94 view .LVU428
 1530 02e4 189A     		ldr	r2, [sp, #96]
 1531 02e6 111D     		adds	r1, r2, #4
 1532 02e8 1891     		str	r1, [sp, #96]
 1533 02ea 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1534              	.L123:
 1535              	.LVL140:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1536              		.loc 1 749 29 is_stmt 1 view .LVU429
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1537              		.loc 1 749 35 is_stmt 0 view .LVU430
 1538 02ec CDF814B0 		str	fp, [sp, #20]
 1539 02f0 CDF81090 		str	r9, [sp, #16]
 1540 02f4 CDF80C80 		str	r8, [sp, #12]
 1541 02f8 0293     		str	r3, [sp, #8]
 1542 02fa 0023     		movs	r3, #0
 1543              	.LVL141:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1544              		.loc 1 749 35 view .LVU431
 1545 02fc 0193     		str	r3, [sp, #4]
 1546 02fe 0092     		str	r2, [sp]
 1547 0300 0A9B     		ldr	r3, [sp, #40]
 1548 0302 2246     		mov	r2, r4
 1549              	.LVL142:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1550              		.loc 1 749 35 view .LVU432
 1551 0304 0B99     		ldr	r1, [sp, #44]
 1552 0306 3046     		mov	r0, r6
 1553 0308 FFF7FEFF 		bl	_ntoa_long
 1554              	.LVL143:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1555              		.loc 1 749 35 view .LVU433
 1556 030c 0446     		mov	r4, r0
 1557              	.LVL144:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1558              		.loc 1 749 35 view .LVU434
 1559 030e 2AE0     		b	.L115
 1560              	.LVL145:
 1561              	.L156:
 749:lvgl/src/lv_misc/lv_printf.c ****                         }
 1562              		.loc 1 749 35 view .LVU435
 1563              	.LBE36:
 687:lvgl/src/lv_misc/lv_printf.c ****                     }
 1564              		.loc 1 687 30 view .LVU436
 1565 0310 1023     		movs	r3, #16
 1566 0312 CAE7     		b	.L107
 1567              	.L157:
 690:lvgl/src/lv_misc/lv_printf.c ****                     }
 1568              		.loc 1 690 30 view .LVU437
ARM GAS  D:\Temp\ccNq2L4j.s 			page 48


 1569 0314 0823     		movs	r3, #8
 1570 0316 C8E7     		b	.L107
 1571              	.L158:
 693:lvgl/src/lv_misc/lv_printf.c ****                     }
 1572              		.loc 1 693 30 view .LVU438
 1573 0318 0223     		movs	r3, #2
 1574 031a C6E7     		b	.L107
 1575              	.LVL146:
 1576              	.L175:
 701:lvgl/src/lv_misc/lv_printf.c ****                     }
 1577              		.loc 1 701 25 is_stmt 1 view .LVU439
 701:lvgl/src/lv_misc/lv_printf.c ****                     }
 1578              		.loc 1 701 31 is_stmt 0 view .LVU440
 1579 031c 4BF0200B 		orr	fp, fp, #32
 1580              	.LVL147:
 701:lvgl/src/lv_misc/lv_printf.c ****                     }
 1581              		.loc 1 701 31 view .LVU441
 1582 0320 C5E7     		b	.L108
 1583              	.L111:
 717:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1584              		.loc 1 717 25 is_stmt 1 view .LVU442
 717:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 1585              		.loc 1 717 27 is_stmt 0 view .LVU443
 1586 0322 1BF4007F 		tst	fp, #512
 1587 0326 22D1     		bne	.L178
 724:lvgl/src/lv_misc/lv_printf.c ****                             const long value = va_arg(va, long);
 1588              		.loc 1 724 30 is_stmt 1 view .LVU444
 724:lvgl/src/lv_misc/lv_printf.c ****                             const long value = va_arg(va, long);
 1589              		.loc 1 724 32 is_stmt 0 view .LVU445
 1590 0328 1BF4807F 		tst	fp, #256
 1591 032c 46D1     		bne	.L179
 1592              	.LBB37:
 730:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1593              		.loc 1 730 29 is_stmt 1 view .LVU446
 730:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1594              		.loc 1 730 92 is_stmt 0 view .LVU447
 1595 032e 1BF0400F 		tst	fp, #64
 1596 0332 5DD0     		beq	.L117
 730:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1597              		.loc 1 730 76 view .LVU448
 1598 0334 189A     		ldr	r2, [sp, #96]
 1599 0336 111D     		adds	r1, r2, #4
 1600 0338 1891     		str	r1, [sp, #96]
 1601 033a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1602              	.L118:
 1603              	.LVL148:
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1604              		.loc 1 732 29 is_stmt 1 discriminator 3 view .LVU449
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1605              		.loc 1 732 72 is_stmt 0 discriminator 3 view .LVU450
 1606 033c 82EAE271 		eor	r1, r2, r2, asr #31
 1607 0340 A1EBE271 		sub	r1, r1, r2, asr #31
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1608              		.loc 1 732 35 discriminator 3 view .LVU451
 1609 0344 CDF814B0 		str	fp, [sp, #20]
 1610 0348 CDF81090 		str	r9, [sp, #16]
 1611 034c CDF80C80 		str	r8, [sp, #12]
ARM GAS  D:\Temp\ccNq2L4j.s 			page 49


 1612 0350 0293     		str	r3, [sp, #8]
 1613 0352 D20F     		lsrs	r2, r2, #31
 1614              	.LVL149:
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1615              		.loc 1 732 35 discriminator 3 view .LVU452
 1616 0354 0192     		str	r2, [sp, #4]
 1617 0356 0091     		str	r1, [sp]
 1618 0358 0A9B     		ldr	r3, [sp, #40]
 1619              	.LVL150:
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1620              		.loc 1 732 35 discriminator 3 view .LVU453
 1621 035a 2246     		mov	r2, r4
 1622 035c 0B99     		ldr	r1, [sp, #44]
 1623 035e 3046     		mov	r0, r6
 1624 0360 FFF7FEFF 		bl	_ntoa_long
 1625              	.LVL151:
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1626              		.loc 1 732 35 discriminator 3 view .LVU454
 1627 0364 0446     		mov	r4, r0
 1628              	.LVL152:
 1629              	.L115:
 732:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1630              		.loc 1 732 35 discriminator 3 view .LVU455
 1631              	.LBE37:
 752:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1632              		.loc 1 752 21 is_stmt 1 view .LVU456
 752:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1633              		.loc 1 752 27 is_stmt 0 view .LVU457
 1634 0366 0D9B     		ldr	r3, [sp, #52]
 1635 0368 0133     		adds	r3, r3, #1
 1636 036a 0D93     		str	r3, [sp, #52]
 753:lvgl/src/lv_misc/lv_printf.c ****                 }
 1637              		.loc 1 753 21 is_stmt 1 view .LVU458
 1638 036c 53E6     		b	.L146
 1639              	.LVL153:
 1640              	.L178:
 1641              	.LBB38:
 719:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(va
 1642              		.loc 1 719 29 view .LVU459
 719:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(va
 1643              		.loc 1 719 45 is_stmt 0 view .LVU460
 1644 036e 189A     		ldr	r2, [sp, #96]
 1645 0370 0732     		adds	r2, r2, #7
 1646 0372 22F00702 		bic	r2, r2, #7
 1647 0376 02F10801 		add	r1, r2, #8
 1648 037a 1891     		str	r1, [sp, #96]
 1649 037c 5568     		ldr	r5, [r2, #4]
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1650              		.loc 1 720 29 is_stmt 1 view .LVU461
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1651              		.loc 1 720 77 is_stmt 0 view .LVU462
 1652 037e 1068     		ldr	r0, [r2]
 1653 0380 2946     		mov	r1, r5
 1654 0382 0028     		cmp	r0, #0
 1655 0384 75F10002 		sbcs	r2, r5, #0
 1656 0388 14DB     		blt	.L180
 1657              	.L114:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 50


 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1658              		.loc 1 720 35 view .LVU463
 1659 038a CDF820B0 		str	fp, [sp, #32]
 1660 038e CDF81C90 		str	r9, [sp, #28]
 1661 0392 CDF81880 		str	r8, [sp, #24]
 1662 0396 0493     		str	r3, [sp, #16]
 1663 0398 0023     		movs	r3, #0
 1664              	.LVL154:
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1665              		.loc 1 720 35 view .LVU464
 1666 039a 0593     		str	r3, [sp, #20]
 1667 039c ED0F     		lsrs	r5, r5, #31
 1668 039e 0295     		str	r5, [sp, #8]
 1669 03a0 CDE90001 		strd	r0, [sp]
 1670 03a4 0A9B     		ldr	r3, [sp, #40]
 1671 03a6 2246     		mov	r2, r4
 1672 03a8 0B99     		ldr	r1, [sp, #44]
 1673 03aa 3046     		mov	r0, r6
 1674 03ac FFF7FEFF 		bl	_ntoa_long_long
 1675              	.LVL155:
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1676              		.loc 1 720 35 view .LVU465
 1677 03b0 0446     		mov	r4, r0
 1678              	.LVL156:
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1679              		.loc 1 720 35 view .LVU466
 1680              	.LBE38:
 1681 03b2 D8E7     		b	.L115
 1682              	.LVL157:
 1683              	.L180:
 1684              	.LBB39:
 720:lvgl/src/lv_misc/lv_printf.c ****                                                   precision, width, flags);
 1685              		.loc 1 720 77 view .LVU467
 1686 03b4 4042     		rsbs	r0, r0, #0
 1687 03b6 65EB4501 		sbc	r1, r5, r5, lsl #1
 1688 03ba E6E7     		b	.L114
 1689              	.L179:
 1690              	.LBE39:
 1691              	.LBB40:
 725:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? 
 1692              		.loc 1 725 29 is_stmt 1 view .LVU468
 725:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? 
 1693              		.loc 1 725 40 is_stmt 0 view .LVU469
 1694 03bc 189A     		ldr	r2, [sp, #96]
 1695 03be 111D     		adds	r1, r2, #4
 1696 03c0 1891     		str	r1, [sp, #96]
 1697 03c2 1268     		ldr	r2, [r2]
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1698              		.loc 1 726 29 is_stmt 1 view .LVU470
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1699              		.loc 1 726 72 is_stmt 0 view .LVU471
 1700 03c4 82EAE271 		eor	r1, r2, r2, asr #31
 1701 03c8 A1EBE271 		sub	r1, r1, r2, asr #31
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1702              		.loc 1 726 35 view .LVU472
 1703 03cc CDF814B0 		str	fp, [sp, #20]
 1704 03d0 CDF81090 		str	r9, [sp, #16]
ARM GAS  D:\Temp\ccNq2L4j.s 			page 51


 1705 03d4 CDF80C80 		str	r8, [sp, #12]
 1706 03d8 0293     		str	r3, [sp, #8]
 1707 03da D20F     		lsrs	r2, r2, #31
 1708 03dc 0192     		str	r2, [sp, #4]
 1709 03de 0091     		str	r1, [sp]
 1710 03e0 0A9B     		ldr	r3, [sp, #40]
 1711              	.LVL158:
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1712              		.loc 1 726 35 view .LVU473
 1713 03e2 2246     		mov	r2, r4
 1714 03e4 0B99     		ldr	r1, [sp, #44]
 1715 03e6 3046     		mov	r0, r6
 1716 03e8 FFF7FEFF 		bl	_ntoa_long
 1717              	.LVL159:
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1718              		.loc 1 726 35 view .LVU474
 1719 03ec 0446     		mov	r4, r0
 1720              	.LVL160:
 726:lvgl/src/lv_misc/lv_printf.c ****                                              width, flags);
 1721              		.loc 1 726 35 view .LVU475
 1722              	.LBE40:
 1723 03ee BAE7     		b	.L115
 1724              	.LVL161:
 1725              	.L117:
 1726              	.LBB41:
 731:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? v
 1727              		.loc 1 731 141 discriminator 2 view .LVU476
 1728 03f0 1BF0800F 		tst	fp, #128
 1729 03f4 05D0     		beq	.L119
 730:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1730              		.loc 1 730 129 view .LVU477
 1731 03f6 189A     		ldr	r2, [sp, #96]
 1732 03f8 111D     		adds	r1, r2, #4
 1733 03fa 1891     		str	r1, [sp, #96]
 730:lvgl/src/lv_misc/lv_printf.c ****                                                                                                    
 1734              		.loc 1 730 118 view .LVU478
 1735 03fc B2F90020 		ldrsh	r2, [r2]
 1736 0400 9CE7     		b	.L118
 1737              	.L119:
 731:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? v
 1738              		.loc 1 731 141 view .LVU479
 1739 0402 189A     		ldr	r2, [sp, #96]
 1740 0404 111D     		adds	r1, r2, #4
 1741 0406 1891     		str	r1, [sp, #96]
 1742 0408 1268     		ldr	r2, [r2]
 1743 040a 97E7     		b	.L118
 1744              	.L176:
 731:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? v
 1745              		.loc 1 731 141 view .LVU480
 1746              	.LBE41:
 740:lvgl/src/lv_misc/lv_printf.c **** #endif
 1747              		.loc 1 740 29 is_stmt 1 view .LVU481
 740:lvgl/src/lv_misc/lv_printf.c **** #endif
 1748              		.loc 1 740 35 is_stmt 0 view .LVU482
 1749 040c 189A     		ldr	r2, [sp, #96]
 1750 040e 0732     		adds	r2, r2, #7
 1751 0410 22F00702 		bic	r2, r2, #7
ARM GAS  D:\Temp\ccNq2L4j.s 			page 52


 1752 0414 02F10801 		add	r1, r2, #8
 1753 0418 1891     		str	r1, [sp, #96]
 1754 041a CDF820B0 		str	fp, [sp, #32]
 1755 041e CDF81C90 		str	r9, [sp, #28]
 1756 0422 CDF81880 		str	r8, [sp, #24]
 1757 0426 0021     		movs	r1, #0
 1758 0428 0493     		str	r3, [sp, #16]
 1759 042a 0591     		str	r1, [sp, #20]
 1760 042c 0291     		str	r1, [sp, #8]
 1761 042e D2E90023 		ldrd	r2, [r2]
 1762 0432 CDE90023 		strd	r2, [sp]
 1763 0436 0A9B     		ldr	r3, [sp, #40]
 1764              	.LVL162:
 740:lvgl/src/lv_misc/lv_printf.c **** #endif
 1765              		.loc 1 740 35 view .LVU483
 1766 0438 2246     		mov	r2, r4
 1767 043a 0B99     		ldr	r1, [sp, #44]
 1768 043c 3046     		mov	r0, r6
 1769 043e FFF7FEFF 		bl	_ntoa_long_long
 1770              	.LVL163:
 740:lvgl/src/lv_misc/lv_printf.c **** #endif
 1771              		.loc 1 740 35 view .LVU484
 1772 0442 0446     		mov	r4, r0
 1773              	.LVL164:
 740:lvgl/src/lv_misc/lv_printf.c **** #endif
 1774              		.loc 1 740 35 view .LVU485
 1775 0444 8FE7     		b	.L115
 1776              	.LVL165:
 1777              	.L177:
 744:lvgl/src/lv_misc/lv_printf.c ****                         }
 1778              		.loc 1 744 29 is_stmt 1 view .LVU486
 744:lvgl/src/lv_misc/lv_printf.c ****                         }
 1779              		.loc 1 744 35 is_stmt 0 view .LVU487
 1780 0446 189A     		ldr	r2, [sp, #96]
 1781 0448 111D     		adds	r1, r2, #4
 1782 044a 1891     		str	r1, [sp, #96]
 1783 044c CDF814B0 		str	fp, [sp, #20]
 1784 0450 CDF81090 		str	r9, [sp, #16]
 1785 0454 CDF80C80 		str	r8, [sp, #12]
 1786 0458 0293     		str	r3, [sp, #8]
 1787 045a 0023     		movs	r3, #0
 1788              	.LVL166:
 744:lvgl/src/lv_misc/lv_printf.c ****                         }
 1789              		.loc 1 744 35 view .LVU488
 1790 045c 0193     		str	r3, [sp, #4]
 1791 045e 1368     		ldr	r3, [r2]
 1792 0460 0093     		str	r3, [sp]
 1793 0462 0A9B     		ldr	r3, [sp, #40]
 1794 0464 2246     		mov	r2, r4
 1795 0466 0B99     		ldr	r1, [sp, #44]
 1796 0468 3046     		mov	r0, r6
 1797 046a FFF7FEFF 		bl	_ntoa_long
 1798              	.LVL167:
 744:lvgl/src/lv_misc/lv_printf.c ****                         }
 1799              		.loc 1 744 35 view .LVU489
 1800 046e 0446     		mov	r4, r0
 1801              	.LVL168:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 53


 744:lvgl/src/lv_misc/lv_printf.c ****                         }
 1802              		.loc 1 744 35 view .LVU490
 1803 0470 79E7     		b	.L115
 1804              	.LVL169:
 1805              	.L122:
 1806              	.LBB42:
 748:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 1807              		.loc 1 748 186 discriminator 2 view .LVU491
 1808 0472 1BF0800F 		tst	fp, #128
 1809 0476 04D0     		beq	.L124
 748:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 1810              		.loc 1 748 161 view .LVU492
 1811 0478 189A     		ldr	r2, [sp, #96]
 1812 047a 111D     		adds	r1, r2, #4
 1813 047c 1891     		str	r1, [sp, #96]
 1814 047e 1288     		ldrh	r2, [r2]
 1815 0480 34E7     		b	.L123
 1816              	.L124:
 748:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 1817              		.loc 1 748 186 view .LVU493
 1818 0482 189A     		ldr	r2, [sp, #96]
 1819 0484 111D     		adds	r1, r2, #4
 1820 0486 1891     		str	r1, [sp, #96]
 1821 0488 1268     		ldr	r2, [r2]
 1822 048a 2FE7     		b	.L123
 1823              	.LVL170:
 1824              	.L105:
 748:lvgl/src/lv_misc/lv_printf.c ****                             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precisio
 1825              		.loc 1 748 186 view .LVU494
 1826              	.LBE42:
 1827              	.LBE35:
 1828              	.LBB43:
 775:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1829              		.loc 1 775 21 is_stmt 1 view .LVU495
 777:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1830              		.loc 1 777 21 view .LVU496
 777:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1831              		.loc 1 777 23 is_stmt 0 view .LVU497
 1832 048c 1BF0020B 		ands	fp, fp, #2
 1833              	.LVL171:
 777:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1834              		.loc 1 777 23 view .LVU498
 1835 0490 1DD0     		beq	.L159
 775:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1836              		.loc 1 775 34 view .LVU499
 1837 0492 0125     		movs	r5, #1
 1838              	.LVL172:
 1839              	.L126:
 783:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 1840              		.loc 1 783 21 is_stmt 1 view .LVU500
 783:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 1841              		.loc 1 783 31 is_stmt 0 view .LVU501
 1842 0494 1898     		ldr	r0, [sp, #96]
 1843 0496 031D     		adds	r3, r0, #4
 1844 0498 1893     		str	r3, [sp, #96]
 783:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 1845              		.loc 1 783 21 view .LVU502
ARM GAS  D:\Temp\ccNq2L4j.s 			page 54


 1846 049a 671C     		adds	r7, r4, #1
 1847              	.LVL173:
 783:lvgl/src/lv_misc/lv_printf.c ****                     // post padding
 1848              		.loc 1 783 21 view .LVU503
 1849 049c 0A9B     		ldr	r3, [sp, #40]
 1850 049e 2246     		mov	r2, r4
 1851 04a0 0B99     		ldr	r1, [sp, #44]
 1852 04a2 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1853 04a4 B047     		blx	r6
 1854              	.LVL174:
 785:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1855              		.loc 1 785 21 is_stmt 1 view .LVU504
 785:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1856              		.loc 1 785 23 is_stmt 0 view .LVU505
 1857 04a6 BBF1000F 		cmp	fp, #0
 1858 04aa 13D1     		bne	.L181
 1859              	.LVL175:
 1860              	.L129:
 790:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1861              		.loc 1 790 21 is_stmt 1 view .LVU506
 790:lvgl/src/lv_misc/lv_printf.c ****                     break;
 1862              		.loc 1 790 27 is_stmt 0 view .LVU507
 1863 04ac 0D9B     		ldr	r3, [sp, #52]
 1864 04ae 0133     		adds	r3, r3, #1
 1865 04b0 0D93     		str	r3, [sp, #52]
 791:lvgl/src/lv_misc/lv_printf.c ****                 }
 1866              		.loc 1 791 21 is_stmt 1 view .LVU508
 1867 04b2 3C46     		mov	r4, r7
 1868 04b4 AFE5     		b	.L146
 1869              	.LVL176:
 1870              	.L127:
 779:lvgl/src/lv_misc/lv_printf.c ****                         }
 1871              		.loc 1 779 29 view .LVU509
 1872 04b6 541C     		adds	r4, r2, #1
 1873              	.LVL177:
 779:lvgl/src/lv_misc/lv_printf.c ****                         }
 1874              		.loc 1 779 29 is_stmt 0 view .LVU510
 1875 04b8 0A9B     		ldr	r3, [sp, #40]
 1876 04ba 0B99     		ldr	r1, [sp, #44]
 1877 04bc 2020     		movs	r0, #32
 1878 04be B047     		blx	r6
 1879              	.LVL178:
 778:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1880              		.loc 1 778 32 view .LVU511
 1881 04c0 2B46     		mov	r3, r5
 779:lvgl/src/lv_misc/lv_printf.c ****                         }
 1882              		.loc 1 779 29 view .LVU512
 1883 04c2 2246     		mov	r2, r4
 1884              	.LVL179:
 1885              	.L125:
 778:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1886              		.loc 1 778 32 view .LVU513
 1887 04c4 5D1C     		adds	r5, r3, #1
 1888              	.LVL180:
 778:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1889              		.loc 1 778 30 view .LVU514
 1890 04c6 9945     		cmp	r9, r3
ARM GAS  D:\Temp\ccNq2L4j.s 			page 55


 1891 04c8 F5D8     		bhi	.L127
 778:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1892              		.loc 1 778 30 view .LVU515
 1893 04ca 1446     		mov	r4, r2
 1894 04cc E2E7     		b	.L126
 1895              	.LVL181:
 1896              	.L159:
 775:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1897              		.loc 1 775 34 view .LVU516
 1898 04ce 0123     		movs	r3, #1
 1899 04d0 2246     		mov	r2, r4
 1900 04d2 F7E7     		b	.L125
 1901              	.LVL182:
 1902              	.L181:
 775:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1903              		.loc 1 775 34 view .LVU517
 1904 04d4 3A46     		mov	r2, r7
 1905 04d6 06E0     		b	.L128
 1906              	.LVL183:
 1907              	.L130:
 787:lvgl/src/lv_misc/lv_printf.c ****                         }
 1908              		.loc 1 787 29 is_stmt 1 view .LVU518
 1909 04d8 571C     		adds	r7, r2, #1
 1910              	.LVL184:
 787:lvgl/src/lv_misc/lv_printf.c ****                         }
 1911              		.loc 1 787 29 is_stmt 0 view .LVU519
 1912 04da 0A9B     		ldr	r3, [sp, #40]
 1913 04dc 0B99     		ldr	r1, [sp, #44]
 1914 04de 2020     		movs	r0, #32
 1915 04e0 B047     		blx	r6
 1916              	.LVL185:
 786:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1917              		.loc 1 786 32 view .LVU520
 1918 04e2 2546     		mov	r5, r4
 787:lvgl/src/lv_misc/lv_printf.c ****                         }
 1919              		.loc 1 787 29 view .LVU521
 1920 04e4 3A46     		mov	r2, r7
 1921              	.LVL186:
 1922              	.L128:
 786:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1923              		.loc 1 786 32 view .LVU522
 1924 04e6 6C1C     		adds	r4, r5, #1
 1925              	.LVL187:
 786:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1926              		.loc 1 786 30 view .LVU523
 1927 04e8 A945     		cmp	r9, r5
 1928 04ea F5D8     		bhi	.L130
 786:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1929              		.loc 1 786 30 view .LVU524
 1930 04ec 1746     		mov	r7, r2
 1931 04ee DDE7     		b	.L129
 1932              	.LVL188:
 1933              	.L103:
 786:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 1934              		.loc 1 786 30 view .LVU525
 1935              	.LBE43:
 1936              	.LBB44:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 56


 795:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 1937              		.loc 1 795 21 is_stmt 1 view .LVU526
 795:lvgl/src/lv_misc/lv_printf.c ****                     unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 1938              		.loc 1 795 34 is_stmt 0 view .LVU527
 1939 04f0 189B     		ldr	r3, [sp, #96]
 1940 04f2 1A1D     		adds	r2, r3, #4
 1941 04f4 1892     		str	r2, [sp, #96]
 1942 04f6 1F68     		ldr	r7, [r3]
 796:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1943              		.loc 1 796 21 is_stmt 1 view .LVU528
 796:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 1944              		.loc 1 796 38 is_stmt 0 view .LVU529
 1945 04f8 B8F1000F 		cmp	r8, #0
 1946 04fc 1AD1     		bne	.L131
 1947 04fe 4FF0FF33 		mov	r3, #-1
 1948              	.L132:
 1949 0502 3D46     		mov	r5, r7
 1950 0504 01E0     		b	.L133
 1951              	.LVL189:
 1952              	.L135:
 1953              	.LBB45:
 1954              	.LBB46:
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1955              		.loc 1 145 39 is_stmt 1 view .LVU530
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1956              		.loc 1 145 35 is_stmt 0 view .LVU531
 1957 0506 0135     		adds	r5, r5, #1
 1958              	.LVL190:
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1959              		.loc 1 145 31 view .LVU532
 1960 0508 1346     		mov	r3, r2
 1961              	.LVL191:
 1962              	.L133:
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1963              		.loc 1 145 18 view .LVU533
 1964 050a 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1965              		.loc 1 145 5 view .LVU534
 1966 050c 12B1     		cbz	r2, .L134
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1967              		.loc 1 145 31 view .LVU535
 1968 050e 5A1E     		subs	r2, r3, #1
 1969              	.LVL192:
 145:lvgl/src/lv_misc/lv_printf.c ****     return (unsigned int)(s - str);
 1970              		.loc 1 145 21 view .LVU536
 1971 0510 002B     		cmp	r3, #0
 1972 0512 F8D1     		bne	.L135
 1973              	.LVL193:
 1974              	.L134:
 146:lvgl/src/lv_misc/lv_printf.c **** }
 1975              		.loc 1 146 5 is_stmt 1 view .LVU537
 146:lvgl/src/lv_misc/lv_printf.c **** }
 1976              		.loc 1 146 29 is_stmt 0 view .LVU538
 1977 0514 ED1B     		subs	r5, r5, r7
 1978              	.LVL194:
 146:lvgl/src/lv_misc/lv_printf.c **** }
 1979              		.loc 1 146 29 view .LVU539
ARM GAS  D:\Temp\ccNq2L4j.s 			page 57


 1980              	.LBE46:
 1981              	.LBE45:
 798:lvgl/src/lv_misc/lv_printf.c ****                         l = (l < precision ? l : precision);
 1982              		.loc 1 798 21 is_stmt 1 view .LVU540
 798:lvgl/src/lv_misc/lv_printf.c ****                         l = (l < precision ? l : precision);
 1983              		.loc 1 798 23 is_stmt 0 view .LVU541
 1984 0516 1BF4806A 		ands	r10, fp, #1024
 1985 051a 02D0     		beq	.L136
 799:lvgl/src/lv_misc/lv_printf.c ****                     }
 1986              		.loc 1 799 25 is_stmt 1 view .LVU542
 799:lvgl/src/lv_misc/lv_printf.c ****                     }
 1987              		.loc 1 799 27 is_stmt 0 view .LVU543
 1988 051c 4545     		cmp	r5, r8
 1989 051e 28BF     		it	cs
 1990 0520 4546     		movcs	r5, r8
 1991              	.LVL195:
 1992              	.L136:
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1993              		.loc 1 801 21 is_stmt 1 view .LVU544
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1994              		.loc 1 801 23 is_stmt 0 view .LVU545
 1995 0522 1BF00203 		ands	r3, fp, #2
 1996 0526 0C93     		str	r3, [sp, #48]
 1997 0528 06D0     		beq	.L182
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 1998              		.loc 1 801 23 view .LVU546
 1999 052a 2246     		mov	r2, r4
 2000 052c 4446     		mov	r4, r8
 2001              	.LVL196:
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 2002              		.loc 1 801 23 view .LVU547
 2003 052e A846     		mov	r8, r5
 2004              	.LVL197:
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 2005              		.loc 1 801 23 view .LVU548
 2006 0530 5546     		mov	r5, r10
 2007              	.LVL198:
 801:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 2008              		.loc 1 801 23 view .LVU549
 2009 0532 1AE0     		b	.L140
 2010              	.LVL199:
 2011              	.L131:
 796:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 2012              		.loc 1 796 38 view .LVU550
 2013 0534 4346     		mov	r3, r8
 2014 0536 E4E7     		b	.L132
 2015              	.LVL200:
 2016              	.L182:
 796:lvgl/src/lv_misc/lv_printf.c ****                     // pre padding
 2017              		.loc 1 796 38 view .LVU551
 2018 0538 2246     		mov	r2, r4
 2019              	.LVL201:
 2020              	.L137:
 802:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2021              		.loc 1 802 32 view .LVU552
 2022 053a 05F1010B 		add	fp, r5, #1
 2023              	.LVL202:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 58


 802:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2024              		.loc 1 802 30 view .LVU553
 2025 053e A945     		cmp	r9, r5
 2026 0540 07D9     		bls	.L183
 803:lvgl/src/lv_misc/lv_printf.c ****                         }
 2027              		.loc 1 803 29 is_stmt 1 view .LVU554
 2028 0542 541C     		adds	r4, r2, #1
 2029              	.LVL203:
 803:lvgl/src/lv_misc/lv_printf.c ****                         }
 2030              		.loc 1 803 29 is_stmt 0 view .LVU555
 2031 0544 0A9B     		ldr	r3, [sp, #40]
 2032 0546 0B99     		ldr	r1, [sp, #44]
 2033 0548 2020     		movs	r0, #32
 2034 054a B047     		blx	r6
 2035              	.LVL204:
 802:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2036              		.loc 1 802 32 view .LVU556
 2037 054c 5D46     		mov	r5, fp
 803:lvgl/src/lv_misc/lv_printf.c ****                         }
 2038              		.loc 1 803 29 view .LVU557
 2039 054e 2246     		mov	r2, r4
 2040 0550 F3E7     		b	.L137
 2041              	.LVL205:
 2042              	.L183:
 803:lvgl/src/lv_misc/lv_printf.c ****                         }
 2043              		.loc 1 803 29 view .LVU558
 2044 0552 4446     		mov	r4, r8
 2045 0554 D846     		mov	r8, fp
 2046              	.LVL206:
 803:lvgl/src/lv_misc/lv_printf.c ****                         }
 2047              		.loc 1 803 29 view .LVU559
 2048 0556 5546     		mov	r5, r10
 2049 0558 07E0     		b	.L140
 2050              	.LVL207:
 2051              	.L160:
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2052              		.loc 1 807 80 view .LVU560
 2053 055a 1C46     		mov	r4, r3
 2054              	.LVL208:
 2055              	.L142:
 808:lvgl/src/lv_misc/lv_printf.c ****                     }
 2056              		.loc 1 808 25 is_stmt 1 view .LVU561
 808:lvgl/src/lv_misc/lv_printf.c ****                     }
 2057              		.loc 1 808 32 is_stmt 0 view .LVU562
 2058 055c 0137     		adds	r7, r7, #1
 2059              	.LVL209:
 808:lvgl/src/lv_misc/lv_printf.c ****                     }
 2060              		.loc 1 808 25 view .LVU563
 2061 055e 02F1010B 		add	fp, r2, #1
 2062              	.LVL210:
 808:lvgl/src/lv_misc/lv_printf.c ****                     }
 2063              		.loc 1 808 25 view .LVU564
 2064 0562 0A9B     		ldr	r3, [sp, #40]
 2065 0564 0B99     		ldr	r1, [sp, #44]
 2066 0566 B047     		blx	r6
 2067              	.LVL211:
 2068 0568 5A46     		mov	r2, fp
ARM GAS  D:\Temp\ccNq2L4j.s 			page 59


 2069              	.LVL212:
 2070              	.L140:
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2071              		.loc 1 807 28 view .LVU565
 2072 056a 3878     		ldrb	r0, [r7]	@ zero_extendqisi2
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2073              		.loc 1 807 26 view .LVU566
 2074 056c 20B1     		cbz	r0, .L141
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2075              		.loc 1 807 37 discriminator 1 view .LVU567
 2076 056e 002D     		cmp	r5, #0
 2077 0570 F4D0     		beq	.L142
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2078              		.loc 1 807 80 discriminator 2 view .LVU568
 2079 0572 631E     		subs	r3, r4, #1
 2080              	.LVL213:
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2081              		.loc 1 807 68 discriminator 2 view .LVU569
 2082 0574 002C     		cmp	r4, #0
 2083 0576 F0D1     		bne	.L160
 2084              	.LVL214:
 2085              	.L141:
 807:lvgl/src/lv_misc/lv_printf.c ****                         out(*(p++), buffer, idx++, maxlen);
 2086              		.loc 1 807 68 discriminator 2 view .LVU570
 2087 0578 1446     		mov	r4, r2
 2088 057a 4546     		mov	r5, r8
 811:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 2089              		.loc 1 811 21 is_stmt 1 view .LVU571
 811:lvgl/src/lv_misc/lv_printf.c ****                         while(l++ < width) {
 2090              		.loc 1 811 23 is_stmt 0 view .LVU572
 2091 057c 0C9B     		ldr	r3, [sp, #48]
 2092 057e 1BB9     		cbnz	r3, .L143
 2093              	.LVL215:
 2094              	.L144:
 816:lvgl/src/lv_misc/lv_printf.c ****                     break;
 2095              		.loc 1 816 21 is_stmt 1 view .LVU573
 816:lvgl/src/lv_misc/lv_printf.c ****                     break;
 2096              		.loc 1 816 27 is_stmt 0 view .LVU574
 2097 0580 0D9B     		ldr	r3, [sp, #52]
 2098 0582 0133     		adds	r3, r3, #1
 2099 0584 0D93     		str	r3, [sp, #52]
 817:lvgl/src/lv_misc/lv_printf.c ****                 }
 2100              		.loc 1 817 21 is_stmt 1 view .LVU575
 2101 0586 46E5     		b	.L146
 2102              	.LVL216:
 2103              	.L143:
 812:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2104              		.loc 1 812 32 is_stmt 0 view .LVU576
 2105 0588 6C1C     		adds	r4, r5, #1
 2106              	.LVL217:
 812:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2107              		.loc 1 812 30 view .LVU577
 2108 058a A945     		cmp	r9, r5
 2109 058c 07D9     		bls	.L184
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2110              		.loc 1 813 29 is_stmt 1 view .LVU578
 2111 058e 571C     		adds	r7, r2, #1
ARM GAS  D:\Temp\ccNq2L4j.s 			page 60


 2112              	.LVL218:
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2113              		.loc 1 813 29 is_stmt 0 view .LVU579
 2114 0590 0A9B     		ldr	r3, [sp, #40]
 2115 0592 0B99     		ldr	r1, [sp, #44]
 2116 0594 2020     		movs	r0, #32
 2117 0596 B047     		blx	r6
 2118              	.LVL219:
 812:lvgl/src/lv_misc/lv_printf.c ****                             out(' ', buffer, idx++, maxlen);
 2119              		.loc 1 812 32 view .LVU580
 2120 0598 2546     		mov	r5, r4
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2121              		.loc 1 813 29 view .LVU581
 2122 059a 3A46     		mov	r2, r7
 2123 059c F4E7     		b	.L143
 2124              	.LVL220:
 2125              	.L184:
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2126              		.loc 1 813 29 view .LVU582
 2127 059e 1446     		mov	r4, r2
 2128              	.LVL221:
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2129              		.loc 1 813 29 view .LVU583
 2130 05a0 EEE7     		b	.L144
 2131              	.LVL222:
 2132              	.L104:
 813:lvgl/src/lv_misc/lv_printf.c ****                         }
 2133              		.loc 1 813 29 view .LVU584
 2134              	.LBE44:
 2135              	.LBB47:
 821:lvgl/src/lv_misc/lv_printf.c ****                     flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 2136              		.loc 1 821 21 is_stmt 1 view .LVU585
 822:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2137              		.loc 1 822 21 view .LVU586
 822:lvgl/src/lv_misc/lv_printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2138              		.loc 1 822 27 is_stmt 0 view .LVU587
 2139 05a2 4BF02103 		orr	r3, fp, #33
 2140              	.LVL223:
 824:lvgl/src/lv_misc/lv_printf.c ****                     if(is_ll) {
 2141              		.loc 1 824 21 is_stmt 1 view .LVU588
 825:lvgl/src/lv_misc/lv_printf.c ****                         idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void 
 2142              		.loc 1 825 21 view .LVU589
 830:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 2143              		.loc 1 830 25 view .LVU590
 830:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 2144              		.loc 1 830 95 is_stmt 0 view .LVU591
 2145 05a6 189A     		ldr	r2, [sp, #96]
 2146 05a8 111D     		adds	r1, r2, #4
 2147 05aa 1891     		str	r1, [sp, #96]
 2148 05ac 1268     		ldr	r2, [r2]
 830:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 2149              		.loc 1 830 31 view .LVU592
 2150 05ae 0593     		str	r3, [sp, #20]
 2151 05b0 0823     		movs	r3, #8
 2152              	.LVL224:
 830:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 2153              		.loc 1 830 31 view .LVU593
ARM GAS  D:\Temp\ccNq2L4j.s 			page 61


 2154 05b2 0493     		str	r3, [sp, #16]
 2155 05b4 CDF80C80 		str	r8, [sp, #12]
 2156 05b8 1023     		movs	r3, #16
 2157 05ba 0293     		str	r3, [sp, #8]
 2158 05bc 0023     		movs	r3, #0
 2159 05be 0193     		str	r3, [sp, #4]
 2160 05c0 0092     		str	r2, [sp]
 2161 05c2 0A9B     		ldr	r3, [sp, #40]
 2162 05c4 2246     		mov	r2, r4
 2163 05c6 0B99     		ldr	r1, [sp, #44]
 2164 05c8 3046     		mov	r0, r6
 2165 05ca FFF7FEFF 		bl	_ntoa_long
 2166              	.LVL225:
 830:lvgl/src/lv_misc/lv_printf.c ****                                          flags);
 2167              		.loc 1 830 31 view .LVU594
 2168 05ce 0446     		mov	r4, r0
 2169              	.LVL226:
 835:lvgl/src/lv_misc/lv_printf.c ****                     break;
 2170              		.loc 1 835 21 is_stmt 1 view .LVU595
 835:lvgl/src/lv_misc/lv_printf.c ****                     break;
 2171              		.loc 1 835 27 is_stmt 0 view .LVU596
 2172 05d0 0D9B     		ldr	r3, [sp, #52]
 2173 05d2 0133     		adds	r3, r3, #1
 2174 05d4 0D93     		str	r3, [sp, #52]
 836:lvgl/src/lv_misc/lv_printf.c ****                 }
 2175              		.loc 1 836 21 is_stmt 1 view .LVU597
 2176 05d6 1EE5     		b	.L146
 2177              	.LVL227:
 2178              	.L106:
 836:lvgl/src/lv_misc/lv_printf.c ****                 }
 2179              		.loc 1 836 21 is_stmt 0 view .LVU598
 2180              	.LBE47:
 2181              		.loc 1 840 17 is_stmt 1 view .LVU599
 2182 05d8 651C     		adds	r5, r4, #1
 2183              	.LVL228:
 2184              		.loc 1 840 17 is_stmt 0 view .LVU600
 2185 05da 0A9B     		ldr	r3, [sp, #40]
 2186 05dc 2246     		mov	r2, r4
 2187 05de 0B99     		ldr	r1, [sp, #44]
 2188 05e0 2520     		movs	r0, #37
 2189 05e2 B047     		blx	r6
 2190              	.LVL229:
 841:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 2191              		.loc 1 841 17 is_stmt 1 view .LVU601
 2192              		.loc 1 841 23 is_stmt 0 view .LVU602
 2193 05e4 0D9B     		ldr	r3, [sp, #52]
 2194 05e6 0133     		adds	r3, r3, #1
 2195 05e8 0D93     		str	r3, [sp, #52]
 842:lvgl/src/lv_misc/lv_printf.c ****                 break;
 2196              		.loc 1 842 17 is_stmt 1 view .LVU603
 840:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 2197              		.loc 1 840 17 is_stmt 0 view .LVU604
 2198 05ea 2C46     		mov	r4, r5
 2199              		.loc 1 842 17 view .LVU605
 2200 05ec 13E5     		b	.L146
 2201              	.LVL230:
 2202              	.L100:
ARM GAS  D:\Temp\ccNq2L4j.s 			page 62


 843:lvgl/src/lv_misc/lv_printf.c **** 
 844:lvgl/src/lv_misc/lv_printf.c ****             default :
 845:lvgl/src/lv_misc/lv_printf.c ****                 out(*format, buffer, idx++, maxlen);
 2203              		.loc 1 845 17 is_stmt 1 view .LVU606
 2204 05ee 651C     		adds	r5, r4, #1
 2205              	.LVL231:
 2206              		.loc 1 845 17 is_stmt 0 view .LVU607
 2207 05f0 0A9B     		ldr	r3, [sp, #40]
 2208 05f2 2246     		mov	r2, r4
 2209 05f4 0B99     		ldr	r1, [sp, #44]
 2210 05f6 B047     		blx	r6
 2211              	.LVL232:
 846:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 2212              		.loc 1 846 17 is_stmt 1 view .LVU608
 2213              		.loc 1 846 23 is_stmt 0 view .LVU609
 2214 05f8 0D9B     		ldr	r3, [sp, #52]
 2215 05fa 0133     		adds	r3, r3, #1
 2216 05fc 0D93     		str	r3, [sp, #52]
 847:lvgl/src/lv_misc/lv_printf.c ****                 break;
 2217              		.loc 1 847 17 is_stmt 1 view .LVU610
 845:lvgl/src/lv_misc/lv_printf.c ****                 format++;
 2218              		.loc 1 845 17 is_stmt 0 view .LVU611
 2219 05fe 2C46     		mov	r4, r5
 2220              		.loc 1 847 17 view .LVU612
 2221 0600 09E5     		b	.L146
 2222              	.LVL233:
 2223              	.L165:
 556:lvgl/src/lv_misc/lv_printf.c ****     }
 2224              		.loc 1 556 13 view .LVU613
 2225 0602 084E     		ldr	r6, .L185
 2226 0604 06E5     		b	.L73
 2227              	.LVL234:
 2228              	.L166:
 848:lvgl/src/lv_misc/lv_printf.c ****         }
 849:lvgl/src/lv_misc/lv_printf.c ****     }
 850:lvgl/src/lv_misc/lv_printf.c **** 
 851:lvgl/src/lv_misc/lv_printf.c ****     // termination
 852:lvgl/src/lv_misc/lv_printf.c ****     out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 2229              		.loc 1 852 5 is_stmt 1 view .LVU614
 2230 0606 0A9B     		ldr	r3, [sp, #40]
 2231 0608 9C42     		cmp	r4, r3
 2232 060a 08D3     		bcc	.L161
 2233              		.loc 1 852 5 is_stmt 0 discriminator 1 view .LVU615
 2234 060c 5A1E     		subs	r2, r3, #1
 2235              	.L148:
 2236              		.loc 1 852 5 discriminator 4 view .LVU616
 2237 060e 0A9B     		ldr	r3, [sp, #40]
 2238 0610 0B99     		ldr	r1, [sp, #44]
 2239 0612 0020     		movs	r0, #0
 2240 0614 B047     		blx	r6
 2241              	.LVL235:
 853:lvgl/src/lv_misc/lv_printf.c **** 
 854:lvgl/src/lv_misc/lv_printf.c ****     // return written chars without terminating \0
 855:lvgl/src/lv_misc/lv_printf.c ****     return (int)idx;
 2242              		.loc 1 855 5 is_stmt 1 discriminator 4 view .LVU617
 856:lvgl/src/lv_misc/lv_printf.c **** }
 2243              		.loc 1 856 1 is_stmt 0 discriminator 4 view .LVU618
ARM GAS  D:\Temp\ccNq2L4j.s 			page 63


 2244 0616 2046     		mov	r0, r4
 2245 0618 0FB0     		add	sp, sp, #60
 2246              	.LCFI16:
 2247              		.cfi_remember_state
 2248              		.cfi_def_cfa_offset 36
 2249              		@ sp needed
 2250 061a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2251              	.LVL236:
 2252              	.L161:
 2253              	.LCFI17:
 2254              		.cfi_restore_state
 852:lvgl/src/lv_misc/lv_printf.c **** 
 2255              		.loc 1 852 5 view .LVU619
 2256 061e 2246     		mov	r2, r4
 2257 0620 F5E7     		b	.L148
 2258              	.L186:
 2259 0622 00BF     		.align	2
 2260              	.L185:
 2261 0624 00000000 		.word	_out_null
 2262              		.cfi_endproc
 2263              	.LFE139:
 2265              		.section	.text.lv_snprintf,"ax",%progbits
 2266              		.align	1
 2267              		.global	lv_snprintf
 2268              		.syntax unified
 2269              		.thumb
 2270              		.thumb_func
 2271              		.fpu fpv4-sp-d16
 2273              	lv_snprintf:
 2274              	.LVL237:
 2275              	.LFB140:
 857:lvgl/src/lv_misc/lv_printf.c **** 
 858:lvgl/src/lv_misc/lv_printf.c **** ///////////////////////////////////////////////////////////////////////////////
 859:lvgl/src/lv_misc/lv_printf.c **** 
 860:lvgl/src/lv_misc/lv_printf.c **** int lv_snprintf(char * buffer, size_t count, const char * format, ...)
 861:lvgl/src/lv_misc/lv_printf.c **** {
 2276              		.loc 1 861 1 is_stmt 1 view -0
 2277              		.cfi_startproc
 2278              		@ args = 4, pretend = 8, frame = 8
 2279              		@ frame_needed = 0, uses_anonymous_args = 1
 2280              		.loc 1 861 1 is_stmt 0 view .LVU621
 2281 0000 0CB4     		push	{r2, r3}
 2282              	.LCFI18:
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 2, -8
 2285              		.cfi_offset 3, -4
 2286 0002 00B5     		push	{lr}
 2287              	.LCFI19:
 2288              		.cfi_def_cfa_offset 12
 2289              		.cfi_offset 14, -12
 2290 0004 85B0     		sub	sp, sp, #20
 2291              	.LCFI20:
 2292              		.cfi_def_cfa_offset 32
 2293 0006 06AA     		add	r2, sp, #24
 2294 0008 52F8043B 		ldr	r3, [r2], #4
 862:lvgl/src/lv_misc/lv_printf.c ****     va_list va;
 2295              		.loc 1 862 5 is_stmt 1 view .LVU622
ARM GAS  D:\Temp\ccNq2L4j.s 			page 64


 863:lvgl/src/lv_misc/lv_printf.c ****     va_start(va, format);
 2296              		.loc 1 863 5 view .LVU623
 2297 000c 0392     		str	r2, [sp, #12]
 864:lvgl/src/lv_misc/lv_printf.c ****     const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 2298              		.loc 1 864 5 view .LVU624
 2299              		.loc 1 864 21 is_stmt 0 view .LVU625
 2300 000e 0092     		str	r2, [sp]
 2301 0010 0A46     		mov	r2, r1
 2302 0012 0146     		mov	r1, r0
 2303              	.LVL238:
 2304              		.loc 1 864 21 view .LVU626
 2305 0014 0348     		ldr	r0, .L189
 2306              	.LVL239:
 2307              		.loc 1 864 21 view .LVU627
 2308 0016 FFF7FEFF 		bl	_vsnprintf
 2309              	.LVL240:
 865:lvgl/src/lv_misc/lv_printf.c ****     va_end(va);
 2310              		.loc 1 865 5 is_stmt 1 view .LVU628
 866:lvgl/src/lv_misc/lv_printf.c ****     return ret;
 2311              		.loc 1 866 5 view .LVU629
 867:lvgl/src/lv_misc/lv_printf.c **** }
 2312              		.loc 1 867 1 is_stmt 0 view .LVU630
 2313 001a 05B0     		add	sp, sp, #20
 2314              	.LCFI21:
 2315              		.cfi_def_cfa_offset 12
 2316              		@ sp needed
 2317 001c 5DF804EB 		ldr	lr, [sp], #4
 2318              	.LCFI22:
 2319              		.cfi_restore 14
 2320              		.cfi_def_cfa_offset 8
 2321 0020 02B0     		add	sp, sp, #8
 2322              	.LCFI23:
 2323              		.cfi_restore 3
 2324              		.cfi_restore 2
 2325              		.cfi_def_cfa_offset 0
 2326 0022 7047     		bx	lr
 2327              	.L190:
 2328              		.align	2
 2329              	.L189:
 2330 0024 00000000 		.word	_out_buffer
 2331              		.cfi_endproc
 2332              	.LFE140:
 2334              		.section	.text.lv_vsnprintf,"ax",%progbits
 2335              		.align	1
 2336              		.global	lv_vsnprintf
 2337              		.syntax unified
 2338              		.thumb
 2339              		.thumb_func
 2340              		.fpu fpv4-sp-d16
 2342              	lv_vsnprintf:
 2343              	.LVL241:
 2344              	.LFB141:
 868:lvgl/src/lv_misc/lv_printf.c **** 
 869:lvgl/src/lv_misc/lv_printf.c **** int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
 870:lvgl/src/lv_misc/lv_printf.c **** {
 2345              		.loc 1 870 1 is_stmt 1 view -0
 2346              		.cfi_startproc
ARM GAS  D:\Temp\ccNq2L4j.s 			page 65


 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              		.loc 1 870 1 is_stmt 0 view .LVU632
 2350 0000 00B5     		push	{lr}
 2351              	.LCFI24:
 2352              		.cfi_def_cfa_offset 4
 2353              		.cfi_offset 14, -4
 2354 0002 83B0     		sub	sp, sp, #12
 2355              	.LCFI25:
 2356              		.cfi_def_cfa_offset 16
 871:lvgl/src/lv_misc/lv_printf.c ****     return _vsnprintf(_out_buffer, buffer, count, format, va);
 2357              		.loc 1 871 5 is_stmt 1 view .LVU633
 2358              		.loc 1 871 12 is_stmt 0 view .LVU634
 2359 0004 0093     		str	r3, [sp]
 2360 0006 1346     		mov	r3, r2
 2361              	.LVL242:
 2362              		.loc 1 871 12 view .LVU635
 2363 0008 0A46     		mov	r2, r1
 2364              	.LVL243:
 2365              		.loc 1 871 12 view .LVU636
 2366 000a 0146     		mov	r1, r0
 2367              	.LVL244:
 2368              		.loc 1 871 12 view .LVU637
 2369 000c 0248     		ldr	r0, .L193
 2370              	.LVL245:
 2371              		.loc 1 871 12 view .LVU638
 2372 000e FFF7FEFF 		bl	_vsnprintf
 2373              	.LVL246:
 872:lvgl/src/lv_misc/lv_printf.c **** }
 2374              		.loc 1 872 1 view .LVU639
 2375 0012 03B0     		add	sp, sp, #12
 2376              	.LCFI26:
 2377              		.cfi_def_cfa_offset 4
 2378              		@ sp needed
 2379 0014 5DF804FB 		ldr	pc, [sp], #4
 2380              	.L194:
 2381              		.align	2
 2382              	.L193:
 2383 0018 00000000 		.word	_out_buffer
 2384              		.cfi_endproc
 2385              	.LFE141:
 2387              		.text
 2388              	.Letext0:
 2389              		.file 2 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\inc
 2390              		.file 3 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\inc
 2391              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2392              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2393              		.file 6 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\lib\\gcc\\arm-none
 2394              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2395              		.file 8 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\lib\\gcc\\arm-none
 2396              		.file 9 "<built-in>"
ARM GAS  D:\Temp\ccNq2L4j.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lv_printf.c
  D:\Temp\ccNq2L4j.s:18     .text._out_buffer:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:25     .text._out_buffer:0000000000000000 _out_buffer
  D:\Temp\ccNq2L4j.s:48     .text._out_null:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:54     .text._out_null:0000000000000000 _out_null
  D:\Temp\ccNq2L4j.s:72     .text._atoi:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:78     .text._atoi:0000000000000000 _atoi
  D:\Temp\ccNq2L4j.s:143    .text._out_rev:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:149    .text._out_rev:0000000000000000 _out_rev
  D:\Temp\ccNq2L4j.s:274    .text._ntoa_format:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:280    .text._ntoa_format:0000000000000000 _ntoa_format
  D:\Temp\ccNq2L4j.s:557    .text._ntoa_long:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:563    .text._ntoa_long:0000000000000000 _ntoa_long
  D:\Temp\ccNq2L4j.s:712    .text._ntoa_long_long:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:718    .text._ntoa_long_long:0000000000000000 _ntoa_long_long
  D:\Temp\ccNq2L4j.s:892    .text._vsnprintf:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:898    .text._vsnprintf:0000000000000000 _vsnprintf
  D:\Temp\ccNq2L4j.s:1026   .text._vsnprintf:0000000000000070 $d
  D:\Temp\ccNq2L4j.s:1046   .text._vsnprintf:0000000000000096 $t
  D:\Temp\ccNq2L4j.s:1073   .text._vsnprintf:00000000000000b0 $d
  D:\Temp\ccNq2L4j.s:1090   .text._vsnprintf:00000000000000f4 $t
  D:\Temp\ccNq2L4j.s:1343   .text._vsnprintf:00000000000001d4 $d
  D:\Temp\ccNq2L4j.s:1427   .text._vsnprintf:000000000000027c $t
  D:\Temp\ccNq2L4j.s:2261   .text._vsnprintf:0000000000000624 $d
  D:\Temp\ccNq2L4j.s:2266   .text.lv_snprintf:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:2273   .text.lv_snprintf:0000000000000000 lv_snprintf
  D:\Temp\ccNq2L4j.s:2330   .text.lv_snprintf:0000000000000024 $d
  D:\Temp\ccNq2L4j.s:2335   .text.lv_vsnprintf:0000000000000000 $t
  D:\Temp\ccNq2L4j.s:2342   .text.lv_vsnprintf:0000000000000000 lv_vsnprintf
  D:\Temp\ccNq2L4j.s:2383   .text.lv_vsnprintf:0000000000000018 $d

UNDEFINED SYMBOLS
__aeabi_uldivmod
