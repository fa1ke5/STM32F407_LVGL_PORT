ARM GAS  D:\Temp\ccEuVdRK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lv_draw_img.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.lv_draw_map,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	lv_draw_map:
  26              	.LVL0:
  27              	.LFB465:
  28              		.file 1 "lvgl/src/lv_draw/lv_draw_img.c"
   1:lvgl/src/lv_draw/lv_draw_img.c **** /**
   2:lvgl/src/lv_draw/lv_draw_img.c ****  * @file lv_draw_img.c
   3:lvgl/src/lv_draw/lv_draw_img.c ****  *
   4:lvgl/src/lv_draw/lv_draw_img.c ****  */
   5:lvgl/src/lv_draw/lv_draw_img.c **** 
   6:lvgl/src/lv_draw/lv_draw_img.c **** /*********************
   7:lvgl/src/lv_draw/lv_draw_img.c ****  *      INCLUDES
   8:lvgl/src/lv_draw/lv_draw_img.c ****  *********************/
   9:lvgl/src/lv_draw/lv_draw_img.c **** #include "lv_draw_img.h"
  10:lvgl/src/lv_draw/lv_draw_img.c **** #include "lv_img_cache.h"
  11:lvgl/src/lv_draw/lv_draw_img.c **** #include "../lv_hal/lv_hal_disp.h"
  12:lvgl/src/lv_draw/lv_draw_img.c **** #include "../lv_misc/lv_log.h"
  13:lvgl/src/lv_draw/lv_draw_img.c **** #include "../lv_core/lv_refr.h"
  14:lvgl/src/lv_draw/lv_draw_img.c **** #include "../lv_misc/lv_mem.h"
  15:lvgl/src/lv_draw/lv_draw_img.c **** #include "../lv_misc/lv_math.h"
  16:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_GPU_STM32_DMA2D
  17:lvgl/src/lv_draw/lv_draw_img.c ****     #include "../lv_gpu/lv_gpu_stm32_dma2d.h"
  18:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_USE_GPU_NXP_PXP
  19:lvgl/src/lv_draw/lv_draw_img.c ****     #include "../lv_gpu/lv_gpu_nxp_pxp.h"
  20:lvgl/src/lv_draw/lv_draw_img.c **** #endif
  21:lvgl/src/lv_draw/lv_draw_img.c **** 
  22:lvgl/src/lv_draw/lv_draw_img.c **** /*********************
  23:lvgl/src/lv_draw/lv_draw_img.c ****  *      DEFINES
  24:lvgl/src/lv_draw/lv_draw_img.c ****  *********************/
  25:lvgl/src/lv_draw/lv_draw_img.c **** 
  26:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
  27:lvgl/src/lv_draw/lv_draw_img.c ****  *      TYPEDEFS
  28:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
  29:lvgl/src/lv_draw/lv_draw_img.c **** 
  30:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
ARM GAS  D:\Temp\ccEuVdRK.s 			page 2


  31:lvgl/src/lv_draw/lv_draw_img.c ****  *  STATIC PROTOTYPES
  32:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
  33:lvgl/src/lv_draw/lv_draw_img.c **** LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * 
  34:lvgl/src/lv_draw/lv_draw_img.c ****                                                        const void * src,
  35:lvgl/src/lv_draw/lv_draw_img.c ****                                                        const lv_draw_img_dsc_t * draw_dsc);
  36:lvgl/src/lv_draw/lv_draw_img.c **** 
  37:lvgl/src/lv_draw/lv_draw_img.c **** LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_ar
  38:lvgl/src/lv_draw/lv_draw_img.c ****                                               const uint8_t * map_p,
  39:lvgl/src/lv_draw/lv_draw_img.c ****                                               const lv_draw_img_dsc_t * draw_dsc,
  40:lvgl/src/lv_draw/lv_draw_img.c ****                                               bool chroma_key, bool alpha_byte);
  41:lvgl/src/lv_draw/lv_draw_img.c **** 
  42:lvgl/src/lv_draw/lv_draw_img.c **** static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg);
  43:lvgl/src/lv_draw/lv_draw_img.c **** static void draw_cleanup(lv_img_cache_entry_t * cache);
  44:lvgl/src/lv_draw/lv_draw_img.c **** 
  45:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
  46:lvgl/src/lv_draw/lv_draw_img.c ****  *  STATIC VARIABLES
  47:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
  48:lvgl/src/lv_draw/lv_draw_img.c **** 
  49:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
  50:lvgl/src/lv_draw/lv_draw_img.c ****  *      MACROS
  51:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
  52:lvgl/src/lv_draw/lv_draw_img.c **** 
  53:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
  54:lvgl/src/lv_draw/lv_draw_img.c ****  *   GLOBAL FUNCTIONS
  55:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
  56:lvgl/src/lv_draw/lv_draw_img.c **** 
  57:lvgl/src/lv_draw/lv_draw_img.c **** void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
  58:lvgl/src/lv_draw/lv_draw_img.c **** {
  59:lvgl/src/lv_draw/lv_draw_img.c ****     _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  60:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->recolor = LV_COLOR_BLACK;
  61:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->opa = LV_OPA_COVER;
  62:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->zoom = LV_IMG_ZOOM_NONE;
  63:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->antialias = LV_ANTIALIAS;
  64:lvgl/src/lv_draw/lv_draw_img.c **** 
  65:lvgl/src/lv_draw/lv_draw_img.c **** }
  66:lvgl/src/lv_draw/lv_draw_img.c **** 
  67:lvgl/src/lv_draw/lv_draw_img.c **** /**
  68:lvgl/src/lv_draw/lv_draw_img.c ****  * Draw an image
  69:lvgl/src/lv_draw/lv_draw_img.c ****  * @param coords the coordinates of the image
  70:lvgl/src/lv_draw/lv_draw_img.c ****  * @param mask the image will be drawn only in this area
  71:lvgl/src/lv_draw/lv_draw_img.c ****  * @param src pointer to a lv_color_t array which contains the pixels of the image
  72:lvgl/src/lv_draw/lv_draw_img.c ****  * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
  73:lvgl/src/lv_draw/lv_draw_img.c ****  */
  74:lvgl/src/lv_draw/lv_draw_img.c **** void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_draw_
  75:lvgl/src/lv_draw/lv_draw_img.c **** {
  76:lvgl/src/lv_draw/lv_draw_img.c ****     if(src == NULL) {
  77:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw: src is NULL");
  78:lvgl/src/lv_draw/lv_draw_img.c ****         show_error(coords, mask, "No\ndata");
  79:lvgl/src/lv_draw/lv_draw_img.c ****         return;
  80:lvgl/src/lv_draw/lv_draw_img.c ****     }
  81:lvgl/src/lv_draw/lv_draw_img.c **** 
  82:lvgl/src/lv_draw/lv_draw_img.c ****     if(dsc->opa <= LV_OPA_MIN) return;
  83:lvgl/src/lv_draw/lv_draw_img.c **** 
  84:lvgl/src/lv_draw/lv_draw_img.c ****     lv_res_t res;
  85:lvgl/src/lv_draw/lv_draw_img.c ****     res = lv_img_draw_core(coords, mask, src, dsc);
  86:lvgl/src/lv_draw/lv_draw_img.c **** 
  87:lvgl/src/lv_draw/lv_draw_img.c ****     if(res == LV_RES_INV) {
ARM GAS  D:\Temp\ccEuVdRK.s 			page 3


  88:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
  89:lvgl/src/lv_draw/lv_draw_img.c ****         show_error(coords, mask, "No\ndata");
  90:lvgl/src/lv_draw/lv_draw_img.c ****         return;
  91:lvgl/src/lv_draw/lv_draw_img.c ****     }
  92:lvgl/src/lv_draw/lv_draw_img.c **** }
  93:lvgl/src/lv_draw/lv_draw_img.c **** 
  94:lvgl/src/lv_draw/lv_draw_img.c **** /**
  95:lvgl/src/lv_draw/lv_draw_img.c ****  * Get the pixel size of a color format in bits
  96:lvgl/src/lv_draw/lv_draw_img.c ****  * @param cf a color format (`LV_IMG_CF_...`)
  97:lvgl/src/lv_draw/lv_draw_img.c ****  * @return the pixel size in bits
  98:lvgl/src/lv_draw/lv_draw_img.c ****  */
  99:lvgl/src/lv_draw/lv_draw_img.c **** uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
 100:lvgl/src/lv_draw/lv_draw_img.c **** {
 101:lvgl/src/lv_draw/lv_draw_img.c ****     uint8_t px_size = 0;
 102:lvgl/src/lv_draw/lv_draw_img.c **** 
 103:lvgl/src/lv_draw/lv_draw_img.c ****     switch(cf) {
 104:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_UNKNOWN:
 105:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_RAW:
 106:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 0;
 107:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 108:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR:
 109:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 110:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = LV_COLOR_SIZE;
 111:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 112:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 113:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 114:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 115:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_1BIT:
 116:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_1BIT:
 117:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 1;
 118:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 119:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_2BIT:
 120:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_2BIT:
 121:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 2;
 122:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 123:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_4BIT:
 124:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_4BIT:
 125:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 4;
 126:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 127:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_8BIT:
 128:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_8BIT:
 129:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 8;
 130:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 131:lvgl/src/lv_draw/lv_draw_img.c ****         default:
 132:lvgl/src/lv_draw/lv_draw_img.c ****             px_size = 0;
 133:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 134:lvgl/src/lv_draw/lv_draw_img.c ****     }
 135:lvgl/src/lv_draw/lv_draw_img.c **** 
 136:lvgl/src/lv_draw/lv_draw_img.c ****     return px_size;
 137:lvgl/src/lv_draw/lv_draw_img.c **** }
 138:lvgl/src/lv_draw/lv_draw_img.c **** 
 139:lvgl/src/lv_draw/lv_draw_img.c **** /**
 140:lvgl/src/lv_draw/lv_draw_img.c ****  * Check if a color format is chroma keyed or not
 141:lvgl/src/lv_draw/lv_draw_img.c ****  * @param cf a color format (`LV_IMG_CF_...`)
 142:lvgl/src/lv_draw/lv_draw_img.c ****  * @return true: chroma keyed; false: not chroma keyed
 143:lvgl/src/lv_draw/lv_draw_img.c ****  */
 144:lvgl/src/lv_draw/lv_draw_img.c **** bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
ARM GAS  D:\Temp\ccEuVdRK.s 			page 4


 145:lvgl/src/lv_draw/lv_draw_img.c **** {
 146:lvgl/src/lv_draw/lv_draw_img.c ****     bool is_chroma_keyed = false;
 147:lvgl/src/lv_draw/lv_draw_img.c **** 
 148:lvgl/src/lv_draw/lv_draw_img.c ****     switch(cf) {
 149:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 150:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_RAW_CHROMA_KEYED:
 151:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_1BIT:
 152:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_2BIT:
 153:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_4BIT:
 154:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_8BIT:
 155:lvgl/src/lv_draw/lv_draw_img.c ****             is_chroma_keyed = true;
 156:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 157:lvgl/src/lv_draw/lv_draw_img.c **** 
 158:lvgl/src/lv_draw/lv_draw_img.c ****         default:
 159:lvgl/src/lv_draw/lv_draw_img.c ****             is_chroma_keyed = false;
 160:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 161:lvgl/src/lv_draw/lv_draw_img.c ****     }
 162:lvgl/src/lv_draw/lv_draw_img.c **** 
 163:lvgl/src/lv_draw/lv_draw_img.c ****     return is_chroma_keyed;
 164:lvgl/src/lv_draw/lv_draw_img.c **** }
 165:lvgl/src/lv_draw/lv_draw_img.c **** 
 166:lvgl/src/lv_draw/lv_draw_img.c **** /**
 167:lvgl/src/lv_draw/lv_draw_img.c ****  * Check if a color format has alpha channel or not
 168:lvgl/src/lv_draw/lv_draw_img.c ****  * @param cf a color format (`LV_IMG_CF_...`)
 169:lvgl/src/lv_draw/lv_draw_img.c ****  * @return true: has alpha channel; false: doesn't have alpha channel
 170:lvgl/src/lv_draw/lv_draw_img.c ****  */
 171:lvgl/src/lv_draw/lv_draw_img.c **** bool lv_img_cf_has_alpha(lv_img_cf_t cf)
 172:lvgl/src/lv_draw/lv_draw_img.c **** {
 173:lvgl/src/lv_draw/lv_draw_img.c ****     bool has_alpha = false;
 174:lvgl/src/lv_draw/lv_draw_img.c **** 
 175:lvgl/src/lv_draw/lv_draw_img.c ****     switch(cf) {
 176:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 177:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_RAW_ALPHA:
 178:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_1BIT:
 179:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_2BIT:
 180:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_4BIT:
 181:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_8BIT:
 182:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_1BIT:
 183:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_2BIT:
 184:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_4BIT:
 185:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_ALPHA_8BIT:
 186:lvgl/src/lv_draw/lv_draw_img.c ****             has_alpha = true;
 187:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 188:lvgl/src/lv_draw/lv_draw_img.c ****         default:
 189:lvgl/src/lv_draw/lv_draw_img.c ****             has_alpha = false;
 190:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 191:lvgl/src/lv_draw/lv_draw_img.c ****     }
 192:lvgl/src/lv_draw/lv_draw_img.c **** 
 193:lvgl/src/lv_draw/lv_draw_img.c ****     return has_alpha;
 194:lvgl/src/lv_draw/lv_draw_img.c **** }
 195:lvgl/src/lv_draw/lv_draw_img.c **** 
 196:lvgl/src/lv_draw/lv_draw_img.c **** /**
 197:lvgl/src/lv_draw/lv_draw_img.c ****  * Get the type of an image source
 198:lvgl/src/lv_draw/lv_draw_img.c ****  * @param src pointer to an image source:
 199:lvgl/src/lv_draw/lv_draw_img.c ****  *  - pointer to an 'lv_img_t' variable (image stored internally and compiled into the code)
 200:lvgl/src/lv_draw/lv_draw_img.c ****  *  - a path to a file (e.g. "S:/folder/image.bin")
 201:lvgl/src/lv_draw/lv_draw_img.c ****  *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
ARM GAS  D:\Temp\ccEuVdRK.s 			page 5


 202:lvgl/src/lv_draw/lv_draw_img.c ****  * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 203:lvgl/src/lv_draw/lv_draw_img.c ****  */
 204:lvgl/src/lv_draw/lv_draw_img.c **** lv_img_src_t lv_img_src_get_type(const void * src)
 205:lvgl/src/lv_draw/lv_draw_img.c **** {
 206:lvgl/src/lv_draw/lv_draw_img.c ****     lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 207:lvgl/src/lv_draw/lv_draw_img.c **** 
 208:lvgl/src/lv_draw/lv_draw_img.c ****     if(src == NULL) return img_src_type;
 209:lvgl/src/lv_draw/lv_draw_img.c ****     const uint8_t * u8_p = src;
 210:lvgl/src/lv_draw/lv_draw_img.c **** 
 211:lvgl/src/lv_draw/lv_draw_img.c ****     /*The first byte shows the type of the image source*/
 212:lvgl/src/lv_draw/lv_draw_img.c ****     if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 213:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 214:lvgl/src/lv_draw/lv_draw_img.c ****     }
 215:lvgl/src/lv_draw/lv_draw_img.c ****     else if(u8_p[0] >= 0x80) {
 216:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 217:lvgl/src/lv_draw/lv_draw_img.c ****     }
 218:lvgl/src/lv_draw/lv_draw_img.c ****     else {
 219:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 220:lvgl/src/lv_draw/lv_draw_img.c ****     }
 221:lvgl/src/lv_draw/lv_draw_img.c **** 
 222:lvgl/src/lv_draw/lv_draw_img.c ****     if(LV_IMG_SRC_UNKNOWN == img_src_type) {
 223:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("lv_img_src_get_type: unknown image type");
 224:lvgl/src/lv_draw/lv_draw_img.c ****     }
 225:lvgl/src/lv_draw/lv_draw_img.c **** 
 226:lvgl/src/lv_draw/lv_draw_img.c ****     return img_src_type;
 227:lvgl/src/lv_draw/lv_draw_img.c **** }
 228:lvgl/src/lv_draw/lv_draw_img.c **** 
 229:lvgl/src/lv_draw/lv_draw_img.c **** /**********************
 230:lvgl/src/lv_draw/lv_draw_img.c ****  *   STATIC FUNCTIONS
 231:lvgl/src/lv_draw/lv_draw_img.c ****  **********************/
 232:lvgl/src/lv_draw/lv_draw_img.c **** 
 233:lvgl/src/lv_draw/lv_draw_img.c **** LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * 
 234:lvgl/src/lv_draw/lv_draw_img.c ****                                                        const void * src,
 235:lvgl/src/lv_draw/lv_draw_img.c ****                                                        const lv_draw_img_dsc_t * draw_dsc)
 236:lvgl/src/lv_draw/lv_draw_img.c **** {
 237:lvgl/src/lv_draw/lv_draw_img.c ****     if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 238:lvgl/src/lv_draw/lv_draw_img.c **** 
 239:lvgl/src/lv_draw/lv_draw_img.c ****     lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 240:lvgl/src/lv_draw/lv_draw_img.c **** 
 241:lvgl/src/lv_draw/lv_draw_img.c ****     if(cdsc == NULL) return LV_RES_INV;
 242:lvgl/src/lv_draw/lv_draw_img.c **** 
 243:lvgl/src/lv_draw/lv_draw_img.c ****     bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 244:lvgl/src/lv_draw/lv_draw_img.c ****     bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 245:lvgl/src/lv_draw/lv_draw_img.c **** 
 246:lvgl/src/lv_draw/lv_draw_img.c ****     if(cdsc->dec_dsc.error_msg != NULL) {
 247:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 248:lvgl/src/lv_draw/lv_draw_img.c **** 
 249:lvgl/src/lv_draw/lv_draw_img.c ****         show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 250:lvgl/src/lv_draw/lv_draw_img.c ****     }
 251:lvgl/src/lv_draw/lv_draw_img.c ****     /* The decoder could open the image and gave the entire uncompressed image.
 252:lvgl/src/lv_draw/lv_draw_img.c ****      * Just draw it!*/
 253:lvgl/src/lv_draw/lv_draw_img.c ****     else if(cdsc->dec_dsc.img_data) {
 254:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t map_area_rot;
 255:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_copy(&map_area_rot, coords);
 256:lvgl/src/lv_draw/lv_draw_img.c ****         if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 257:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 258:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t h = lv_area_get_height(coords);
ARM GAS  D:\Temp\ccEuVdRK.s 			page 6


 259:lvgl/src/lv_draw/lv_draw_img.c **** 
 260:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, 
 261:lvgl/src/lv_draw/lv_draw_img.c **** 
 262:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.x1 += coords->x1;
 263:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y1 += coords->y1;
 264:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.x2 += coords->x1;
 265:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y2 += coords->y1;
 266:lvgl/src/lv_draw/lv_draw_img.c ****         }
 267:lvgl/src/lv_draw/lv_draw_img.c **** 
 268:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t mask_com; /*Common area of mask and coords*/
 269:lvgl/src/lv_draw/lv_draw_img.c ****         bool union_ok;
 270:lvgl/src/lv_draw/lv_draw_img.c ****         union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 271:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 272:lvgl/src/lv_draw/lv_draw_img.c ****         if(union_ok == false) {
 273:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 274:lvgl/src/lv_draw/lv_draw_img.c ****             return LV_RES_OK;
 275:lvgl/src/lv_draw/lv_draw_img.c ****         }
 276:lvgl/src/lv_draw/lv_draw_img.c **** 
 277:lvgl/src/lv_draw/lv_draw_img.c ****         lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 278:lvgl/src/lv_draw/lv_draw_img.c ****     }
 279:lvgl/src/lv_draw/lv_draw_img.c ****     /* The whole uncompressed image is not available. Try to read it line-by-line*/
 280:lvgl/src/lv_draw/lv_draw_img.c ****     else {
 281:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t mask_com; /*Common area of mask and coords*/
 282:lvgl/src/lv_draw/lv_draw_img.c ****         bool union_ok;
 283:lvgl/src/lv_draw/lv_draw_img.c ****         union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 284:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 285:lvgl/src/lv_draw/lv_draw_img.c ****         if(union_ok == false) {
 286:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 287:lvgl/src/lv_draw/lv_draw_img.c ****             return LV_RES_OK;
 288:lvgl/src/lv_draw/lv_draw_img.c ****         }
 289:lvgl/src/lv_draw/lv_draw_img.c **** 
 290:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t width = lv_area_get_width(&mask_com);
 291:lvgl/src/lv_draw/lv_draw_img.c **** 
 292:lvgl/src/lv_draw/lv_draw_img.c ****         uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 293:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 294:lvgl/src/lv_draw/lv_draw_img.c **** 
 295:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t line;
 296:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_copy(&line, &mask_com);
 297:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_set_height(&line, 1);
 298:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t x = mask_com.x1 - coords->x1;
 299:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t y = mask_com.y1 - coords->y1;
 300:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t row;
 301:lvgl/src/lv_draw/lv_draw_img.c ****         lv_res_t read_res;
 302:lvgl/src/lv_draw/lv_draw_img.c ****         for(row = mask_com.y1; row <= mask_com.y2; row++) {
 303:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 304:lvgl/src/lv_draw/lv_draw_img.c ****             union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 305:lvgl/src/lv_draw/lv_draw_img.c ****             if(union_ok == false) continue;
 306:lvgl/src/lv_draw/lv_draw_img.c **** 
 307:lvgl/src/lv_draw/lv_draw_img.c ****             read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 308:lvgl/src/lv_draw/lv_draw_img.c ****             if(read_res != LV_RES_OK) {
 309:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_decoder_close(&cdsc->dec_dsc);
 310:lvgl/src/lv_draw/lv_draw_img.c ****                 LV_LOG_WARN("Image draw can't read the line");
 311:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_mem_buf_release(buf);
 312:lvgl/src/lv_draw/lv_draw_img.c ****                 draw_cleanup(cdsc);
 313:lvgl/src/lv_draw/lv_draw_img.c ****                 return LV_RES_INV;
 314:lvgl/src/lv_draw/lv_draw_img.c ****             }
 315:lvgl/src/lv_draw/lv_draw_img.c **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 7


 316:lvgl/src/lv_draw/lv_draw_img.c ****             lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 317:lvgl/src/lv_draw/lv_draw_img.c ****             line.y1++;
 318:lvgl/src/lv_draw/lv_draw_img.c ****             line.y2++;
 319:lvgl/src/lv_draw/lv_draw_img.c ****             y++;
 320:lvgl/src/lv_draw/lv_draw_img.c ****         }
 321:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_mem_buf_release(buf);
 322:lvgl/src/lv_draw/lv_draw_img.c ****     }
 323:lvgl/src/lv_draw/lv_draw_img.c **** 
 324:lvgl/src/lv_draw/lv_draw_img.c ****     draw_cleanup(cdsc);
 325:lvgl/src/lv_draw/lv_draw_img.c ****     return LV_RES_OK;
 326:lvgl/src/lv_draw/lv_draw_img.c **** }
 327:lvgl/src/lv_draw/lv_draw_img.c **** 
 328:lvgl/src/lv_draw/lv_draw_img.c **** /**
 329:lvgl/src/lv_draw/lv_draw_img.c ****  * Draw a color map to the display (image)
 330:lvgl/src/lv_draw/lv_draw_img.c ****  * @param cords_p coordinates the color map
 331:lvgl/src/lv_draw/lv_draw_img.c ****  * @param mask_p the map will drawn only on this area  (truncated to VDB area)
 332:lvgl/src/lv_draw/lv_draw_img.c ****  * @param map_p pointer to a lv_color_t array
 333:lvgl/src/lv_draw/lv_draw_img.c ****  * @param draw_dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 334:lvgl/src/lv_draw/lv_draw_img.c ****  * @param chroma_keyed true: enable transparency of LV_IMG_LV_COLOR_TRANSP color pixels
 335:lvgl/src/lv_draw/lv_draw_img.c ****  * @param alpha_byte true: extra alpha byte is inserted for every pixel
 336:lvgl/src/lv_draw/lv_draw_img.c ****  */
 337:lvgl/src/lv_draw/lv_draw_img.c **** LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_ar
 338:lvgl/src/lv_draw/lv_draw_img.c ****                                               const uint8_t * map_p,
 339:lvgl/src/lv_draw/lv_draw_img.c ****                                               const lv_draw_img_dsc_t * draw_dsc,
 340:lvgl/src/lv_draw/lv_draw_img.c ****                                               bool chroma_key, bool alpha_byte)
 341:lvgl/src/lv_draw/lv_draw_img.c **** {
  29              		.loc 1 341 1 view -0
  30              		.cfi_startproc
  31              		@ args = 8, pretend = 0, frame = 208
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 341 1 is_stmt 0 view .LVU1
  34 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 36
  37              		.cfi_offset 4, -36
  38              		.cfi_offset 5, -32
  39              		.cfi_offset 6, -28
  40              		.cfi_offset 7, -24
  41              		.cfi_offset 8, -20
  42              		.cfi_offset 9, -16
  43              		.cfi_offset 10, -12
  44              		.cfi_offset 11, -8
  45              		.cfi_offset 14, -4
  46 0004 B9B0     		sub	sp, sp, #228
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 264
  49 0006 1490     		str	r0, [sp, #80]
  50 0008 1C91     		str	r1, [sp, #112]
  51 000a 1646     		mov	r6, r2
  52 000c 0693     		str	r3, [sp, #24]
  53 000e 9DF80831 		ldrb	r3, [sp, #264]	@ zero_extendqisi2
  54              	.LVL1:
  55              		.loc 1 341 1 view .LVU2
  56 0012 0B93     		str	r3, [sp, #44]
  57 0014 9DF80C31 		ldrb	r3, [sp, #268]	@ zero_extendqisi2
  58 0018 0993     		str	r3, [sp, #36]
 342:lvgl/src/lv_draw/lv_draw_img.c ****     /* Use the clip area as draw area*/
ARM GAS  D:\Temp\ccEuVdRK.s 			page 8


 343:lvgl/src/lv_draw/lv_draw_img.c ****     lv_area_t draw_area;
  59              		.loc 1 343 5 is_stmt 1 view .LVU3
 344:lvgl/src/lv_draw/lv_draw_img.c ****     lv_area_copy(&draw_area, clip_area);
  60              		.loc 1 344 5 view .LVU4
  61              	.LVL2:
  62              	.LBB101:
  63              	.LBI101:
  64              		.file 2 "lvgl/src/lv_draw/../lv_misc/lv_area.h"
   1:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
   2:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @file lv_area.h
   3:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *
   4:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
   5:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
   6:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #ifndef LV_AREA_H
   7:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #define LV_AREA_H
   8:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
   9:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #ifdef __cplusplus
  10:lvgl/src/lv_draw/../lv_misc/lv_area.h **** extern "C" {
  11:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #endif
  12:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  13:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /*********************
  14:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *      INCLUDES
  15:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *********************/
  16:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #include <string.h>
  18:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #include <stdbool.h>
  19:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #include <stdint.h>
  20:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #include "lv_mem.h"
  21:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  22:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /*********************
  23:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *      DEFINES
  24:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *********************/
  25:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /*To avoid overflow don't let the max ranges (reduce with 1000) */
  26:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #define LV_COORD_MAX ((lv_coord_t)((uint32_t)((uint32_t)1 << (8 * sizeof(lv_coord_t) - 1)) - 1000))
  27:lvgl/src/lv_draw/../lv_misc/lv_area.h **** #define LV_COORD_MIN (-LV_COORD_MAX)
  28:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  29:lvgl/src/lv_draw/../lv_misc/lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MAX);
  30:lvgl/src/lv_draw/../lv_misc/lv_area.h **** LV_EXPORT_CONST_INT(LV_COORD_MIN);
  31:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  32:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**********************
  33:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  *      TYPEDEFS
  34:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  **********************/
  35:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  36:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
  37:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * Represents a point on the screen.
  38:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
  39:lvgl/src/lv_draw/../lv_misc/lv_area.h **** typedef struct {
  40:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t x;
  41:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t y;
  42:lvgl/src/lv_draw/../lv_misc/lv_area.h **** } lv_point_t;
  43:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  44:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /** Represents an area of the screen. */
  45:lvgl/src/lv_draw/../lv_misc/lv_area.h **** typedef struct {
  46:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t x1;
  47:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t y1;
  48:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t x2;
  49:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     lv_coord_t y2;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 9


  50:lvgl/src/lv_draw/../lv_misc/lv_area.h **** } lv_area_t;
  51:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  52:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /** Alignments */
  53:lvgl/src/lv_draw/../lv_misc/lv_area.h **** enum {
  54:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_CENTER = 0,
  55:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_TOP_LEFT,
  56:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_TOP_MID,
  57:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_TOP_RIGHT,
  58:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_BOTTOM_LEFT,
  59:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_BOTTOM_MID,
  60:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_BOTTOM_RIGHT,
  61:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_LEFT_MID,
  62:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_IN_RIGHT_MID,
  63:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_TOP_LEFT,
  64:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_TOP_MID,
  65:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_TOP_RIGHT,
  66:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_LEFT,
  67:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_MID,
  68:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_BOTTOM_RIGHT,
  69:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_TOP,
  70:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_MID,
  71:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_LEFT_BOTTOM,
  72:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_TOP,
  73:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_MID,
  74:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     LV_ALIGN_OUT_RIGHT_BOTTOM,
  75:lvgl/src/lv_draw/../lv_misc/lv_area.h **** };
  76:lvgl/src/lv_draw/../lv_misc/lv_area.h **** typedef uint8_t lv_align_t;
  77:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  78:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**********************
  79:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * GLOBAL PROTOTYPES
  80:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  **********************/
  81:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  82:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
  83:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * Initialize an area
  84:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param area_p pointer to an area
  85:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param x1 left coordinate of the area
  86:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param y1 top coordinate of the area
  87:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param x2 right coordinate of the area
  88:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param y2 bottom coordinate of the area
  89:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
  90:lvgl/src/lv_draw/../lv_misc/lv_area.h **** void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2);
  91:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
  92:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
  93:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * Copy an area
  94:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param dest pointer to the destination area
  95:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param src pointer to the source area
  96:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
  97:lvgl/src/lv_draw/../lv_misc/lv_area.h **** inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
  65              		.loc 2 97 20 view .LVU5
  66              	.LBE101:
  98:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
  99:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     _lv_memcpy_small(dest, src, sizeof(lv_area_t));
  67              		.loc 2 99 5 view .LVU6
  68              	.LBB104:
  69              	.LBB102:
  70              	.LBI102:
  71              		.file 3 "lvgl/src/lv_draw/../lv_misc/lv_mem.h"
ARM GAS  D:\Temp\ccEuVdRK.s 			page 10


   1:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
   2:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @file lv_mem.h
   3:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *
   4:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
   5:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
   6:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #ifndef LV_MEM_H
   7:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #define LV_MEM_H
   8:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
   9:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #ifdef __cplusplus
  10:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** extern "C" {
  11:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #endif
  12:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  13:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /*********************
  14:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *      INCLUDES
  15:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *********************/
  16:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  18:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include <stdint.h>
  19:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include <stddef.h>
  20:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include "lv_log.h"
  21:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include "lv_types.h"
  22:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  23:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #if LV_MEMCPY_MEMSET_STD
  24:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #include <string.h>
  25:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #endif
  26:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  27:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /*********************
  28:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *      DEFINES
  29:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *********************/
  30:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  31:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #ifndef LV_MEM_BUF_MAX_NUM
  32:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #define LV_MEM_BUF_MAX_NUM    16
  33:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #endif
  34:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  35:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**********************
  36:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *      TYPEDEFS
  37:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  **********************/
  38:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  39:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  40:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Heap information structure.
  41:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  42:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** typedef struct {
  43:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t total_size; /**< Total heap size */
  44:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t free_cnt;
  45:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t free_size; /**< Size of available memory */
  46:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t free_biggest_size;
  47:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t used_cnt;
  48:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint32_t max_used; /**< Max size of Heap memory used */
  49:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint8_t used_pct; /**< Percentage used */
  50:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint8_t frag_pct; /**< Amount of fragmentation */
  51:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** } lv_mem_monitor_t;
  52:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  53:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** typedef struct {
  54:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     void * p;
  55:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint16_t size;
  56:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint8_t used    : 1;
  57:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** } lv_mem_buf_t;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 11


  58:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  59:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** typedef lv_mem_buf_t lv_mem_buf_arr_t[LV_MEM_BUF_MAX_NUM];
  60:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** extern lv_mem_buf_arr_t _lv_mem_buf;
  61:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  62:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**********************
  63:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * GLOBAL PROTOTYPES
  64:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  **********************/
  65:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  66:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  67:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Initialize the dyn_mem module (work memory and other variables)
  68:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  69:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void _lv_mem_init(void);
  70:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  71:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  72:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Clean up the memory buffer which frees all the allocated memories.
  73:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @note It work only if `LV_MEM_CUSTOM == 0`
  74:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  75:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void _lv_mem_deinit(void);
  76:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  77:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  78:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Allocate a memory dynamically
  79:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param size size of the memory to allocate in bytes
  80:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @return pointer to the allocated memory
  81:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  82:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void * lv_mem_alloc(size_t size);
  83:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  84:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  85:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Free an allocated data
  86:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param data pointer to an allocated memory
  87:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  88:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void lv_mem_free(const void * data);
  89:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  90:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
  91:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Reallocate a memory with a new size. The old content will be kept.
  92:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param data pointer to an allocated memory.
  93:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Its content will be copied to the new memory block and freed
  94:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param new_size the desired new size in byte
  95:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @return pointer to the new memory
  96:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
  97:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void * lv_mem_realloc(void * data_p, size_t new_size);
  98:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
  99:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 100:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Join the adjacent free memory blocks
 101:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 102:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void lv_mem_defrag(void);
 103:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 104:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 105:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *
 106:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @return
 107:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 108:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** lv_res_t lv_mem_test(void);
 109:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 110:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 111:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Give information about the work memory of dynamic allocation
 112:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param mon_p pointer to a dm_mon_p variable,
 113:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  *              the result of the analysis will be stored here
 114:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
ARM GAS  D:\Temp\ccEuVdRK.s 			page 12


 115:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void lv_mem_monitor(lv_mem_monitor_t * mon_p);
 116:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 117:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 118:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Give the size of an allocated memory
 119:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param data pointer to an allocated memory
 120:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @return the size of data memory in bytes
 121:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 122:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** uint32_t _lv_mem_get_size(const void * data);
 123:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 124:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 125:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Get a temporal buffer with the given size.
 126:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param size the required size
 127:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 128:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void * _lv_mem_buf_get(uint32_t size);
 129:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 130:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 131:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Release a memory buffer
 132:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param p buffer to release
 133:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 134:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void _lv_mem_buf_release(void * p);
 135:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 136:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 137:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Free all memory buffers
 138:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 139:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** void _lv_mem_buf_free_all(void);
 140:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 141:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** //! @cond Doxygen_Suppress
 142:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 143:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #if LV_MEMCPY_MEMSET_STD
 144:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 145:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 146:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Wrapper for the standard memcpy
 147:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 148:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param src pointer to the source buffer
 149:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to copy
 150:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 151:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** static inline void * _lv_memcpy(void * dst, const void * src, size_t len)
 152:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 153:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     return memcpy(dst, src, len);
 154:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** }
 155:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 156:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 157:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Wrapper for the standard memcpy
 158:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 159:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param src pointer to the source buffer
 160:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to copy
 161:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 162:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
 163:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 164:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     return memcpy(dst, src, len);
 165:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** }
 166:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 167:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 168:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Wrapper for the standard memset
 169:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 170:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param v value to set [0..255]
 171:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to set
ARM GAS  D:\Temp\ccEuVdRK.s 			page 13


 172:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 173:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** static inline void _lv_memset(void * dst, uint8_t v, size_t len)
 174:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 175:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     memset(dst, v, len);
 176:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** }
 177:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 178:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 179:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0x00 value
 180:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 181:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to set
 182:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 183:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** static inline void _lv_memset_00(void * dst, size_t len)
 184:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 185:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     memset(dst, 0x00, len);
 186:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** }
 187:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 188:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 189:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0xFF value
 190:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 191:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to set
 192:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 193:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** static inline void _lv_memset_ff(void * dst, size_t len)
 194:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 195:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     memset(dst, 0xFF, len);
 196:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** }
 197:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 198:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** #else
 199:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 200:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Same as `memcpy` but optimized for 4 byte operation.
 201:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 202:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param src pointer to the source buffer
 203:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to copy
 204:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 205:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len);
 206:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 207:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** /**
 208:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * Same as `memcpy` but optimized to copy only a few bytes.
 209:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 210:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param src pointer to the source buffer
 211:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  * @param len number of byte to copy
 212:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****  */
 213:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t le
  72              		.loc 3 213 44 view .LVU7
  73              	.LBB103:
 214:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     uint8_t * d8 = (uint8_t *)dst;
  74              		.loc 3 215 5 view .LVU8
 216:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
  75              		.loc 3 216 5 view .LVU9
 217:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     while(len) {
  76              		.loc 3 218 5 view .LVU10
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
  77              		.loc 3 215 15 is_stmt 0 view .LVU11
  78 001a 36AA     		add	r2, sp, #216
  79              	.LVL3:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 14


  80              		.loc 3 215 15 view .LVU12
  81 001c 0823     		movs	r3, #8
  82 001e 04E0     		b	.L2
  83              	.LVL4:
  84              	.L3:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
  85              		.loc 3 219 9 is_stmt 1 view .LVU13
  86              		.loc 3 219 15 is_stmt 0 view .LVU14
  87 0020 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
  88              	.LVL5:
  89              		.loc 3 219 13 view .LVU15
  90 0024 02F8010B 		strb	r0, [r2], #1
  91              	.LVL6:
 220:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
  92              		.loc 3 220 9 is_stmt 1 view .LVU16
 221:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         s8++;
  93              		.loc 3 221 9 view .LVU17
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         len--;
  94              		.loc 3 222 9 view .LVU18
  95              		.loc 3 222 12 is_stmt 0 view .LVU19
  96 0028 013B     		subs	r3, r3, #1
  97              	.LVL7:
  98              	.L2:
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
  99              		.loc 3 218 10 view .LVU20
 100 002a 002B     		cmp	r3, #0
 101 002c F8D1     		bne	.L3
 223:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 224:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 225:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     return dst;
 102              		.loc 3 225 5 is_stmt 1 view .LVU21
 103              	.LVL8:
 104              		.loc 3 225 5 is_stmt 0 view .LVU22
 105              	.LBE103:
 106              	.LBE102:
 107              	.LBE104:
 345:lvgl/src/lv_draw/lv_draw_img.c **** 
 346:lvgl/src/lv_draw/lv_draw_img.c ****     lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 108              		.loc 1 346 5 is_stmt 1 view .LVU23
 109              		.loc 1 346 27 is_stmt 0 view .LVU24
 110 002e FFF7FEFF 		bl	_lv_refr_get_disp_refreshing
 111              	.LVL9:
 112 0032 0446     		mov	r4, r0
 113              	.LVL10:
 347:lvgl/src/lv_draw/lv_draw_img.c ****     lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 114              		.loc 1 347 5 is_stmt 1 view .LVU25
 115              		.loc 1 347 27 is_stmt 0 view .LVU26
 116 0034 FFF7FEFF 		bl	lv_disp_get_buf
 117              	.LVL11:
 118              		.loc 1 347 27 view .LVU27
 119 0038 1290     		str	r0, [sp, #72]
 120              	.LVL12:
 348:lvgl/src/lv_draw/lv_draw_img.c ****     const lv_area_t * disp_area = &vdb->area;
 121              		.loc 1 348 5 is_stmt 1 view .LVU28
 349:lvgl/src/lv_draw/lv_draw_img.c **** 
 350:lvgl/src/lv_draw/lv_draw_img.c ****     /* Now `draw_area` has absolute coordinates.
 351:lvgl/src/lv_draw/lv_draw_img.c ****      * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
ARM GAS  D:\Temp\ccEuVdRK.s 			page 15


 352:lvgl/src/lv_draw/lv_draw_img.c ****     draw_area.x1 -= disp_area->x1;
 122              		.loc 1 352 5 view .LVU29
 123              		.loc 1 352 30 is_stmt 0 view .LVU30
 124 003a 018A     		ldrh	r1, [r0, #16]
 125              		.loc 1 352 18 view .LVU31
 126 003c BDF8D830 		ldrh	r3, [sp, #216]
 127 0040 5B1A     		subs	r3, r3, r1
 128 0042 ADF8D830 		strh	r3, [sp, #216]	@ movhi
 353:lvgl/src/lv_draw/lv_draw_img.c ****     draw_area.y1 -= disp_area->y1;
 129              		.loc 1 353 5 is_stmt 1 view .LVU32
 130              		.loc 1 353 30 is_stmt 0 view .LVU33
 131 0046 428A     		ldrh	r2, [r0, #18]
 132              		.loc 1 353 18 view .LVU34
 133 0048 BDF8DA30 		ldrh	r3, [sp, #218]
 134 004c 9B1A     		subs	r3, r3, r2
 135 004e ADF8DA30 		strh	r3, [sp, #218]	@ movhi
 354:lvgl/src/lv_draw/lv_draw_img.c ****     draw_area.x2 -= disp_area->x1;
 136              		.loc 1 354 5 is_stmt 1 view .LVU35
 137              		.loc 1 354 18 is_stmt 0 view .LVU36
 138 0052 BDF8DC30 		ldrh	r3, [sp, #220]
 139 0056 5B1A     		subs	r3, r3, r1
 140 0058 ADF8DC30 		strh	r3, [sp, #220]	@ movhi
 355:lvgl/src/lv_draw/lv_draw_img.c ****     draw_area.y2 -= disp_area->y1;
 141              		.loc 1 355 5 is_stmt 1 view .LVU37
 142              		.loc 1 355 18 is_stmt 0 view .LVU38
 143 005c BDF8DE30 		ldrh	r3, [sp, #222]
 144 0060 9B1A     		subs	r3, r3, r2
 145 0062 ADF8DE30 		strh	r3, [sp, #222]	@ movhi
 356:lvgl/src/lv_draw/lv_draw_img.c **** 
 357:lvgl/src/lv_draw/lv_draw_img.c ****     uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 146              		.loc 1 357 5 is_stmt 1 view .LVU39
 147              		.loc 1 357 30 is_stmt 0 view .LVU40
 148 0066 FFF7FEFF 		bl	lv_draw_mask_get_cnt
 149              	.LVL13:
 358:lvgl/src/lv_draw/lv_draw_img.c **** 
 359:lvgl/src/lv_draw/lv_draw_img.c ****     /*The simplest case just copy the pixels into the VDB*/
 360:lvgl/src/lv_draw/lv_draw_img.c ****     if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 150              		.loc 1 360 5 is_stmt 1 view .LVU41
 151              		.loc 1 360 7 is_stmt 0 view .LVU42
 152 006a 1390     		str	r0, [sp, #76]
 153 006c 30B9     		cbnz	r0, .L4
 154              		.loc 1 360 39 discriminator 1 view .LVU43
 155 006e 069A     		ldr	r2, [sp, #24]
 156 0070 5388     		ldrh	r3, [r2, #2]
 157              		.loc 1 360 28 discriminator 1 view .LVU44
 158 0072 1BB9     		cbnz	r3, .L4
 159              		.loc 1 360 63 discriminator 2 view .LVU45
 160 0074 1389     		ldrh	r3, [r2, #8]
 161              		.loc 1 360 52 discriminator 2 view .LVU46
 162 0076 B3F5807F 		cmp	r3, #256
 163 007a 57D0     		beq	.L76
 164              	.L4:
 165              	.LBB105:
 361:lvgl/src/lv_draw/lv_draw_img.c ****        chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 362:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 363:lvgl/src/lv_draw/lv_draw_img.c ****                       draw_dsc->blend_mode);
 364:lvgl/src/lv_draw/lv_draw_img.c ****     }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 16


 365:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_GPU_NXP_PXP
 366:lvgl/src/lv_draw/lv_draw_img.c ****     /* Simple case without masking and transformations */
 367:lvgl/src/lv_draw/lv_draw_img.c ****     else if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE && al
 368:lvgl/src/lv_draw/lv_draw_img.c ****             chroma_key == true && draw_dsc->recolor_opa == LV_OPA_TRANSP) { /* copy with color keyi
 369:lvgl/src/lv_draw/lv_draw_img.c ****         lv_gpu_nxp_pxp_enable_color_key();
 370:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 371:lvgl/src/lv_draw/lv_draw_img.c ****                       draw_dsc->blend_mode);
 372:lvgl/src/lv_draw/lv_draw_img.c ****         lv_gpu_nxp_pxp_disable_color_key();
 373:lvgl/src/lv_draw/lv_draw_img.c ****     }
 374:lvgl/src/lv_draw/lv_draw_img.c ****     else if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE && al
 375:lvgl/src/lv_draw/lv_draw_img.c ****             chroma_key == false && draw_dsc->recolor_opa != LV_OPA_TRANSP) { /* copy with recolor (
 376:lvgl/src/lv_draw/lv_draw_img.c ****         lv_gpu_nxp_pxp_enable_recolor(draw_dsc->recolor, draw_dsc->recolor_opa);
 377:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 378:lvgl/src/lv_draw/lv_draw_img.c ****                       draw_dsc->blend_mode);
 379:lvgl/src/lv_draw/lv_draw_img.c ****         lv_gpu_nxp_pxp_disable_recolor();
 380:lvgl/src/lv_draw/lv_draw_img.c ****     }
 381:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 382:lvgl/src/lv_draw/lv_draw_img.c ****     /*In the other cases every pixel need to be checked one-by-one*/
 383:lvgl/src/lv_draw/lv_draw_img.c ****     else {
 384:lvgl/src/lv_draw/lv_draw_img.c ****         /*The pixel size in byte is different if an alpha byte is added too*/
 385:lvgl/src/lv_draw/lv_draw_img.c ****         uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 166              		.loc 1 385 9 is_stmt 1 view .LVU47
 167              		.loc 1 385 17 is_stmt 0 view .LVU48
 168 007c 099B     		ldr	r3, [sp, #36]
 169 007e 002B     		cmp	r3, #0
 170 0080 6AD0     		beq	.L54
 171 0082 0323     		movs	r3, #3
 172 0084 0593     		str	r3, [sp, #20]
 173              	.L6:
 174              	.LVL14:
 386:lvgl/src/lv_draw/lv_draw_img.c **** 
 387:lvgl/src/lv_draw/lv_draw_img.c ****         /*Go to the first displayed pixel of the map*/
 388:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t map_w = lv_area_get_width(map_area);
 175              		.loc 1 388 9 is_stmt 1 discriminator 4 view .LVU49
 176              	.LBB106:
 177              	.LBI106:
 100:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 101:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
 102:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
 103:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * Get the width of an area
 104:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param area_p pointer to an area
 105:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @return the width of the area (if x1 == x2 -> width = 1)
 106:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
 178              		.loc 2 107 26 discriminator 4 view .LVU50
 179              	.LBB107:
 108:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 180              		.loc 2 109 5 discriminator 4 view .LVU51
 181              		.loc 2 109 31 is_stmt 0 discriminator 4 view .LVU52
 182 0086 1499     		ldr	r1, [sp, #80]
 183 0088 8D88     		ldrh	r5, [r1, #4]
 184              		.loc 2 109 44 discriminator 4 view .LVU53
 185 008a B1F90020 		ldrsh	r2, [r1]
 186 008e 93B2     		uxth	r3, r2
 187              		.loc 2 109 36 discriminator 4 view .LVU54
 188 0090 ED1A     		subs	r5, r5, r3
ARM GAS  D:\Temp\ccEuVdRK.s 			page 17


 189 0092 ADB2     		uxth	r5, r5
 190              		.loc 2 109 49 discriminator 4 view .LVU55
 191 0094 0135     		adds	r5, r5, #1
 192              		.loc 2 109 12 discriminator 4 view .LVU56
 193 0096 2DB2     		sxth	r5, r5
 194              	.LVL15:
 195              		.loc 2 109 12 discriminator 4 view .LVU57
 196              	.LBE107:
 197              	.LBE106:
 198              		.loc 1 388 17 discriminator 4 view .LVU58
 199 0098 1895     		str	r5, [sp, #96]
 200              	.LVL16:
 389:lvgl/src/lv_draw/lv_draw_img.c ****         const uint8_t * map_buf_tmp = map_p;
 201              		.loc 1 389 9 is_stmt 1 discriminator 4 view .LVU59
 390:lvgl/src/lv_draw/lv_draw_img.c ****         map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 202              		.loc 1 390 9 discriminator 4 view .LVU60
 203              		.loc 1 390 42 is_stmt 0 discriminator 4 view .LVU61
 204 009a BDF9DA00 		ldrsh	r0, [sp, #218]
 205              	.LVL17:
 206              		.loc 1 390 57 discriminator 4 view .LVU62
 207 009e B1F90230 		ldrsh	r3, [r1, #2]
 208              		.loc 1 390 73 discriminator 4 view .LVU63
 209 00a2 1299     		ldr	r1, [sp, #72]
 210 00a4 B1F91210 		ldrsh	r1, [r1, #18]
 211              		.loc 1 390 62 discriminator 4 view .LVU64
 212 00a8 5B1A     		subs	r3, r3, r1
 213              		.loc 1 390 46 discriminator 4 view .LVU65
 214 00aa C31A     		subs	r3, r0, r3
 215              		.loc 1 390 30 discriminator 4 view .LVU66
 216 00ac 05FB03F3 		mul	r3, r5, r3
 217              		.loc 1 390 80 discriminator 4 view .LVU67
 218 00b0 059F     		ldr	r7, [sp, #20]
 219 00b2 1797     		str	r7, [sp, #92]
 220              	.LVL18:
 391:lvgl/src/lv_draw/lv_draw_img.c ****         map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 221              		.loc 1 391 9 is_stmt 1 discriminator 4 view .LVU68
 222              		.loc 1 391 34 is_stmt 0 discriminator 4 view .LVU69
 223 00b4 BDF9D8E0 		ldrsh	lr, [sp, #216]
 224              		.loc 1 391 65 discriminator 4 view .LVU70
 225 00b8 129F     		ldr	r7, [sp, #72]
 226              	.LVL19:
 227              		.loc 1 391 65 discriminator 4 view .LVU71
 228 00ba B7F910C0 		ldrsh	ip, [r7, #16]
 229              		.loc 1 391 54 discriminator 4 view .LVU72
 230 00be A2EB0C02 		sub	r2, r2, ip
 231              		.loc 1 391 38 discriminator 4 view .LVU73
 232 00c2 AEEB0202 		sub	r2, lr, r2
 233              		.loc 1 391 72 discriminator 4 view .LVU74
 234 00c6 059F     		ldr	r7, [sp, #20]
 235 00c8 02FB07F2 		mul	r2, r2, r7
 236              		.loc 1 391 21 discriminator 4 view .LVU75
 237 00cc 07FB0323 		mla	r3, r7, r3, r2
 238              	.LVL20:
 239              		.loc 1 391 21 discriminator 4 view .LVU76
 240 00d0 F318     		adds	r3, r6, r3
 241 00d2 0E93     		str	r3, [sp, #56]
 242              	.LVL21:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 18


 392:lvgl/src/lv_draw/lv_draw_img.c **** 
 393:lvgl/src/lv_draw/lv_draw_img.c ****         lv_color_t c;
 243              		.loc 1 393 9 is_stmt 1 discriminator 4 view .LVU77
 394:lvgl/src/lv_draw/lv_draw_img.c ****         lv_color_t chroma_keyed_color = LV_COLOR_TRANSP;
 244              		.loc 1 394 9 discriminator 4 view .LVU78
 395:lvgl/src/lv_draw/lv_draw_img.c ****         uint32_t px_i = 0;
 245              		.loc 1 395 9 discriminator 4 view .LVU79
 396:lvgl/src/lv_draw/lv_draw_img.c **** 
 397:lvgl/src/lv_draw/lv_draw_img.c ****         const uint8_t * map_px;
 246              		.loc 1 397 9 discriminator 4 view .LVU80
 398:lvgl/src/lv_draw/lv_draw_img.c **** 
 399:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t blend_area;
 247              		.loc 1 399 9 discriminator 4 view .LVU81
 400:lvgl/src/lv_draw/lv_draw_img.c ****         blend_area.x1 = draw_area.x1 + disp_area->x1;
 248              		.loc 1 400 9 discriminator 4 view .LVU82
 249              		.loc 1 400 34 is_stmt 0 discriminator 4 view .LVU83
 250 00d4 1FFA8EF7 		uxth	r7, lr
 251              		.loc 1 400 38 discriminator 4 view .LVU84
 252 00d8 17FA8CF3 		uxtah	r3, r7, ip
 253              	.LVL22:
 254              		.loc 1 400 38 discriminator 4 view .LVU85
 255 00dc 9BB2     		uxth	r3, r3
 256              		.loc 1 400 23 discriminator 4 view .LVU86
 257 00de ADF88430 		strh	r3, [sp, #132]	@ movhi
 401:lvgl/src/lv_draw/lv_draw_img.c ****         blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 258              		.loc 1 401 9 is_stmt 1 discriminator 4 view .LVU87
 259              	.LVL23:
 260              	.LBB108:
 261              	.LBI108:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 262              		.loc 2 107 26 discriminator 4 view .LVU88
 263              	.LBB109:
 264              		.loc 2 109 5 discriminator 4 view .LVU89
 265              		.loc 2 109 31 is_stmt 0 discriminator 4 view .LVU90
 266 00e2 BDF8DC20 		ldrh	r2, [sp, #220]
 267              		.loc 2 109 36 discriminator 4 view .LVU91
 268 00e6 D21B     		subs	r2, r2, r7
 269 00e8 92B2     		uxth	r2, r2
 270              		.loc 2 109 49 discriminator 4 view .LVU92
 271 00ea 0132     		adds	r2, r2, #1
 272 00ec 92B2     		uxth	r2, r2
 273              		.loc 2 109 12 discriminator 4 view .LVU93
 274 00ee 0FFA82FA 		sxth	r10, r2
 275              	.LVL24:
 276              		.loc 2 109 12 discriminator 4 view .LVU94
 277              	.LBE109:
 278              	.LBE108:
 279              		.loc 1 401 39 discriminator 4 view .LVU95
 280 00f2 1344     		add	r3, r3, r2
 281 00f4 9BB2     		uxth	r3, r3
 282              		.loc 1 401 71 discriminator 4 view .LVU96
 283 00f6 013B     		subs	r3, r3, #1
 284              		.loc 1 401 23 discriminator 4 view .LVU97
 285 00f8 ADF88830 		strh	r3, [sp, #136]	@ movhi
 402:lvgl/src/lv_draw/lv_draw_img.c ****         blend_area.y1 = disp_area->y1 + draw_area.y1;
 286              		.loc 1 402 9 is_stmt 1 discriminator 4 view .LVU98
 287              		.loc 1 402 50 is_stmt 0 discriminator 4 view .LVU99
ARM GAS  D:\Temp\ccEuVdRK.s 			page 19


 288 00fc 80B2     		uxth	r0, r0
 289              		.loc 1 402 39 discriminator 4 view .LVU100
 290 00fe 10FA81F3 		uxtah	r3, r0, r1
 291 0102 1BB2     		sxth	r3, r3
 292              		.loc 1 402 23 discriminator 4 view .LVU101
 293 0104 ADF88630 		strh	r3, [sp, #134]	@ movhi
 403:lvgl/src/lv_draw/lv_draw_img.c ****         blend_area.y2 = blend_area.y1;
 294              		.loc 1 403 9 is_stmt 1 discriminator 4 view .LVU102
 295              		.loc 1 403 23 is_stmt 0 discriminator 4 view .LVU103
 296 0108 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 404:lvgl/src/lv_draw/lv_draw_img.c **** 
 405:lvgl/src/lv_draw/lv_draw_img.c ****         lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
 297              		.loc 1 405 9 is_stmt 1 discriminator 4 view .LVU104
 298              	.LVL25:
 299              	.LBB110:
 300              	.LBI110:
 110:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 111:lvgl/src/lv_draw/../lv_misc/lv_area.h **** 
 112:lvgl/src/lv_draw/../lv_misc/lv_area.h **** /**
 113:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * Get the height of an area
 114:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @param area_p pointer to an area
 115:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  * @return the height of the area (if y1 == y2 -> height = 1)
 116:lvgl/src/lv_draw/../lv_misc/lv_area.h ****  */
 117:lvgl/src/lv_draw/../lv_misc/lv_area.h **** static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
 301              		.loc 2 117 26 discriminator 4 view .LVU105
 302              	.LBB111:
 118:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 119:lvgl/src/lv_draw/../lv_misc/lv_area.h ****     return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 303              		.loc 2 119 5 discriminator 4 view .LVU106
 304              		.loc 2 119 31 is_stmt 0 discriminator 4 view .LVU107
 305 010c BDF8DE30 		ldrh	r3, [sp, #222]
 306              		.loc 2 119 36 discriminator 4 view .LVU108
 307 0110 1B1A     		subs	r3, r3, r0
 308 0112 9BB2     		uxth	r3, r3
 309              		.loc 2 119 49 discriminator 4 view .LVU109
 310 0114 0133     		adds	r3, r3, #1
 311              		.loc 2 119 12 discriminator 4 view .LVU110
 312 0116 1BB2     		sxth	r3, r3
 313 0118 1693     		str	r3, [sp, #88]
 314              	.LVL26:
 315              		.loc 2 119 12 discriminator 4 view .LVU111
 316              	.LBE111:
 317              	.LBE110:
 406:lvgl/src/lv_draw/lv_draw_img.c ****         lv_coord_t draw_area_w = lv_area_get_width(&draw_area);
 318              		.loc 1 406 9 is_stmt 1 discriminator 4 view .LVU112
 319              		.loc 1 406 9 is_stmt 0 discriminator 4 view .LVU113
 320              	.LBE105:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 321              		.loc 2 109 5 is_stmt 1 discriminator 4 view .LVU114
 322              	.LBB157:
 407:lvgl/src/lv_draw/lv_draw_img.c **** 
 408:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_IMG_TRANSFORM
 409:lvgl/src/lv_draw/lv_draw_img.c ****         bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 323              		.loc 1 409 9 discriminator 4 view .LVU115
 324              		.loc 1 409 34 is_stmt 0 discriminator 4 view .LVU116
 325 011a 069A     		ldr	r2, [sp, #24]
 326 011c 5388     		ldrh	r3, [r2, #2]
ARM GAS  D:\Temp\ccEuVdRK.s 			page 20


 327              		.loc 1 409 92 discriminator 4 view .LVU117
 328 011e F3B9     		cbnz	r3, .L55
 329              		.loc 1 409 58 discriminator 2 view .LVU118
 330 0120 1389     		ldrh	r3, [r2, #8]
 331              		.loc 1 409 92 discriminator 2 view .LVU119
 332 0122 B3F5807F 		cmp	r3, #256
 333 0126 4CD0     		beq	.L56
 334              		.loc 1 409 92 view .LVU120
 335 0128 0123     		movs	r3, #1
 336 012a 19E0     		b	.L7
 337              	.LVL27:
 338              	.L76:
 339              		.loc 1 409 92 view .LVU121
 340              	.LBE157:
 360:lvgl/src/lv_draw/lv_draw_img.c ****        chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 341              		.loc 1 360 90 discriminator 3 view .LVU122
 342 012c 0B9B     		ldr	r3, [sp, #44]
 343 012e 002B     		cmp	r3, #0
 344 0130 A4D1     		bne	.L4
 361:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 345              		.loc 1 361 28 view .LVU123
 346 0132 099B     		ldr	r3, [sp, #36]
 347 0134 002B     		cmp	r3, #0
 348 0136 A1D1     		bne	.L4
 361:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 349              		.loc 1 361 62 discriminator 1 view .LVU124
 350 0138 937A     		ldrb	r3, [r2, #10]	@ zero_extendqisi2
 361:lvgl/src/lv_draw/lv_draw_img.c ****         _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, 
 351              		.loc 1 361 51 discriminator 1 view .LVU125
 352 013a 002B     		cmp	r3, #0
 353 013c 9ED1     		bne	.L4
 362:lvgl/src/lv_draw/lv_draw_img.c ****                       draw_dsc->blend_mode);
 354              		.loc 1 362 9 is_stmt 1 view .LVU126
 355 013e 937B     		ldrb	r3, [r2, #14]	@ zero_extendqisi2
 356 0140 0293     		str	r3, [sp, #8]
 357 0142 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 358 0144 0193     		str	r3, [sp, #4]
 359 0146 0123     		movs	r3, #1
 360 0148 0093     		str	r3, [sp]
 361 014a 0023     		movs	r3, #0
 362 014c 3246     		mov	r2, r6
 363 014e 1499     		ldr	r1, [sp, #80]
 364 0150 1C98     		ldr	r0, [sp, #112]
 365              	.LVL28:
 362:lvgl/src/lv_draw/lv_draw_img.c ****                       draw_dsc->blend_mode);
 366              		.loc 1 362 9 is_stmt 0 view .LVU127
 367 0152 FFF7FEFF 		bl	_lv_blend_map
 368              	.LVL29:
 369 0156 21E3     		b	.L1
 370              	.LVL30:
 371              	.L54:
 372              	.LBB158:
 385:lvgl/src/lv_draw/lv_draw_img.c **** 
 373              		.loc 1 385 17 view .LVU128
 374 0158 0223     		movs	r3, #2
 375 015a 0593     		str	r3, [sp, #20]
 376 015c 93E7     		b	.L6
ARM GAS  D:\Temp\ccEuVdRK.s 			page 21


 377              	.LVL31:
 378              	.L55:
 379              		.loc 1 409 92 view .LVU129
 380 015e 0123     		movs	r3, #1
 381              	.L7:
 382              		.loc 1 409 14 discriminator 6 view .LVU130
 383 0160 0493     		str	r3, [sp, #16]
 384              	.LVL32:
 410:lvgl/src/lv_draw/lv_draw_img.c **** #else
 411:lvgl/src/lv_draw/lv_draw_img.c ****         bool transform = false;
 412:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 413:lvgl/src/lv_draw/lv_draw_img.c ****         /*Simple ARGB image. Handle it as special case because it's very common*/
 414:lvgl/src/lv_draw/lv_draw_img.c ****         if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRAN
 385              		.loc 1 414 9 is_stmt 1 discriminator 6 view .LVU131
 386              		.loc 1 414 11 is_stmt 0 discriminator 6 view .LVU132
 387 0162 139A     		ldr	r2, [sp, #76]
 388 0164 3AB9     		cbnz	r2, .L8
 389              		.loc 1 414 32 discriminator 1 view .LVU133
 390 0166 33B9     		cbnz	r3, .L8
 391              		.loc 1 414 46 discriminator 2 view .LVU134
 392 0168 0B9B     		ldr	r3, [sp, #44]
 393              	.LVL33:
 394              		.loc 1 414 46 discriminator 2 view .LVU135
 395 016a 23B9     		cbnz	r3, .L8
 396              		.loc 1 414 72 discriminator 3 view .LVU136
 397 016c 069B     		ldr	r3, [sp, #24]
 398 016e 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 399              		.loc 1 414 61 discriminator 3 view .LVU137
 400 0170 0BB9     		cbnz	r3, .L8
 401              		.loc 1 414 103 discriminator 4 view .LVU138
 402 0172 099B     		ldr	r3, [sp, #36]
 403 0174 3BBB     		cbnz	r3, .L77
 404              	.L8:
 405              	.LBB112:
 415:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_GPU_STM32_DMA2D && LV_COLOR_DEPTH == 32
 416:lvgl/src/lv_draw/lv_draw_img.c ****             /*Blend ARGB images directly*/
 417:lvgl/src/lv_draw/lv_draw_img.c ****             if(lv_area_get_size(&draw_area) > 240) {
 418:lvgl/src/lv_draw/lv_draw_img.c ****                 int32_t disp_w = lv_area_get_width(disp_area);
 419:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_color_t * disp_buf = vdb->buf_act;
 420:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area.y1 + draw_area.x1;
 421:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_gpu_stm32_dma2d_blend(disp_buf_first, disp_w, (const lv_color_t *)map_buf_tmp, d
 422:lvgl/src/lv_draw/lv_draw_img.c ****                                          draw_area_h);
 423:lvgl/src/lv_draw/lv_draw_img.c ****                 return;
 424:lvgl/src/lv_draw/lv_draw_img.c ****             }
 425:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 426:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 427:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : 
 428:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 429:lvgl/src/lv_draw/lv_draw_img.c ****             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 430:lvgl/src/lv_draw/lv_draw_img.c **** 
 431:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t x;
 432:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t y;
 433:lvgl/src/lv_draw/lv_draw_img.c ****             for(y = 0; y < draw_area_h; y++) {
 434:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 435:lvgl/src/lv_draw/lv_draw_img.c ****                 for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 436:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 437:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_buf[px_i] = px_opa;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 22


 438:lvgl/src/lv_draw/lv_draw_img.c ****                     if(px_opa) {
 439:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 440:lvgl/src/lv_draw/lv_draw_img.c ****                         map2[px_i].full =  map_px[0];
 441:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 16
 442:lvgl/src/lv_draw/lv_draw_img.c ****                         map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 443:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 444:lvgl/src/lv_draw/lv_draw_img.c ****                         map2[px_i].full =  *((uint32_t *)map_px);
 445:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 446:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 447:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 448:lvgl/src/lv_draw/lv_draw_img.c ****                     map2[px_i].ch.alpha = 0xFF;
 449:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 450:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 451:lvgl/src/lv_draw/lv_draw_img.c **** 
 452:lvgl/src/lv_draw/lv_draw_img.c ****                 map_buf_tmp += map_w * px_size_byte;
 453:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 454:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 ++;
 455:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 456:lvgl/src/lv_draw/lv_draw_img.c ****                 else {
 457:lvgl/src/lv_draw/lv_draw_img.c ****                     _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED,
 458:lvgl/src/lv_draw/lv_draw_img.c **** 
 459:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y1 = blend_area.y2 + 1;
 460:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 461:lvgl/src/lv_draw/lv_draw_img.c **** 
 462:lvgl/src/lv_draw/lv_draw_img.c ****                     px_i = 0;
 463:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 464:lvgl/src/lv_draw/lv_draw_img.c ****             }
 465:lvgl/src/lv_draw/lv_draw_img.c ****             /*Flush the last part*/
 466:lvgl/src/lv_draw/lv_draw_img.c ****             if(blend_area.y1 != blend_area.y2) {
 467:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 468:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, dra
 469:lvgl/src/lv_draw/lv_draw_img.c ****             }
 470:lvgl/src/lv_draw/lv_draw_img.c **** 
 471:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_mem_buf_release(mask_buf);
 472:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_mem_buf_release(map2);
 473:lvgl/src/lv_draw/lv_draw_img.c ****         }
 474:lvgl/src/lv_draw/lv_draw_img.c ****         /*Most complicated case: transform or other mask or chroma keyed*/
 475:lvgl/src/lv_draw/lv_draw_img.c ****         else {
 476:lvgl/src/lv_draw/lv_draw_img.c ****             /*Build the image and a mask line-by-line*/
 477:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 406              		.loc 1 477 13 is_stmt 1 view .LVU139
 407              		.loc 1 477 43 is_stmt 0 view .LVU140
 408 0176 2046     		mov	r0, r4
 409 0178 FFF7FEFF 		bl	lv_disp_get_hor_res
 410              	.LVL34:
 411 017c 0446     		mov	r4, r0
 412              	.LVL35:
 413              		.loc 1 477 22 view .LVU141
 414 017e 1590     		str	r0, [sp, #84]
 415              	.LVL36:
 478:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get
 416              		.loc 1 478 13 is_stmt 1 view .LVU142
 417              		.loc 1 478 38 is_stmt 0 view .LVU143
 418 0180 36A8     		add	r0, sp, #216
 419              	.LVL37:
 420              		.loc 1 478 38 view .LVU144
 421 0182 FFF7FEFF 		bl	lv_area_get_size
ARM GAS  D:\Temp\ccEuVdRK.s 			page 23


 422              	.LVL38:
 423              		.loc 1 478 87 view .LVU145
 424 0186 A042     		cmp	r0, r4
 425 0188 40F29D80 		bls	.L78
 426              	.L18:
 427              	.LVL39:
 479:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 428              		.loc 1 479 13 is_stmt 1 discriminator 4 view .LVU146
 429              		.loc 1 479 33 is_stmt 0 discriminator 4 view .LVU147
 430 018c 159C     		ldr	r4, [sp, #84]
 431              	.LVL40:
 432              		.loc 1 479 33 discriminator 4 view .LVU148
 433 018e 6000     		lsls	r0, r4, #1
 434 0190 FFF7FEFF 		bl	_lv_mem_buf_get
 435              	.LVL41:
 436 0194 0790     		str	r0, [sp, #28]
 437              	.LVL42:
 480:lvgl/src/lv_draw/lv_draw_img.c ****             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 438              		.loc 1 480 13 is_stmt 1 discriminator 4 view .LVU149
 439              		.loc 1 480 35 is_stmt 0 discriminator 4 view .LVU150
 440 0196 2046     		mov	r0, r4
 441              	.LVL43:
 442              		.loc 1 480 35 discriminator 4 view .LVU151
 443 0198 FFF7FEFF 		bl	_lv_mem_buf_get
 444              	.LVL44:
 445 019c 8346     		mov	fp, r0
 446              	.LVL45:
 481:lvgl/src/lv_draw/lv_draw_img.c **** 
 482:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_IMG_TRANSFORM
 483:lvgl/src/lv_draw/lv_draw_img.c ****             lv_img_transform_dsc_t trans_dsc;
 447              		.loc 1 483 13 is_stmt 1 discriminator 4 view .LVU152
 484:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 448              		.loc 1 484 13 discriminator 4 view .LVU153
 449 019e 4C21     		movs	r1, #76
 450 01a0 23A8     		add	r0, sp, #140
 451              	.LVL46:
 452              		.loc 1 484 13 is_stmt 0 discriminator 4 view .LVU154
 453 01a2 FFF7FEFF 		bl	_lv_memset_00
 454              	.LVL47:
 485:lvgl/src/lv_draw/lv_draw_img.c ****             if(transform) {
 455              		.loc 1 485 13 is_stmt 1 discriminator 4 view .LVU155
 456              		.loc 1 485 15 is_stmt 0 discriminator 4 view .LVU156
 457 01a6 049B     		ldr	r3, [sp, #16]
 458 01a8 002B     		cmp	r3, #0
 459 01aa 00F0BA80 		beq	.L19
 460              	.LBB113:
 486:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 461              		.loc 1 486 17 is_stmt 1 view .LVU157
 462              	.LVL48:
 487:lvgl/src/lv_draw/lv_draw_img.c ****                 if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 463              		.loc 1 487 17 view .LVU158
 464              		.loc 1 487 19 is_stmt 0 view .LVU159
 465 01ae 099B     		ldr	r3, [sp, #36]
 466 01b0 002B     		cmp	r3, #0
 467 01b2 40F08D80 		bne	.L58
 488:lvgl/src/lv_draw/lv_draw_img.c ****                 else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 468              		.loc 1 488 22 is_stmt 1 view .LVU160
ARM GAS  D:\Temp\ccEuVdRK.s 			page 24


 469              		.loc 1 488 24 is_stmt 0 view .LVU161
 470 01b6 0B9B     		ldr	r3, [sp, #44]
 471 01b8 002B     		cmp	r3, #0
 472 01ba 40F0DD80 		bne	.L59
 486:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 473              		.loc 1 486 29 view .LVU162
 474 01be 0421     		movs	r1, #4
 475 01c0 87E0     		b	.L20
 476              	.LVL49:
 477              	.L56:
 486:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 478              		.loc 1 486 29 view .LVU163
 479              	.LBE113:
 480              	.LBE112:
 409:lvgl/src/lv_draw/lv_draw_img.c **** #else
 481              		.loc 1 409 92 view .LVU164
 482 01c2 0023     		movs	r3, #0
 483 01c4 CCE7     		b	.L7
 484              	.LVL50:
 485              	.L77:
 486              	.LBB148:
 426:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : 
 487              		.loc 1 426 13 is_stmt 1 view .LVU165
 426:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : 
 488              		.loc 1 426 43 is_stmt 0 view .LVU166
 489 01c6 2046     		mov	r0, r4
 490 01c8 FFF7FEFF 		bl	lv_disp_get_hor_res
 491              	.LVL51:
 492 01cc 0446     		mov	r4, r0
 493              	.LVL52:
 426:lvgl/src/lv_draw/lv_draw_img.c ****             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : 
 494              		.loc 1 426 22 view .LVU167
 495 01ce 0746     		mov	r7, r0
 496              	.LVL53:
 427:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 497              		.loc 1 427 13 is_stmt 1 view .LVU168
 427:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 498              		.loc 1 427 38 is_stmt 0 view .LVU169
 499 01d0 36A8     		add	r0, sp, #216
 500              	.LVL54:
 427:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 501              		.loc 1 427 38 view .LVU170
 502 01d2 FFF7FEFF 		bl	lv_area_get_size
 503              	.LVL55:
 427:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 504              		.loc 1 427 98 view .LVU171
 505 01d6 A042     		cmp	r0, r4
 506 01d8 10D9     		bls	.L79
 507              	.L9:
 508              	.LVL56:
 428:lvgl/src/lv_draw/lv_draw_img.c ****             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 509              		.loc 1 428 13 is_stmt 1 discriminator 4 view .LVU172
 428:lvgl/src/lv_draw/lv_draw_img.c ****             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 510              		.loc 1 428 33 is_stmt 0 discriminator 4 view .LVU173
 511 01da 7800     		lsls	r0, r7, #1
 512 01dc FFF7FEFF 		bl	_lv_mem_buf_get
 513              	.LVL57:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 25


 514 01e0 0546     		mov	r5, r0
 515              	.LVL58:
 429:lvgl/src/lv_draw/lv_draw_img.c **** 
 516              		.loc 1 429 13 is_stmt 1 discriminator 4 view .LVU174
 429:lvgl/src/lv_draw/lv_draw_img.c **** 
 517              		.loc 1 429 35 is_stmt 0 discriminator 4 view .LVU175
 518 01e2 3846     		mov	r0, r7
 519              	.LVL59:
 429:lvgl/src/lv_draw/lv_draw_img.c **** 
 520              		.loc 1 429 35 discriminator 4 view .LVU176
 521 01e4 FFF7FEFF 		bl	_lv_mem_buf_get
 522              	.LVL60:
 523 01e8 0446     		mov	r4, r0
 524              	.LVL61:
 431:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t y;
 525              		.loc 1 431 13 is_stmt 1 discriminator 4 view .LVU177
 432:lvgl/src/lv_draw/lv_draw_img.c ****             for(y = 0; y < draw_area_h; y++) {
 526              		.loc 1 432 13 discriminator 4 view .LVU178
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 527              		.loc 1 433 13 discriminator 4 view .LVU179
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 528              		.loc 1 433 19 is_stmt 0 discriminator 4 view .LVU180
 529 01ea 0026     		movs	r6, #0
 530              	.LVL62:
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 531              		.loc 1 433 19 discriminator 4 view .LVU181
 532              	.LBE148:
 395:lvgl/src/lv_draw/lv_draw_img.c **** 
 533              		.loc 1 395 18 discriminator 4 view .LVU182
 534 01ec 3246     		mov	r2, r6
 535 01ee DDF83890 		ldr	r9, [sp, #56]
 536 01f2 DDF81480 		ldr	r8, [sp, #20]
 537 01f6 DDF858B0 		ldr	fp, [sp, #88]
 538              	.LBB152:
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 539              		.loc 1 433 13 discriminator 4 view .LVU183
 540 01fa 2AE0     		b	.L10
 541              	.LVL63:
 542              	.L79:
 427:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 543              		.loc 1 427 100 discriminator 1 view .LVU184
 544 01fc 36A8     		add	r0, sp, #216
 545 01fe FFF7FEFF 		bl	lv_area_get_size
 546              	.LVL64:
 547 0202 0746     		mov	r7, r0
 548 0204 E9E7     		b	.L9
 549              	.LVL65:
 550              	.L11:
 435:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 551              		.loc 1 435 46 discriminator 2 view .LVU185
 552 0206 0131     		adds	r1, r1, #1
 553              	.LVL66:
 435:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 554              		.loc 1 435 57 discriminator 2 view .LVU186
 555 0208 4344     		add	r3, r3, r8
 556              	.LVL67:
 435:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
ARM GAS  D:\Temp\ccEuVdRK.s 			page 26


 557              		.loc 1 435 78 discriminator 2 view .LVU187
 558 020a 0132     		adds	r2, r2, #1
 559              	.LVL68:
 560              	.L15:
 435:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 561              		.loc 1 435 17 discriminator 1 view .LVU188
 562 020c 8A45     		cmp	r10, r1
 563 020e 0BDD     		ble	.L80
 564              	.LBB149:
 436:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_buf[px_i] = px_opa;
 565              		.loc 1 436 21 is_stmt 1 view .LVU189
 436:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_buf[px_i] = px_opa;
 566              		.loc 1 436 30 is_stmt 0 view .LVU190
 567 0210 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 568              	.LVL69:
 437:lvgl/src/lv_draw/lv_draw_img.c ****                     if(px_opa) {
 569              		.loc 1 437 21 is_stmt 1 view .LVU191
 437:lvgl/src/lv_draw/lv_draw_img.c ****                     if(px_opa) {
 570              		.loc 1 437 36 is_stmt 0 view .LVU192
 571 0212 A054     		strb	r0, [r4, r2]
 438:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 572              		.loc 1 438 21 is_stmt 1 view .LVU193
 438:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
 573              		.loc 1 438 23 is_stmt 0 view .LVU194
 574 0214 0028     		cmp	r0, #0
 575 0216 F6D0     		beq	.L11
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 576              		.loc 1 442 25 is_stmt 1 view .LVU195
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 577              		.loc 1 442 50 is_stmt 0 view .LVU196
 578 0218 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 579              	.LVL70:
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 580              		.loc 1 442 63 view .LVU197
 581 021a 93F801C0 		ldrb	ip, [r3, #1]	@ zero_extendqisi2
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 582              		.loc 1 442 54 view .LVU198
 583 021e 00EB0C20 		add	r0, r0, ip, lsl #8
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 584              		.loc 1 442 41 view .LVU199
 585 0222 25F81200 		strh	r0, [r5, r2, lsl #1]	@ movhi
 586              	.LVL71:
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 587              		.loc 1 442 41 view .LVU200
 588 0226 EEE7     		b	.L11
 589              	.L80:
 442:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 590              		.loc 1 442 41 view .LVU201
 591              	.LBE149:
 452:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 592              		.loc 1 452 17 is_stmt 1 view .LVU202
 452:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 593              		.loc 1 452 29 is_stmt 0 view .LVU203
 594 0228 179B     		ldr	r3, [sp, #92]
 595              	.LVL72:
 452:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 596              		.loc 1 452 29 view .LVU204
ARM GAS  D:\Temp\ccEuVdRK.s 			page 27


 597 022a 1899     		ldr	r1, [sp, #96]
 598              	.LVL73:
 452:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 599              		.loc 1 452 29 view .LVU205
 600 022c 01FB0399 		mla	r9, r1, r3, r9
 601              	.LVL74:
 453:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 ++;
 602              		.loc 1 453 17 is_stmt 1 view .LVU206
 603              	.LBB150:
 604              	.LBI150:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 605              		.loc 2 107 26 view .LVU207
 606              	.LBB151:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 607              		.loc 2 109 5 view .LVU208
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 608              		.loc 2 109 31 is_stmt 0 view .LVU209
 609 0230 BDF8DC30 		ldrh	r3, [sp, #220]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 610              		.loc 2 109 44 view .LVU210
 611 0234 BDF8D810 		ldrh	r1, [sp, #216]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 612              		.loc 2 109 36 view .LVU211
 613 0238 5B1A     		subs	r3, r3, r1
 614 023a 9BB2     		uxth	r3, r3
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 615              		.loc 2 109 49 view .LVU212
 616 023c 0133     		adds	r3, r3, #1
 617              	.LVL75:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 618              		.loc 2 109 49 view .LVU213
 619              	.LBE151:
 620              	.LBE150:
 453:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 ++;
 621              		.loc 1 453 25 view .LVU214
 622 023e 02FA83F3 		sxtah	r3, r2, r3
 453:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 ++;
 623              		.loc 1 453 19 view .LVU215
 624 0242 BB42     		cmp	r3, r7
 625 0244 0AD2     		bcs	.L13
 454:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 626              		.loc 1 454 21 is_stmt 1 view .LVU216
 454:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 627              		.loc 1 454 31 is_stmt 0 view .LVU217
 628 0246 BDF98A30 		ldrsh	r3, [sp, #138]
 454:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 629              		.loc 1 454 35 view .LVU218
 630 024a 0133     		adds	r3, r3, #1
 631 024c ADF88A30 		strh	r3, [sp, #138]	@ movhi
 632              	.LVL76:
 633              	.L14:
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 634              		.loc 1 433 42 discriminator 2 view .LVU219
 635 0250 0136     		adds	r6, r6, #1
 636              	.LVL77:
 637              	.L10:
 433:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 28


 638              		.loc 1 433 13 discriminator 1 view .LVU220
 639 0252 B345     		cmp	fp, r6
 640 0254 19DD     		ble	.L81
 434:lvgl/src/lv_draw/lv_draw_img.c ****                 for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 641              		.loc 1 434 24 view .LVU221
 642 0256 4B46     		mov	r3, r9
 435:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 643              		.loc 1 435 23 view .LVU222
 644 0258 0021     		movs	r1, #0
 645 025a D7E7     		b	.L15
 646              	.L13:
 457:lvgl/src/lv_draw/lv_draw_img.c **** 
 647              		.loc 1 457 21 is_stmt 1 view .LVU223
 648 025c 069A     		ldr	r2, [sp, #24]
 649              	.LVL78:
 457:lvgl/src/lv_draw/lv_draw_img.c **** 
 650              		.loc 1 457 21 is_stmt 0 view .LVU224
 651 025e 937B     		ldrb	r3, [r2, #14]	@ zero_extendqisi2
 652 0260 0293     		str	r3, [sp, #8]
 653 0262 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 654 0264 0193     		str	r3, [sp, #4]
 655 0266 0223     		movs	r3, #2
 656 0268 0093     		str	r3, [sp]
 657 026a 2346     		mov	r3, r4
 658 026c 2A46     		mov	r2, r5
 659 026e 21A9     		add	r1, sp, #132
 660 0270 1C98     		ldr	r0, [sp, #112]
 661 0272 FFF7FEFF 		bl	_lv_blend_map
 662              	.LVL79:
 459:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 663              		.loc 1 459 21 is_stmt 1 view .LVU225
 459:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 664              		.loc 1 459 47 is_stmt 0 view .LVU226
 665 0276 BDF88A30 		ldrh	r3, [sp, #138]
 459:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 666              		.loc 1 459 51 view .LVU227
 667 027a 0133     		adds	r3, r3, #1
 668 027c 1BB2     		sxth	r3, r3
 459:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 669              		.loc 1 459 35 view .LVU228
 670 027e ADF88630 		strh	r3, [sp, #134]	@ movhi
 460:lvgl/src/lv_draw/lv_draw_img.c **** 
 671              		.loc 1 460 21 is_stmt 1 view .LVU229
 460:lvgl/src/lv_draw/lv_draw_img.c **** 
 672              		.loc 1 460 35 is_stmt 0 view .LVU230
 673 0282 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 462:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 674              		.loc 1 462 21 is_stmt 1 view .LVU231
 675              	.LVL80:
 462:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 676              		.loc 1 462 26 is_stmt 0 view .LVU232
 677 0286 0022     		movs	r2, #0
 678 0288 E2E7     		b	.L14
 679              	.LVL81:
 680              	.L81:
 466:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 681              		.loc 1 466 13 is_stmt 1 view .LVU233
ARM GAS  D:\Temp\ccEuVdRK.s 			page 29


 466:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 682              		.loc 1 466 26 is_stmt 0 view .LVU234
 683 028a BDF98620 		ldrsh	r2, [sp, #134]
 684              	.LVL82:
 466:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 685              		.loc 1 466 43 view .LVU235
 686 028e BDF98A30 		ldrsh	r3, [sp, #138]
 466:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 687              		.loc 1 466 15 view .LVU236
 688 0292 9A42     		cmp	r2, r3
 689 0294 06D1     		bne	.L82
 690              	.L16:
 471:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_mem_buf_release(map2);
 691              		.loc 1 471 13 is_stmt 1 view .LVU237
 692 0296 2046     		mov	r0, r4
 693 0298 FFF7FEFF 		bl	_lv_mem_buf_release
 694              	.LVL83:
 472:lvgl/src/lv_draw/lv_draw_img.c ****         }
 695              		.loc 1 472 13 view .LVU238
 696 029c 2846     		mov	r0, r5
 697 029e FFF7FEFF 		bl	_lv_mem_buf_release
 698              	.LVL84:
 699              	.LBE152:
 414:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_GPU_STM32_DMA2D && LV_COLOR_DEPTH == 32
 700              		.loc 1 414 118 is_stmt 0 view .LVU239
 701 02a2 7BE2     		b	.L1
 702              	.L82:
 703              	.LBB153:
 467:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, dra
 704              		.loc 1 467 17 is_stmt 1 view .LVU240
 467:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, dra
 705              		.loc 1 467 30 is_stmt 0 view .LVU241
 706 02a4 013B     		subs	r3, r3, #1
 707 02a6 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 468:lvgl/src/lv_draw/lv_draw_img.c ****             }
 708              		.loc 1 468 17 is_stmt 1 view .LVU242
 709 02aa 069A     		ldr	r2, [sp, #24]
 710 02ac 937B     		ldrb	r3, [r2, #14]	@ zero_extendqisi2
 711 02ae 0293     		str	r3, [sp, #8]
 712 02b0 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 713 02b2 0193     		str	r3, [sp, #4]
 714 02b4 0223     		movs	r3, #2
 715 02b6 0093     		str	r3, [sp]
 716 02b8 2346     		mov	r3, r4
 717 02ba 2A46     		mov	r2, r5
 718 02bc 21A9     		add	r1, sp, #132
 719 02be 1C98     		ldr	r0, [sp, #112]
 720 02c0 FFF7FEFF 		bl	_lv_blend_map
 721              	.LVL85:
 722 02c4 E7E7     		b	.L16
 723              	.LVL86:
 724              	.L78:
 468:lvgl/src/lv_draw/lv_draw_img.c ****             }
 725              		.loc 1 468 17 is_stmt 0 view .LVU243
 726              	.LBE153:
 727              	.LBB154:
 478:lvgl/src/lv_draw/lv_draw_img.c ****             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
ARM GAS  D:\Temp\ccEuVdRK.s 			page 30


 728              		.loc 1 478 89 discriminator 1 view .LVU244
 729 02c6 36A8     		add	r0, sp, #216
 730 02c8 FFF7FEFF 		bl	lv_area_get_size
 731              	.LVL87:
 732 02cc 1590     		str	r0, [sp, #84]
 733 02ce 5DE7     		b	.L18
 734              	.LVL88:
 735              	.L58:
 736              	.LBB116:
 487:lvgl/src/lv_draw/lv_draw_img.c ****                 else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 737              		.loc 1 487 35 view .LVU245
 738 02d0 0521     		movs	r1, #5
 739              	.L20:
 740              	.LVL89:
 489:lvgl/src/lv_draw/lv_draw_img.c **** 
 490:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.angle = draw_dsc->angle;
 741              		.loc 1 490 17 is_stmt 1 view .LVU246
 742              		.loc 1 490 47 is_stmt 0 view .LVU247
 743 02d2 0698     		ldr	r0, [sp, #24]
 744 02d4 B0F90230 		ldrsh	r3, [r0, #2]
 745              		.loc 1 490 37 view .LVU248
 746 02d8 ADF89830 		strh	r3, [sp, #152]	@ movhi
 491:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.zoom = draw_dsc->zoom;
 747              		.loc 1 491 17 is_stmt 1 view .LVU249
 748              		.loc 1 491 46 is_stmt 0 view .LVU250
 749 02dc 0389     		ldrh	r3, [r0, #8]
 750              		.loc 1 491 36 view .LVU251
 751 02de ADF89A30 		strh	r3, [sp, #154]	@ movhi
 492:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.src = map_p;
 752              		.loc 1 492 17 is_stmt 1 view .LVU252
 753              		.loc 1 492 35 is_stmt 0 view .LVU253
 754 02e2 2396     		str	r6, [sp, #140]
 493:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.src_w = map_w;
 755              		.loc 1 493 17 is_stmt 1 view .LVU254
 756              		.loc 1 493 37 is_stmt 0 view .LVU255
 757 02e4 ADF89050 		strh	r5, [sp, #144]	@ movhi
 494:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 758              		.loc 1 494 17 is_stmt 1 view .LVU256
 759              	.LVL90:
 760              	.LBB114:
 761              	.LBI114:
 117:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 762              		.loc 2 117 26 view .LVU257
 763              	.LBB115:
 764              		.loc 2 119 5 view .LVU258
 765              		.loc 2 119 31 is_stmt 0 view .LVU259
 766 02e8 149A     		ldr	r2, [sp, #80]
 767 02ea D388     		ldrh	r3, [r2, #6]
 768              		.loc 2 119 44 view .LVU260
 769 02ec 5288     		ldrh	r2, [r2, #2]
 770              		.loc 2 119 36 view .LVU261
 771 02ee 9B1A     		subs	r3, r3, r2
 772 02f0 9BB2     		uxth	r3, r3
 773              		.loc 2 119 49 view .LVU262
 774 02f2 0133     		adds	r3, r3, #1
 775              	.LVL91:
 776              		.loc 2 119 49 view .LVU263
ARM GAS  D:\Temp\ccEuVdRK.s 			page 31


 777              	.LBE115:
 778              	.LBE114:
 779              		.loc 1 494 37 view .LVU264
 780 02f4 ADF89230 		strh	r3, [sp, #146]	@ movhi
 781              		.loc 1 494 68 is_stmt 1 view .LVU265
 495:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.cf = cf;
 782              		.loc 1 495 17 view .LVU266
 783              		.loc 1 495 34 is_stmt 0 view .LVU267
 784 02f8 8DF89E10 		strb	r1, [sp, #158]
 496:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 785              		.loc 1 496 17 is_stmt 1 view .LVU268
 786              		.loc 1 496 56 is_stmt 0 view .LVU269
 787 02fc B0F90430 		ldrsh	r3, [r0, #4]
 788              		.loc 1 496 39 view .LVU270
 789 0300 ADF89430 		strh	r3, [sp, #148]	@ movhi
 497:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 790              		.loc 1 497 17 is_stmt 1 view .LVU271
 791              		.loc 1 497 56 is_stmt 0 view .LVU272
 792 0304 B0F90630 		ldrsh	r3, [r0, #6]
 793              		.loc 1 497 39 view .LVU273
 794 0308 ADF89630 		strh	r3, [sp, #150]	@ movhi
 498:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.color = draw_dsc->recolor;
 795              		.loc 1 498 17 is_stmt 1 view .LVU274
 796              		.loc 1 498 37 is_stmt 0 view .LVU275
 797 030c 8389     		ldrh	r3, [r0, #12]
 798 030e ADF89C30 		strh	r3, [sp, #156]	@ movhi
 499:lvgl/src/lv_draw/lv_draw_img.c ****                 trans_dsc.cfg.antialias = draw_dsc->antialias;
 799              		.loc 1 499 17 is_stmt 1 view .LVU276
 800              		.loc 1 499 51 is_stmt 0 view .LVU277
 801 0312 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 802 0314 C3F30003 		ubfx	r3, r3, #0, #1
 803              		.loc 1 499 41 view .LVU278
 804 0318 8DF89F30 		strb	r3, [sp, #159]
 500:lvgl/src/lv_draw/lv_draw_img.c **** 
 501:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_img_buf_transform_init(&trans_dsc);
 805              		.loc 1 501 17 is_stmt 1 view .LVU279
 806 031c 23A8     		add	r0, sp, #140
 807 031e FFF7FEFF 		bl	_lv_img_buf_transform_init
 808              	.LVL92:
 809              	.L19:
 810              		.loc 1 501 17 is_stmt 0 view .LVU280
 811              	.LBE116:
 502:lvgl/src/lv_draw/lv_draw_img.c ****             }
 503:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 504:lvgl/src/lv_draw/lv_draw_img.c ****             uint16_t recolor_premult[3] = {0};
 812              		.loc 1 504 13 is_stmt 1 view .LVU281
 813              		.loc 1 504 22 is_stmt 0 view .LVU282
 814 0322 0023     		movs	r3, #0
 815 0324 1F93     		str	r3, [sp, #124]
 816 0326 ADF88030 		strh	r3, [sp, #128]	@ movhi
 505:lvgl/src/lv_draw/lv_draw_img.c ****             lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 817              		.loc 1 505 13 is_stmt 1 view .LVU283
 818              		.loc 1 505 54 is_stmt 0 view .LVU284
 819 032a 0699     		ldr	r1, [sp, #24]
 820 032c 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 821              		.loc 1 505 22 view .LVU285
 822 032e DA43     		mvns	r2, r3
ARM GAS  D:\Temp\ccEuVdRK.s 			page 32


 823 0330 D2B2     		uxtb	r2, r2
 824 0332 0F92     		str	r2, [sp, #60]
 825              	.LVL93:
 506:lvgl/src/lv_draw/lv_draw_img.c ****             if(draw_dsc->recolor_opa != 0) {
 826              		.loc 1 506 13 is_stmt 1 view .LVU286
 827              		.loc 1 506 15 is_stmt 0 view .LVU287
 828 0334 93B1     		cbz	r3, .L21
 507:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
 829              		.loc 1 507 17 is_stmt 1 view .LVU288
 830 0336 8A89     		ldrh	r2, [r1, #12]
 831              	.LVL94:
 832              	.LBB117:
 833              	.LBI117:
 834              		.file 4 "lvgl/src/lv_draw/../lv_misc/lv_color.h"
   1:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**
   2:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *
   4:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  */
   5:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
   6:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
   9:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/lv_draw/../lv_misc/lv_color.h **** extern "C" {
  11:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
  12:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  13:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*********************
  14:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *********************/
  16:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #include "lv_math.h"
  18:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  19:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*Error checking*/
  20:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  21:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  22:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
  23:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  24:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH != 32 && LV_COLOR_SCREEN_TRANSP != 0
  25:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #error "LV_COLOR_SCREEN_TRANSP requires LV_COLOR_DEPTH == 32. Set it in lv_conf.h"
  26:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
  27:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  28:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
  29:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  30:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
  31:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  32:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #include <stdint.h>
  33:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  34:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*********************
  35:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *      DEFINES
  36:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *********************/
  37:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_WHITE   LV_COLOR_MAKE(0xFF, 0xFF, 0xFF)
  38:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_SILVER  LV_COLOR_MAKE(0xC0, 0xC0, 0xC0)
  39:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_GRAY    LV_COLOR_MAKE(0x80, 0x80, 0x80)
  40:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_BLACK   LV_COLOR_MAKE(0x00, 0x00, 0x00)
  41:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_RED     LV_COLOR_MAKE(0xFF, 0x00, 0x00)
  42:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_MAROON  LV_COLOR_MAKE(0x80, 0x00, 0x00)
  43:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_YELLOW  LV_COLOR_MAKE(0xFF, 0xFF, 0x00)
ARM GAS  D:\Temp\ccEuVdRK.s 			page 33


  44:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_OLIVE   LV_COLOR_MAKE(0x80, 0x80, 0x00)
  45:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_LIME    LV_COLOR_MAKE(0x00, 0xFF, 0x00)
  46:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_GREEN   LV_COLOR_MAKE(0x00, 0x80, 0x00)
  47:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_CYAN    LV_COLOR_MAKE(0x00, 0xFF, 0xFF)
  48:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_AQUA    LV_COLOR_CYAN
  49:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_TEAL    LV_COLOR_MAKE(0x00, 0x80, 0x80)
  50:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_BLUE    LV_COLOR_MAKE(0x00, 0x00, 0xFF)
  51:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_NAVY    LV_COLOR_MAKE(0x00, 0x00, 0x80)
  52:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_MAGENTA LV_COLOR_MAKE(0xFF, 0x00, 0xFF)
  53:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_PURPLE  LV_COLOR_MAKE(0x80, 0x00, 0x80)
  54:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_ORANGE  LV_COLOR_MAKE(0xFF, 0xA5, 0x00)
  55:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  56:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**
  57:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Opacity percentages.
  58:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  */
  59:lvgl/src/lv_draw/../lv_misc/lv_color.h **** enum {
  60:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  61:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_0      = 0,
  62:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_10     = 25,
  63:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_20     = 51,
  64:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_30     = 76,
  65:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_40     = 102,
  66:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_50     = 127,
  67:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_60     = 153,
  68:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_70     = 178,
  69:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_80     = 204,
  70:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_90     = 229,
  71:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_100    = 255,
  72:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_OPA_COVER  = 255,
  73:lvgl/src/lv_draw/../lv_misc/lv_color.h **** };
  74:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  75:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  76:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  77:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  78:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  79:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_SIZE 8
  80:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  81:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_SIZE 8
  82:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  83:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_SIZE 16
  84:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  85:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_SIZE 32
  86:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
  87:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  88:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
  89:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
  90:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /* Adjust color mix functions rounding.
  91:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * GPUs might calculate color mix (blending) differently.
  92:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Should be in range of 0..254
  93:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * 0: no adjustment, get the integer part of the result (round down)
  94:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * 64: round up from x.75
  95:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * 128: round up from half
  96:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * 192: round up from x.25
  97:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * 254: round up */
  98:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #ifndef LV_COLOR_MIX_ROUND_OFS
  99:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 32
 100:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_MIX_ROUND_OFS 0
ARM GAS  D:\Temp\ccEuVdRK.s 			page 34


 101:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 102:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define LV_COLOR_MIX_ROUND_OFS 128
 103:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 104:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 105:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 106:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*---------------------------------------
 107:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Macros for all existing color depths
 108:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * to set/get values of the color channels
 109:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *------------------------------------------*/
 110:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 111:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 112:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 113:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 114:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 115:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 116:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 117:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 118:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 119:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 120:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 121:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 122:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 123:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 124:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 125:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 126:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 127:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 128:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 129:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 130:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 131:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 132:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 133:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 134:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 135:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 136:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 137:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 138:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 139:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 140:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 141:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 142:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 143:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 144:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 145:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 146:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 147:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 148:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 149:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 150:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 151:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 152:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 153:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 154:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 155:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 156:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 157:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 35


 158:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*---------------------------------------
 159:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Macros for the current color depth
 160:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * to set/get values of the color channels
 161:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *------------------------------------------*/
 162:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 163:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R(c, v) LV_COLOR_SET_R1(c,v)
 164:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G(c, v) LV_COLOR_SET_G1(c,v)
 165:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B(c, v) LV_COLOR_SET_B1(c,v)
 166:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A(c, v) LV_COLOR_SET_A1(c,v)
 167:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 168:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R(c) LV_COLOR_GET_R1(c)
 169:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G(c) LV_COLOR_GET_G1(c)
 170:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B(c) LV_COLOR_GET_B1(c)
 171:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A(c) LV_COLOR_GET_A1(c)
 172:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 173:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 174:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R(c, v) LV_COLOR_SET_R8(c,v)
 175:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G(c, v) LV_COLOR_SET_G8(c,v)
 176:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B(c, v) LV_COLOR_SET_B8(c,v)
 177:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A(c, v) LV_COLOR_SET_A8(c,v)
 178:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 179:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R(c) LV_COLOR_GET_R8(c)
 180:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G(c) LV_COLOR_GET_G8(c)
 181:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B(c) LV_COLOR_GET_B8(c)
 182:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A(c) LV_COLOR_GET_A8(c)
 183:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 184:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 185:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R(c, v) LV_COLOR_SET_R16(c,v)
 186:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G(c, v) LV_COLOR_SET_G16(c,v)
 187:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B(c, v) LV_COLOR_SET_B16(c,v)
 188:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A(c, v) LV_COLOR_SET_A16(c,v)
 189:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 190:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R(c) LV_COLOR_GET_R16(c)
 191:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G(c) LV_COLOR_GET_G16(c)
 192:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B(c) LV_COLOR_GET_B16(c)
 193:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A(c) LV_COLOR_GET_A16(c)
 194:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 195:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 196:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_R(c, v) LV_COLOR_SET_R32(c,v)
 197:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_G(c, v) LV_COLOR_SET_G32(c,v)
 198:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_B(c, v) LV_COLOR_SET_B32(c,v)
 199:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_SET_A(c, v) LV_COLOR_SET_A32(c,v)
 200:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 201:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_R(c) LV_COLOR_GET_R32(c)
 202:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_G(c) LV_COLOR_GET_G32(c)
 203:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_B(c) LV_COLOR_GET_B32(c)
 204:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # define LV_COLOR_GET_A(c) LV_COLOR_GET_A32(c)
 205:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 206:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 207:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**********************
 208:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *      TYPEDEFS
 209:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  **********************/
 210:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 211:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef union {
 212:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list */
 213:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     union {
 214:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t blue : 1;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 36


 215:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t green : 1;
 216:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t red : 1;
 217:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     } ch;
 218:lvgl/src/lv_draw/../lv_misc/lv_color.h **** } lv_color1_t;
 219:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 220:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef union {
 221:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     struct {
 222:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t blue : 2;
 223:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t green : 3;
 224:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t red : 3;
 225:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     } ch;
 226:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint8_t full;
 227:lvgl/src/lv_draw/../lv_misc/lv_color.h **** } lv_color8_t;
 228:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 229:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef union {
 230:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     struct {
 231:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 232:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t blue : 5;
 233:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t green : 6;
 234:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t red : 5;
 235:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 236:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t green_h : 3;
 237:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t red : 5;
 238:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t blue : 5;
 239:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint16_t green_l : 3;
 240:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 241:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     } ch;
 242:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint16_t full;
 243:lvgl/src/lv_draw/../lv_misc/lv_color.h **** } lv_color16_t;
 244:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 245:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef union {
 246:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     struct {
 247:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t blue;
 248:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t green;
 249:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t red;
 250:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         uint8_t alpha;
 251:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     } ch;
 252:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint32_t full;
 253:lvgl/src/lv_draw/../lv_misc/lv_color.h **** } lv_color32_t;
 254:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 255:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 256:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef uint8_t lv_color_int_t;
 257:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef lv_color1_t lv_color_t;
 258:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER {0x00}
 259:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 260:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef uint8_t lv_color_int_t;
 261:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef lv_color8_t lv_color_t;
 262:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER {{0x00, 0x00, 0x00}}
 263:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 264:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef uint16_t lv_color_int_t;
 265:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef lv_color16_t lv_color_t;
 266:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # if LV_COLOR_16_SWAP == 0
 267:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #  define _LV_COLOR_ZERO_INITIALIZER {{0x00, 0x00, 0x00}}
 268:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # else
 269:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #  define _LV_COLOR_ZERO_INITIALIZER {{0x00, 0x00, 0x00, 0x00}}
 270:lvgl/src/lv_draw/../lv_misc/lv_color.h **** # endif
 271:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
ARM GAS  D:\Temp\ccEuVdRK.s 			page 37


 272:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef uint32_t lv_color_int_t;
 273:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef lv_color32_t lv_color_t;
 274:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER {{0x00, 0x00, 0x00, 0x00}}
 275:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 276:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
 277:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 278:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 279:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef struct {
 280:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint16_t h;
 281:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint8_t s;
 282:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     uint8_t v;
 283:lvgl/src/lv_draw/../lv_misc/lv_color.h **** } lv_color_hsv_t;
 284:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 285:lvgl/src/lv_draw/../lv_misc/lv_color.h **** //! @cond Doxygen_Suppress
 286:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 287:lvgl/src/lv_draw/../lv_misc/lv_color.h **** typedef uint8_t lv_opa_t;
 288:lvgl/src/lv_draw/../lv_misc/lv_color.h **** //! @endcond
 289:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 290:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**********************
 291:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * GLOBAL PROTOTYPES
 292:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  **********************/
 293:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 294:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /*In color conversations:
 295:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 296:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 297:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *         8 bit Red has 3 bits
 298:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *        ----------------------
 299:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 300:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *
 301:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 302:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 303:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *        16 bit Red has 5 bits
 304:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *        ----------------------
 305:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 306:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  */
 307:lvgl/src/lv_draw/../lv_misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 308:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 309:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 310:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return color.full;
 311:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 312:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 313:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 1;
 314:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
 315:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else {
 316:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0;
 317:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
 318:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 319:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
 320:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 1;
 321:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
 322:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else {
 323:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0;
 324:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
 325:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 326:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 327:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 1;
 328:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 38


 329:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else {
 330:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0;
 331:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     }
 332:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 333:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 334:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 335:lvgl/src/lv_draw/../lv_misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 336:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 337:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 338:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if(color.full == 0)
 339:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0;
 340:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else
 341:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0xFF;
 342:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 343:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return color.full;
 344:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 345:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color8_t ret;
 346:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /* 5 - 3  = 2*/
 347:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /* 6 - 3  = 3*/
 348:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /* 5 - 2  = 3*/
 349:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 350:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 351:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color8_t ret;
 352:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /* 8 - 3  = 5*/
 353:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /* 8 - 3  = 5*/
 354:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /* 8 - 2  = 6*/
 355:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 356:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 357:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 358:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 359:lvgl/src/lv_draw/../lv_misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 360:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 361:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 362:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if(color.full == 0)
 363:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0;
 364:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else
 365:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0xFFFF;
 366:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 367:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color16_t ret;
 368:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 369:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 370:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 371:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 372:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 373:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return color.full;
 374:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 375:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color16_t ret;
 376:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /* 8 - 5  = 3*/
 377:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /* 8 - 6  = 2*/
 378:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /* 8 - 5  = 3*/
 379:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 380:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 381:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 382:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 383:lvgl/src/lv_draw/../lv_misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 384:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 385:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
ARM GAS  D:\Temp\ccEuVdRK.s 			page 39


 386:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     if(color.full == 0)
 387:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0xFF000000;
 388:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     else
 389:lvgl/src/lv_draw/../lv_misc/lv_color.h ****         return 0xFFFFFFFF;
 390:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 391:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color32_t ret;
 392:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 393:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 394:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 395:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 396:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 397:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 398:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /**
 399:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * The floating point math for conversion is:
 400:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 401:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * The faster integer math for conversion is:
 402:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 403:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 404:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *
 405:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 406:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *
 407:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 408:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 409:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       0           8      7        7       255
 410:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       1          16     14        7       255
 411:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       2          32     28        7       255
 412:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       3          65     25        3       255
 413:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       4         131     19        1       255
 414:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       5         263      7        0       255
 415:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *
 416:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 417:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 418:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       0           4      3        3       255
 419:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       1           8      6        3       255
 420:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       2          16     12        3       255
 421:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       3          32     24        3       255
 422:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       4          64     48        3       255
 423:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       5         129     33        1       255
 424:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      *       6         259      3        0       255
 425:lvgl/src/lv_draw/../lv_misc/lv_color.h ****      */
 426:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 427:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color32_t ret;
 428:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 429:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 430:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 431:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 432:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret.full;
 433:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 434:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return color.full;
 435:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 436:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 437:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 438:lvgl/src/lv_draw/../lv_misc/lv_color.h **** //! @cond Doxygen_Suppress
 439:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 440:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**
 441:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Mix two colors with a given ratio.
 442:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
ARM GAS  D:\Temp\ccEuVdRK.s 			page 40


 443:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param c2 the second color to mix (usually the background)
 444:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 445:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @return the mixed color
 446:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  */
 447:lvgl/src/lv_draw/../lv_misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 448:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 449:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color_t ret;
 450:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 451:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 452:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 453:lvgl/src/lv_draw/../lv_misc/lv_color.h ****                                         (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 454:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 455:lvgl/src/lv_draw/../lv_misc/lv_color.h ****                                         (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 456:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 457:lvgl/src/lv_draw/../lv_misc/lv_color.h ****                                         (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 458:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 459:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 460:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 461:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 462:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 463:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 464:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret;
 465:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 466:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 467:lvgl/src/lv_draw/../lv_misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 835              		.loc 4 467 42 view .LVU289
 836              	.LBB118:
 468:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 469:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 470:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 837              		.loc 4 470 5 view .LVU290
 838              		.loc 4 470 25 is_stmt 0 view .LVU291
 839 0338 D10A     		lsrs	r1, r2, #11
 840              		.loc 4 470 43 view .LVU292
 841 033a 9BB2     		uxth	r3, r3
 842              	.LVL95:
 843              		.loc 4 470 43 view .LVU293
 844 033c 01FB03F1 		mul	r1, r1, r3
 845              		.loc 4 470 12 view .LVU294
 846 0340 ADF87C10 		strh	r1, [sp, #124]	@ movhi
 471:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 847              		.loc 4 471 5 is_stmt 1 view .LVU295
 848              		.loc 4 471 25 is_stmt 0 view .LVU296
 849 0344 C2F34511 		ubfx	r1, r2, #5, #6
 850              		.loc 4 471 43 view .LVU297
 851 0348 03FB01F1 		mul	r1, r3, r1
 852              		.loc 4 471 12 view .LVU298
 853 034c ADF87E10 		strh	r1, [sp, #126]	@ movhi
 472:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 854              		.loc 4 472 5 is_stmt 1 view .LVU299
 855              		.loc 4 472 25 is_stmt 0 view .LVU300
 856 0350 02F01F02 		and	r2, r2, #31
 857              	.LVL96:
 858              		.loc 4 472 43 view .LVU301
 859 0354 03FB02F3 		mul	r3, r3, r2
 860              		.loc 4 472 12 view .LVU302
 861 0358 ADF88030 		strh	r3, [sp, #128]	@ movhi
ARM GAS  D:\Temp\ccEuVdRK.s 			page 41


 862              	.LVL97:
 863              	.L21:
 864              		.loc 4 472 12 view .LVU303
 865              	.LBE118:
 866              	.LBE117:
 508:lvgl/src/lv_draw/lv_draw_img.c ****             }
 509:lvgl/src/lv_draw/lv_draw_img.c **** 
 510:lvgl/src/lv_draw/lv_draw_img.c ****             lv_draw_mask_res_t mask_res;
 867              		.loc 1 510 13 is_stmt 1 view .LVU304
 511:lvgl/src/lv_draw/lv_draw_img.c ****             mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 868              		.loc 1 511 13 view .LVU305
 869              		.loc 1 511 22 is_stmt 0 view .LVU306
 870 035c 099B     		ldr	r3, [sp, #36]
 871 035e 6BB9     		cbnz	r3, .L60
 872              		.loc 1 511 36 discriminator 2 view .LVU307
 873 0360 0B9B     		ldr	r3, [sp, #44]
 874 0362 0BBB     		cbnz	r3, .L61
 875              		.loc 1 511 61 discriminator 4 view .LVU308
 876 0364 069A     		ldr	r2, [sp, #24]
 877 0366 5388     		ldrh	r3, [r2, #2]
 878              		.loc 1 511 50 discriminator 4 view .LVU309
 879 0368 0BBB     		cbnz	r3, .L62
 512:lvgl/src/lv_draw/lv_draw_img.c ****                         draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MA
 880              		.loc 1 512 33 discriminator 6 view .LVU310
 881 036a 1389     		ldrh	r3, [r2, #8]
 511:lvgl/src/lv_draw/lv_draw_img.c ****             mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 882              		.loc 1 511 69 discriminator 6 view .LVU311
 883 036c B3F5807F 		cmp	r3, #256
 884 0370 20D0     		beq	.L63
 511:lvgl/src/lv_draw/lv_draw_img.c ****             mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 885              		.loc 1 511 22 view .LVU312
 886 0372 0223     		movs	r3, #2
 887 0374 1993     		str	r3, [sp, #100]
 888 0376 03E0     		b	.L22
 889              	.LVL98:
 890              	.L59:
 891              	.LBB119:
 488:lvgl/src/lv_draw/lv_draw_img.c **** 
 892              		.loc 1 488 40 view .LVU313
 893 0378 0621     		movs	r1, #6
 894 037a AAE7     		b	.L20
 895              	.LVL99:
 896              	.L60:
 488:lvgl/src/lv_draw/lv_draw_img.c **** 
 897              		.loc 1 488 40 view .LVU314
 898              	.LBE119:
 511:lvgl/src/lv_draw/lv_draw_img.c ****             mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 899              		.loc 1 511 22 view .LVU315
 900 037c 0223     		movs	r3, #2
 901 037e 1993     		str	r3, [sp, #100]
 902              	.L22:
 903              	.LVL100:
 513:lvgl/src/lv_draw/lv_draw_img.c **** 
 514:lvgl/src/lv_draw/lv_draw_img.c ****             /*Prepare the `mask_buf`if there are other masks*/
 515:lvgl/src/lv_draw/lv_draw_img.c ****             if(other_mask_cnt) {
 904              		.loc 1 515 13 is_stmt 1 discriminator 10 view .LVU316
 905              		.loc 1 515 15 is_stmt 0 discriminator 10 view .LVU317
ARM GAS  D:\Temp\ccEuVdRK.s 			page 42


 906 0380 139B     		ldr	r3, [sp, #76]
 907 0382 D3B9     		cbnz	r3, .L83
 908              	.L23:
 516:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_memset_ff(mask_buf, mask_buf_size);
 517:lvgl/src/lv_draw/lv_draw_img.c ****             }
 518:lvgl/src/lv_draw/lv_draw_img.c **** 
 519:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t x;
 909              		.loc 1 519 13 is_stmt 1 view .LVU318
 520:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t y;
 910              		.loc 1 520 13 view .LVU319
 521:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_IMG_TRANSFORM
 522:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 911              		.loc 1 522 13 view .LVU320
 912              		.loc 1 522 38 is_stmt 0 view .LVU321
 913 0384 129B     		ldr	r3, [sp, #72]
 914 0386 B3F91230 		ldrsh	r3, [r3, #18]
 915              		.loc 1 522 54 view .LVU322
 916 038a BDF9DA20 		ldrsh	r2, [sp, #218]
 917              		.loc 1 522 43 view .LVU323
 918 038e 1344     		add	r3, r3, r2
 919              		.loc 1 522 68 view .LVU324
 920 0390 149A     		ldr	r2, [sp, #80]
 921 0392 B2F90220 		ldrsh	r2, [r2, #2]
 922              		.loc 1 522 21 view .LVU325
 923 0396 9B1A     		subs	r3, r3, r2
 924 0398 1093     		str	r3, [sp, #64]
 925              	.LVL101:
 523:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 524:lvgl/src/lv_draw/lv_draw_img.c ****             for(y = 0; y < draw_area_h; y++) {
 926              		.loc 1 524 13 is_stmt 1 view .LVU326
 927              		.loc 1 524 19 is_stmt 0 view .LVU327
 928 039a 0023     		movs	r3, #0
 929              	.LVL102:
 930              		.loc 1 524 19 view .LVU328
 931 039c 0893     		str	r3, [sp, #32]
 932              	.LBE154:
 395:lvgl/src/lv_draw/lv_draw_img.c **** 
 933              		.loc 1 395 18 view .LVU329
 934 039e 1193     		str	r3, [sp, #68]
 935 03a0 D046     		mov	r8, r10
 936 03a2 DA46     		mov	r10, fp
 937              	.LVL103:
 395:lvgl/src/lv_draw/lv_draw_img.c **** 
 938              		.loc 1 395 18 view .LVU330
 939 03a4 CB46     		mov	fp, r9	@ movhi
 940              	.LVL104:
 941              	.LBB155:
 942              		.loc 1 524 13 view .LVU331
 943 03a6 72E1     		b	.L24
 944              	.LVL105:
 945              	.L61:
 511:lvgl/src/lv_draw/lv_draw_img.c ****                         draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MA
 946              		.loc 1 511 22 view .LVU332
 947 03a8 0223     		movs	r3, #2
 948 03aa 1993     		str	r3, [sp, #100]
 949 03ac E8E7     		b	.L22
 950              	.L62:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 43


 951 03ae 0223     		movs	r3, #2
 952 03b0 1993     		str	r3, [sp, #100]
 953 03b2 E5E7     		b	.L22
 954              	.L63:
 955 03b4 0123     		movs	r3, #1
 956 03b6 1993     		str	r3, [sp, #100]
 957 03b8 E2E7     		b	.L22
 958              	.LVL106:
 959              	.L83:
 516:lvgl/src/lv_draw/lv_draw_img.c ****             }
 960              		.loc 1 516 17 is_stmt 1 view .LVU333
 961 03ba 1599     		ldr	r1, [sp, #84]
 962 03bc 5846     		mov	r0, fp
 963 03be FFF7FEFF 		bl	_lv_memset_ff
 964              	.LVL107:
 965 03c2 DFE7     		b	.L23
 966              	.LVL108:
 967              	.L90:
 968              	.LBB120:
 969              	.LBB121:
 525:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 526:lvgl/src/lv_draw/lv_draw_img.c ****                 uint32_t px_i_start = px_i;
 527:lvgl/src/lv_draw/lv_draw_img.c **** 
 528:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_IMG_TRANSFORM
 529:lvgl/src/lv_draw/lv_draw_img.c ****                 int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 530:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 531:lvgl/src/lv_draw/lv_draw_img.c ****                 for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 532:lvgl/src/lv_draw/lv_draw_img.c **** 
 533:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_USE_IMG_TRANSFORM
 534:lvgl/src/lv_draw/lv_draw_img.c ****                     if(transform) {
 535:lvgl/src/lv_draw/lv_draw_img.c **** 
 536:lvgl/src/lv_draw/lv_draw_img.c ****                         /*Transform*/
 537:lvgl/src/lv_draw/lv_draw_img.c ****                         bool ret;
 970              		.loc 1 537 25 view .LVU334
 538:lvgl/src/lv_draw/lv_draw_img.c ****                         ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 971              		.loc 1 538 25 view .LVU335
 972              		.loc 1 538 71 is_stmt 0 view .LVU336
 973 03c4 0C9B     		ldr	r3, [sp, #48]
 974 03c6 2344     		add	r3, r3, r4
 975              		.loc 1 538 31 view .LVU337
 976 03c8 1BB2     		sxth	r3, r3
 977              		.loc 1 538 82 view .LVU338
 978 03ca 109A     		ldr	r2, [sp, #64]
 979 03cc 0899     		ldr	r1, [sp, #32]
 980 03ce 0A44     		add	r2, r2, r1
 981              		.loc 1 538 31 view .LVU339
 982 03d0 12B2     		sxth	r2, r2
 983              	.LVL109:
 984              	.LBB122:
 985              	.LBI122:
 986              		.file 5 "lvgl/src/lv_draw/lv_img_buf.h"
   1:lvgl/src/lv_draw/lv_img_buf.h **** /**
   2:lvgl/src/lv_draw/lv_img_buf.h ****  * @file lv_img_buf.h
   3:lvgl/src/lv_draw/lv_img_buf.h ****  *
   4:lvgl/src/lv_draw/lv_img_buf.h ****  */
   5:lvgl/src/lv_draw/lv_img_buf.h **** 
   6:lvgl/src/lv_draw/lv_img_buf.h **** #ifndef LV_IMG_BUF_H
ARM GAS  D:\Temp\ccEuVdRK.s 			page 44


   7:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_H
   8:lvgl/src/lv_draw/lv_img_buf.h **** 
   9:lvgl/src/lv_draw/lv_img_buf.h **** #ifdef __cplusplus
  10:lvgl/src/lv_draw/lv_img_buf.h **** extern "C" {
  11:lvgl/src/lv_draw/lv_img_buf.h **** #endif
  12:lvgl/src/lv_draw/lv_img_buf.h **** 
  13:lvgl/src/lv_draw/lv_img_buf.h **** /*********************
  14:lvgl/src/lv_draw/lv_img_buf.h ****  *      INCLUDES
  15:lvgl/src/lv_draw/lv_img_buf.h ****  *********************/
  16:lvgl/src/lv_draw/lv_img_buf.h **** #include <stdbool.h>
  17:lvgl/src/lv_draw/lv_img_buf.h **** #include "../lv_misc/lv_color.h"
  18:lvgl/src/lv_draw/lv_img_buf.h **** #include "../lv_misc/lv_area.h"
  19:lvgl/src/lv_draw/lv_img_buf.h **** 
  20:lvgl/src/lv_draw/lv_img_buf.h **** /*********************
  21:lvgl/src/lv_draw/lv_img_buf.h ****  *      DEFINES
  22:lvgl/src/lv_draw/lv_img_buf.h ****  *********************/
  23:lvgl/src/lv_draw/lv_img_buf.h **** /*If image pixels contains alpha we need to know how much byte is a pixel*/
  24:lvgl/src/lv_draw/lv_img_buf.h **** #if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
  25:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_PX_SIZE_ALPHA_BYTE 2
  26:lvgl/src/lv_draw/lv_img_buf.h **** #elif LV_COLOR_DEPTH == 16
  27:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_PX_SIZE_ALPHA_BYTE 3
  28:lvgl/src/lv_draw/lv_img_buf.h **** #elif LV_COLOR_DEPTH == 32
  29:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_PX_SIZE_ALPHA_BYTE 4
  30:lvgl/src/lv_draw/lv_img_buf.h **** #endif
  31:lvgl/src/lv_draw/lv_img_buf.h **** 
  32:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_TRUE_COLOR(w, h) ((LV_COLOR_SIZE / 8) * w * h)
  33:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h) ((LV_COLOR_SIZE / 8) * w * h)
  34:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h) (LV_IMG_PX_SIZE_ALPHA_BYTE * w * h)
  35:lvgl/src/lv_draw/lv_img_buf.h **** 
  36:lvgl/src/lv_draw/lv_img_buf.h **** /*+ 1: to be sure no fractional row*/
  37:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h) ((((w / 8) + 1) * h))
  38:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h) ((((w / 4) + 1) * h))
  39:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h) ((((w / 2) + 1) * h))
  40:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h) ((w * h))
  41:lvgl/src/lv_draw/lv_img_buf.h **** 
  42:lvgl/src/lv_draw/lv_img_buf.h **** /*4 * X: for palette*/
  43:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h) (LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h) + 4 * 2)
  44:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_INDEXED_2BIT(w, h) (LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h) + 4 * 4)
  45:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_INDEXED_4BIT(w, h) (LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h) + 4 * 16)
  46:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_BUF_SIZE_INDEXED_8BIT(w, h) (LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h) + 4 * 256)
  47:lvgl/src/lv_draw/lv_img_buf.h **** 
  48:lvgl/src/lv_draw/lv_img_buf.h **** #define LV_IMG_ZOOM_NONE   256
  49:lvgl/src/lv_draw/lv_img_buf.h **** 
  50:lvgl/src/lv_draw/lv_img_buf.h **** #define _LV_TRANSFORM_TRIGO_SHIFT 10
  51:lvgl/src/lv_draw/lv_img_buf.h **** #define _LV_ZOOM_INV_UPSCALE 5
  52:lvgl/src/lv_draw/lv_img_buf.h **** 
  53:lvgl/src/lv_draw/lv_img_buf.h **** /**********************
  54:lvgl/src/lv_draw/lv_img_buf.h ****  *      TYPEDEFS
  55:lvgl/src/lv_draw/lv_img_buf.h ****  **********************/
  56:lvgl/src/lv_draw/lv_img_buf.h **** 
  57:lvgl/src/lv_draw/lv_img_buf.h **** /*Image color format*/
  58:lvgl/src/lv_draw/lv_img_buf.h **** enum {
  59:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_UNKNOWN = 0,
  60:lvgl/src/lv_draw/lv_img_buf.h **** 
  61:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RAW,              /**< Contains the file as it is. Needs custom decoder function*/
  62:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RAW_ALPHA,        /**< Contains the file as it is. The image has alpha. Needs custom 
  63:lvgl/src/lv_draw/lv_img_buf.h ****                                    function*/
ARM GAS  D:\Temp\ccEuVdRK.s 			page 45


  64:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RAW_CHROMA_KEYED, /**< Contains the file as it is. The image is chroma keyed. Needs
  65:lvgl/src/lv_draw/lv_img_buf.h ****                                    custom decoder function*/
  66:lvgl/src/lv_draw/lv_img_buf.h **** 
  67:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_TRUE_COLOR,              /**< Color format and depth should match with LV_COLOR setti
  68:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_TRUE_COLOR_ALPHA,        /**< Same as `LV_IMG_CF_TRUE_COLOR` but every pixel has an a
  69:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED, /**< Same as `LV_IMG_CF_TRUE_COLOR` but LV_COLOR_TRANSP pixe
  70:lvgl/src/lv_draw/lv_img_buf.h ****                                           will be transparent*/
  71:lvgl/src/lv_draw/lv_img_buf.h **** 
  72:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_INDEXED_1BIT, /**< Can have 2 different colors in a palette (always chroma keyed)*/
  73:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_INDEXED_2BIT, /**< Can have 4 different colors in a palette (always chroma keyed)*/
  74:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_INDEXED_4BIT, /**< Can have 16 different colors in a palette (always chroma keyed)*/
  75:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_INDEXED_8BIT, /**< Can have 256 different colors in a palette (always chroma keyed)*/
  76:lvgl/src/lv_draw/lv_img_buf.h **** 
  77:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_ALPHA_1BIT, /**< Can have one color and it can be drawn or not*/
  78:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_ALPHA_2BIT, /**< Can have one color but 4 different alpha value*/
  79:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_ALPHA_4BIT, /**< Can have one color but 16 different alpha value*/
  80:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_ALPHA_8BIT, /**< Can have one color but 256 different alpha value*/
  81:lvgl/src/lv_draw/lv_img_buf.h **** 
  82:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_15,              /**< Reserved for further use. */
  83:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_16,              /**< Reserved for further use. */
  84:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_17,              /**< Reserved for further use. */
  85:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_18,              /**< Reserved for further use. */
  86:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_19,              /**< Reserved for further use. */
  87:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_20,              /**< Reserved for further use. */
  88:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_21,              /**< Reserved for further use. */
  89:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_22,              /**< Reserved for further use. */
  90:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_RESERVED_23,              /**< Reserved for further use. */
  91:lvgl/src/lv_draw/lv_img_buf.h **** 
  92:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_0,          /**< User holder encoding format. */
  93:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_1,          /**< User holder encoding format. */
  94:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_2,          /**< User holder encoding format. */
  95:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_3,          /**< User holder encoding format. */
  96:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_4,          /**< User holder encoding format. */
  97:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_5,          /**< User holder encoding format. */
  98:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_6,          /**< User holder encoding format. */
  99:lvgl/src/lv_draw/lv_img_buf.h ****     LV_IMG_CF_USER_ENCODED_7,          /**< User holder encoding format. */
 100:lvgl/src/lv_draw/lv_img_buf.h **** };
 101:lvgl/src/lv_draw/lv_img_buf.h **** typedef uint8_t lv_img_cf_t;
 102:lvgl/src/lv_draw/lv_img_buf.h **** 
 103:lvgl/src/lv_draw/lv_img_buf.h **** /**
 104:lvgl/src/lv_draw/lv_img_buf.h ****  * LVGL image header
 105:lvgl/src/lv_draw/lv_img_buf.h ****  */
 106:lvgl/src/lv_draw/lv_img_buf.h **** /* The first 8 bit is very important to distinguish the different source types.
 107:lvgl/src/lv_draw/lv_img_buf.h ****  * For more info see `lv_img_get_src_type()` in lv_img.c
 108:lvgl/src/lv_draw/lv_img_buf.h ****  * On big endian systems the order is reversed so cf and always_zero must be at
 109:lvgl/src/lv_draw/lv_img_buf.h ****  * the end of the struct.
 110:lvgl/src/lv_draw/lv_img_buf.h ****  * */
 111:lvgl/src/lv_draw/lv_img_buf.h **** #if LV_BIG_ENDIAN_SYSTEM
 112:lvgl/src/lv_draw/lv_img_buf.h **** typedef struct {
 113:lvgl/src/lv_draw/lv_img_buf.h **** 
 114:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t h : 11; /*Height of the image map*/
 115:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t w : 11; /*Width of the image map*/
 116:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t reserved : 2; /*Reserved to be used later*/
 117:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t always_zero : 3; /*It the upper bits of the first byte. Always zero to look like a
 118:lvgl/src/lv_draw/lv_img_buf.h ****                                  non-printable character*/
 119:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t cf : 5;          /* Color format: See `lv_img_color_format_t`*/
 120:lvgl/src/lv_draw/lv_img_buf.h **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 46


 121:lvgl/src/lv_draw/lv_img_buf.h **** } lv_img_header_t;
 122:lvgl/src/lv_draw/lv_img_buf.h **** #else
 123:lvgl/src/lv_draw/lv_img_buf.h **** typedef struct {
 124:lvgl/src/lv_draw/lv_img_buf.h **** 
 125:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t cf : 5;          /* Color format: See `lv_img_color_format_t`*/
 126:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t always_zero : 3; /*It the upper bits of the first byte. Always zero to look like a
 127:lvgl/src/lv_draw/lv_img_buf.h ****                                  non-printable character*/
 128:lvgl/src/lv_draw/lv_img_buf.h **** 
 129:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t reserved : 2; /*Reserved to be used later*/
 130:lvgl/src/lv_draw/lv_img_buf.h **** 
 131:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t w : 11; /*Width of the image map*/
 132:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t h : 11; /*Height of the image map*/
 133:lvgl/src/lv_draw/lv_img_buf.h **** } lv_img_header_t;
 134:lvgl/src/lv_draw/lv_img_buf.h **** #endif
 135:lvgl/src/lv_draw/lv_img_buf.h **** 
 136:lvgl/src/lv_draw/lv_img_buf.h **** /** Image header it is compatible with
 137:lvgl/src/lv_draw/lv_img_buf.h ****  * the result from image converter utility*/
 138:lvgl/src/lv_draw/lv_img_buf.h **** typedef struct {
 139:lvgl/src/lv_draw/lv_img_buf.h ****     lv_img_header_t header;
 140:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t data_size;
 141:lvgl/src/lv_draw/lv_img_buf.h ****     const uint8_t * data;
 142:lvgl/src/lv_draw/lv_img_buf.h **** } lv_img_dsc_t;
 143:lvgl/src/lv_draw/lv_img_buf.h **** 
 144:lvgl/src/lv_draw/lv_img_buf.h **** typedef struct {
 145:lvgl/src/lv_draw/lv_img_buf.h ****     struct {
 146:lvgl/src/lv_draw/lv_img_buf.h ****         const void * src;           /*image source (array of pixels)*/
 147:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t src_w;           /*width of the image source*/
 148:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t src_h;           /*height of the image source*/
 149:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t pivot_x;         /*pivot x*/
 150:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t pivot_y;         /* pivot y*/
 151:lvgl/src/lv_draw/lv_img_buf.h ****         int16_t angle;              /*angle to rotate*/
 152:lvgl/src/lv_draw/lv_img_buf.h ****         uint16_t zoom;              /*256 no zoom, 128 half size, 512 double size*/
 153:lvgl/src/lv_draw/lv_img_buf.h ****         lv_color_t color;           /*a color used for `LV_IMG_CF_INDEXED_1/2/4/8BIT` color formats
 154:lvgl/src/lv_draw/lv_img_buf.h ****         lv_img_cf_t cf;             /*color format of the image to rotate*/
 155:lvgl/src/lv_draw/lv_img_buf.h ****         bool antialias;
 156:lvgl/src/lv_draw/lv_img_buf.h ****     } cfg;
 157:lvgl/src/lv_draw/lv_img_buf.h **** 
 158:lvgl/src/lv_draw/lv_img_buf.h ****     struct {
 159:lvgl/src/lv_draw/lv_img_buf.h ****         lv_color_t color;
 160:lvgl/src/lv_draw/lv_img_buf.h ****         lv_opa_t opa;
 161:lvgl/src/lv_draw/lv_img_buf.h ****     } res;
 162:lvgl/src/lv_draw/lv_img_buf.h **** 
 163:lvgl/src/lv_draw/lv_img_buf.h ****     struct {
 164:lvgl/src/lv_draw/lv_img_buf.h ****         lv_img_dsc_t img_dsc;
 165:lvgl/src/lv_draw/lv_img_buf.h ****         int32_t pivot_x_256;
 166:lvgl/src/lv_draw/lv_img_buf.h ****         int32_t pivot_y_256;
 167:lvgl/src/lv_draw/lv_img_buf.h ****         int32_t sinma;
 168:lvgl/src/lv_draw/lv_img_buf.h ****         int32_t cosma;
 169:lvgl/src/lv_draw/lv_img_buf.h **** 
 170:lvgl/src/lv_draw/lv_img_buf.h ****         uint8_t chroma_keyed : 1;
 171:lvgl/src/lv_draw/lv_img_buf.h ****         uint8_t has_alpha : 1;
 172:lvgl/src/lv_draw/lv_img_buf.h ****         uint8_t native_color : 1;
 173:lvgl/src/lv_draw/lv_img_buf.h **** 
 174:lvgl/src/lv_draw/lv_img_buf.h ****         uint32_t zoom_inv;
 175:lvgl/src/lv_draw/lv_img_buf.h **** 
 176:lvgl/src/lv_draw/lv_img_buf.h ****         /*Runtime data*/
 177:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t xs;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 47


 178:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t ys;
 179:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t xs_int;
 180:lvgl/src/lv_draw/lv_img_buf.h ****         lv_coord_t ys_int;
 181:lvgl/src/lv_draw/lv_img_buf.h ****         uint32_t pxi;
 182:lvgl/src/lv_draw/lv_img_buf.h ****         uint8_t px_size;
 183:lvgl/src/lv_draw/lv_img_buf.h ****     } tmp;
 184:lvgl/src/lv_draw/lv_img_buf.h **** } lv_img_transform_dsc_t;
 185:lvgl/src/lv_draw/lv_img_buf.h **** 
 186:lvgl/src/lv_draw/lv_img_buf.h **** /**********************
 187:lvgl/src/lv_draw/lv_img_buf.h ****  * GLOBAL PROTOTYPES
 188:lvgl/src/lv_draw/lv_img_buf.h ****  **********************/
 189:lvgl/src/lv_draw/lv_img_buf.h **** 
 190:lvgl/src/lv_draw/lv_img_buf.h **** /**
 191:lvgl/src/lv_draw/lv_img_buf.h ****  * Allocate an image buffer in RAM
 192:lvgl/src/lv_draw/lv_img_buf.h ****  * @param w width of image
 193:lvgl/src/lv_draw/lv_img_buf.h ****  * @param h height of image
 194:lvgl/src/lv_draw/lv_img_buf.h ****  * @param cf a color format (`LV_IMG_CF_...`)
 195:lvgl/src/lv_draw/lv_img_buf.h ****  * @return an allocated image, or NULL on failure
 196:lvgl/src/lv_draw/lv_img_buf.h ****  */
 197:lvgl/src/lv_draw/lv_img_buf.h **** lv_img_dsc_t * lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf);
 198:lvgl/src/lv_draw/lv_img_buf.h **** 
 199:lvgl/src/lv_draw/lv_img_buf.h **** /**
 200:lvgl/src/lv_draw/lv_img_buf.h ****  * Get the color of an image's pixel
 201:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc an image descriptor
 202:lvgl/src/lv_draw/lv_img_buf.h ****  * @param x x coordinate of the point to get
 203:lvgl/src/lv_draw/lv_img_buf.h ****  * @param y x coordinate of the point to get
 204:lvgl/src/lv_draw/lv_img_buf.h ****  * @param color the color of the image. In case of `LV_IMG_CF_ALPHA_1/2/4/8` this color is used.
 205:lvgl/src/lv_draw/lv_img_buf.h ****  * Not used in other cases.
 206:lvgl/src/lv_draw/lv_img_buf.h ****  * @param safe true: check out of bounds
 207:lvgl/src/lv_draw/lv_img_buf.h ****  * @return color of the point
 208:lvgl/src/lv_draw/lv_img_buf.h ****  */
 209:lvgl/src/lv_draw/lv_img_buf.h **** lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color
 210:lvgl/src/lv_draw/lv_img_buf.h **** 
 211:lvgl/src/lv_draw/lv_img_buf.h **** /**
 212:lvgl/src/lv_draw/lv_img_buf.h ****  * Get the alpha value of an image's pixel
 213:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to an image descriptor
 214:lvgl/src/lv_draw/lv_img_buf.h ****  * @param x x coordinate of the point to set
 215:lvgl/src/lv_draw/lv_img_buf.h ****  * @param y x coordinate of the point to set
 216:lvgl/src/lv_draw/lv_img_buf.h ****  * @param safe true: check out of bounds
 217:lvgl/src/lv_draw/lv_img_buf.h ****  * @return alpha value of the point
 218:lvgl/src/lv_draw/lv_img_buf.h ****  */
 219:lvgl/src/lv_draw/lv_img_buf.h **** lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y);
 220:lvgl/src/lv_draw/lv_img_buf.h **** 
 221:lvgl/src/lv_draw/lv_img_buf.h **** /**
 222:lvgl/src/lv_draw/lv_img_buf.h ****  * Set the color of a pixel of an image. The alpha channel won't be affected.
 223:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to an image descriptor
 224:lvgl/src/lv_draw/lv_img_buf.h ****  * @param x x coordinate of the point to set
 225:lvgl/src/lv_draw/lv_img_buf.h ****  * @param y x coordinate of the point to set
 226:lvgl/src/lv_draw/lv_img_buf.h ****  * @param c color of the point
 227:lvgl/src/lv_draw/lv_img_buf.h ****  * @param safe true: check out of bounds
 228:lvgl/src/lv_draw/lv_img_buf.h ****  */
 229:lvgl/src/lv_draw/lv_img_buf.h **** void lv_img_buf_set_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c);
 230:lvgl/src/lv_draw/lv_img_buf.h **** 
 231:lvgl/src/lv_draw/lv_img_buf.h **** /**
 232:lvgl/src/lv_draw/lv_img_buf.h ****  * Set the alpha value of a pixel of an image. The color won't be affected
 233:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to an image descriptor
 234:lvgl/src/lv_draw/lv_img_buf.h ****  * @param x x coordinate of the point to set
ARM GAS  D:\Temp\ccEuVdRK.s 			page 48


 235:lvgl/src/lv_draw/lv_img_buf.h ****  * @param y x coordinate of the point to set
 236:lvgl/src/lv_draw/lv_img_buf.h ****  * @param opa the desired opacity
 237:lvgl/src/lv_draw/lv_img_buf.h ****  * @param safe true: check out of bounds
 238:lvgl/src/lv_draw/lv_img_buf.h ****  */
 239:lvgl/src/lv_draw/lv_img_buf.h **** void lv_img_buf_set_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa);
 240:lvgl/src/lv_draw/lv_img_buf.h **** 
 241:lvgl/src/lv_draw/lv_img_buf.h **** /**
 242:lvgl/src/lv_draw/lv_img_buf.h ****  * Set the palette color of an indexed image. Valid only for `LV_IMG_CF_INDEXED1/2/4/8`
 243:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to an image descriptor
 244:lvgl/src/lv_draw/lv_img_buf.h ****  * @param id the palette color to set:
 245:lvgl/src/lv_draw/lv_img_buf.h ****  *   - for `LV_IMG_CF_INDEXED1`: 0..1
 246:lvgl/src/lv_draw/lv_img_buf.h ****  *   - for `LV_IMG_CF_INDEXED2`: 0..3
 247:lvgl/src/lv_draw/lv_img_buf.h ****  *   - for `LV_IMG_CF_INDEXED4`: 0..15
 248:lvgl/src/lv_draw/lv_img_buf.h ****  *   - for `LV_IMG_CF_INDEXED8`: 0..255
 249:lvgl/src/lv_draw/lv_img_buf.h ****  * @param c the color to set
 250:lvgl/src/lv_draw/lv_img_buf.h ****  */
 251:lvgl/src/lv_draw/lv_img_buf.h **** void lv_img_buf_set_palette(lv_img_dsc_t * dsc, uint8_t id, lv_color_t c);
 252:lvgl/src/lv_draw/lv_img_buf.h **** 
 253:lvgl/src/lv_draw/lv_img_buf.h **** /**
 254:lvgl/src/lv_draw/lv_img_buf.h ****  * Free an allocated image buffer
 255:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc image buffer to free
 256:lvgl/src/lv_draw/lv_img_buf.h ****  */
 257:lvgl/src/lv_draw/lv_img_buf.h **** void lv_img_buf_free(lv_img_dsc_t * dsc);
 258:lvgl/src/lv_draw/lv_img_buf.h **** 
 259:lvgl/src/lv_draw/lv_img_buf.h **** /**
 260:lvgl/src/lv_draw/lv_img_buf.h ****  * Get the memory consumption of a raw bitmap, given color format and dimensions.
 261:lvgl/src/lv_draw/lv_img_buf.h ****  * @param w width
 262:lvgl/src/lv_draw/lv_img_buf.h ****  * @param h height
 263:lvgl/src/lv_draw/lv_img_buf.h ****  * @param cf color format
 264:lvgl/src/lv_draw/lv_img_buf.h ****  * @return size in bytes
 265:lvgl/src/lv_draw/lv_img_buf.h ****  */
 266:lvgl/src/lv_draw/lv_img_buf.h **** uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf);
 267:lvgl/src/lv_draw/lv_img_buf.h **** 
 268:lvgl/src/lv_draw/lv_img_buf.h **** #if LV_USE_IMG_TRANSFORM
 269:lvgl/src/lv_draw/lv_img_buf.h **** /**
 270:lvgl/src/lv_draw/lv_img_buf.h ****  * Initialize a descriptor to rotate an image
 271:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 272:lvgl/src/lv_draw/lv_img_buf.h ****  */
 273:lvgl/src/lv_draw/lv_img_buf.h **** void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc);
 274:lvgl/src/lv_draw/lv_img_buf.h **** 
 275:lvgl/src/lv_draw/lv_img_buf.h **** /**
 276:lvgl/src/lv_draw/lv_img_buf.h ****  * Continue transformation by taking the neighbors into account
 277:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc pointer to the transformation descriptor
 278:lvgl/src/lv_draw/lv_img_buf.h ****  */
 279:lvgl/src/lv_draw/lv_img_buf.h **** bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc);
 280:lvgl/src/lv_draw/lv_img_buf.h **** 
 281:lvgl/src/lv_draw/lv_img_buf.h **** /**
 282:lvgl/src/lv_draw/lv_img_buf.h ****  * Get which color and opa would come to a pixel if it were rotated
 283:lvgl/src/lv_draw/lv_img_buf.h ****  * @param dsc a descriptor initialized by `lv_img_buf_rotate_init`
 284:lvgl/src/lv_draw/lv_img_buf.h ****  * @param x the coordinate which color and opa should be get
 285:lvgl/src/lv_draw/lv_img_buf.h ****  * @param y the coordinate which color and opa should be get
 286:lvgl/src/lv_draw/lv_img_buf.h ****  * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of
 287:lvgl/src/lv_draw/lv_img_buf.h ****  * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 288:lvgl/src/lv_draw/lv_img_buf.h ****  */
 289:lvgl/src/lv_draw/lv_img_buf.h **** static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
 987              		.loc 5 289 20 is_stmt 1 view .LVU340
 988              	.LBB123:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 49


 290:lvgl/src/lv_draw/lv_img_buf.h **** {
 291:lvgl/src/lv_draw/lv_img_buf.h ****     const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 989              		.loc 5 291 5 view .LVU341
 990              		.loc 5 291 21 is_stmt 0 view .LVU342
 991 03d2 2399     		ldr	r1, [sp, #140]
 992              	.LVL110:
 292:lvgl/src/lv_draw/lv_img_buf.h **** 
 293:lvgl/src/lv_draw/lv_img_buf.h ****     /*Get the target point relative coordinates to the pivot*/
 294:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t xt = x - dsc->cfg.pivot_x;
 993              		.loc 5 294 5 is_stmt 1 view .LVU343
 994              		.loc 5 294 30 is_stmt 0 view .LVU344
 995 03d4 BDF99460 		ldrsh	r6, [sp, #148]
 996              		.loc 5 294 13 view .LVU345
 997 03d8 9B1B     		subs	r3, r3, r6
 998              	.LVL111:
 295:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t yt = y - dsc->cfg.pivot_y;
 999              		.loc 5 295 5 is_stmt 1 view .LVU346
 1000              		.loc 5 295 30 is_stmt 0 view .LVU347
 1001 03da BDF99660 		ldrsh	r6, [sp, #150]
 1002              		.loc 5 295 13 view .LVU348
 1003 03de 921B     		subs	r2, r2, r6
 1004              	.LVL112:
 296:lvgl/src/lv_draw/lv_img_buf.h **** 
 297:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t xs;
 1005              		.loc 5 297 5 is_stmt 1 view .LVU349
 298:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t ys;
 1006              		.loc 5 298 5 view .LVU350
 299:lvgl/src/lv_draw/lv_img_buf.h ****     if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 1007              		.loc 5 299 5 view .LVU351
 1008              		.loc 5 299 16 is_stmt 0 view .LVU352
 1009 03e0 BDF89A00 		ldrh	r0, [sp, #154]
 1010              		.loc 5 299 7 view .LVU353
 1011 03e4 B0F5807F 		cmp	r0, #256
 1012 03e8 10D0     		beq	.L84
 300:lvgl/src/lv_draw/lv_img_buf.h ****         /*Get the source pixel from the upscaled image*/
 301:lvgl/src/lv_draw/lv_img_buf.h ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 302:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 303:lvgl/src/lv_draw/lv_img_buf.h ****     }
 304:lvgl/src/lv_draw/lv_img_buf.h ****     else if(dsc->cfg.angle == 0) {
 1013              		.loc 5 304 10 is_stmt 1 view .LVU354
 1014              		.loc 5 304 21 is_stmt 0 view .LVU355
 1015 03ea BDF99800 		ldrsh	r0, [sp, #152]
 1016              		.loc 5 304 12 view .LVU356
 1017 03ee 0028     		cmp	r0, #0
 1018 03f0 41D1     		bne	.L29
 305:lvgl/src/lv_draw/lv_img_buf.h ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1019              		.loc 5 305 9 is_stmt 1 view .LVU357
 1020              		.loc 5 305 46 is_stmt 0 view .LVU358
 1021 03f2 3198     		ldr	r0, [sp, #196]
 1022              		.loc 5 305 36 view .LVU359
 1023 03f4 03FB00F3 		mul	r3, r3, r0
 1024              	.LVL113:
 306:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1025              		.loc 5 306 9 is_stmt 1 view .LVU360
 1026              		.loc 5 306 36 is_stmt 0 view .LVU361
 1027 03f8 02FB00F2 		mul	r2, r2, r0
 1028              	.LVL114:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 50


 307:lvgl/src/lv_draw/lv_img_buf.h ****         xs = xt + dsc->tmp.pivot_x_256;
 1029              		.loc 5 307 9 is_stmt 1 view .LVU362
 1030              		.loc 5 307 27 is_stmt 0 view .LVU363
 1031 03fc 2C98     		ldr	r0, [sp, #176]
 1032              		.loc 5 307 12 view .LVU364
 1033 03fe 00EB6313 		add	r3, r0, r3, asr #5
 1034              	.LVL115:
 1035              		.loc 5 307 12 view .LVU365
 1036 0402 0A93     		str	r3, [sp, #40]
 1037              	.LVL116:
 308:lvgl/src/lv_draw/lv_img_buf.h ****         ys = yt + dsc->tmp.pivot_y_256;
 1038              		.loc 5 308 9 is_stmt 1 view .LVU366
 1039              		.loc 5 308 27 is_stmt 0 view .LVU367
 1040 0404 2D9E     		ldr	r6, [sp, #180]
 1041              		.loc 5 308 12 view .LVU368
 1042 0406 06EB6216 		add	r6, r6, r2, asr #5
 1043              	.LVL117:
 1044              		.loc 5 308 12 view .LVU369
 1045 040a 10E0     		b	.L28
 1046              	.LVL118:
 1047              	.L84:
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1048              		.loc 5 301 9 is_stmt 1 view .LVU370
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1049              		.loc 5 301 24 is_stmt 0 view .LVU371
 1050 040c 2F9F     		ldr	r7, [sp, #188]
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1051              		.loc 5 301 31 view .LVU372
 1052 040e 07FB03FC 		mul	ip, r7, r3
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1053              		.loc 5 301 46 view .LVU373
 1054 0412 2E9E     		ldr	r6, [sp, #184]
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1055              		.loc 5 301 36 view .LVU374
 1056 0414 06FB12CC 		mls	ip, r6, r2, ip
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1057              		.loc 5 301 105 view .LVU375
 1058 0418 2C98     		ldr	r0, [sp, #176]
 301:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 1059              		.loc 5 301 12 view .LVU376
 1060 041a 00EBAC00 		add	r0, r0, ip, asr #2
 1061 041e 0A90     		str	r0, [sp, #40]
 1062              	.LVL119:
 302:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1063              		.loc 5 302 9 is_stmt 1 view .LVU377
 302:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1064              		.loc 5 302 53 is_stmt 0 view .LVU378
 1065 0420 07FB02F2 		mul	r2, r7, r2
 1066              	.LVL120:
 302:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1067              		.loc 5 302 36 view .LVU379
 1068 0424 06FB0326 		mla	r6, r6, r3, r2
 302:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1069              		.loc 5 302 105 view .LVU380
 1070 0428 2D9B     		ldr	r3, [sp, #180]
 1071              	.LVL121:
 302:lvgl/src/lv_draw/lv_img_buf.h ****     }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 51


 1072              		.loc 5 302 12 view .LVU381
 1073 042a 03EBA606 		add	r6, r3, r6, asr #2
 1074              	.LVL122:
 1075              	.L28:
 309:lvgl/src/lv_draw/lv_img_buf.h ****     }
 310:lvgl/src/lv_draw/lv_img_buf.h ****     else {
 311:lvgl/src/lv_draw/lv_img_buf.h ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 312:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 313:lvgl/src/lv_draw/lv_img_buf.h ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 314:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 315:lvgl/src/lv_draw/lv_img_buf.h ****     }
 316:lvgl/src/lv_draw/lv_img_buf.h **** 
 317:lvgl/src/lv_draw/lv_img_buf.h ****     /*Get the integer part of the source pixel*/
 318:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t xs_int = xs >> 8;
 1076              		.loc 5 318 5 is_stmt 1 view .LVU382
 1077              		.loc 5 318 13 is_stmt 0 view .LVU383
 1078 042e 0A9B     		ldr	r3, [sp, #40]
 1079 0430 1F12     		asrs	r7, r3, #8
 1080              	.LVL123:
 319:lvgl/src/lv_draw/lv_img_buf.h ****     int32_t ys_int = ys >> 8;
 1081              		.loc 5 319 5 is_stmt 1 view .LVU384
 1082              		.loc 5 319 13 is_stmt 0 view .LVU385
 1083 0432 3012     		asrs	r0, r6, #8
 1084 0434 0D90     		str	r0, [sp, #52]
 1085              	.LVL124:
 320:lvgl/src/lv_draw/lv_img_buf.h **** 
 321:lvgl/src/lv_draw/lv_img_buf.h ****     if(xs_int >= dsc->cfg.src_w) return false;
 1086              		.loc 5 321 5 is_stmt 1 view .LVU386
 1087              		.loc 5 321 26 is_stmt 0 view .LVU387
 1088 0436 BDF99030 		ldrsh	r3, [sp, #144]
 1089              		.loc 5 321 7 view .LVU388
 1090 043a 9F42     		cmp	r7, r3
 1091 043c 80F29980 		bge	.L64
 322:lvgl/src/lv_draw/lv_img_buf.h ****     else if(xs_int < 0) return false;
 1092              		.loc 5 322 10 is_stmt 1 view .LVU389
 1093              		.loc 5 322 12 is_stmt 0 view .LVU390
 1094 0440 002F     		cmp	r7, #0
 1095 0442 C0F29F80 		blt	.L65
 323:lvgl/src/lv_draw/lv_img_buf.h **** 
 324:lvgl/src/lv_draw/lv_img_buf.h ****     if(ys_int >= dsc->cfg.src_h) return false;
 1096              		.loc 5 324 5 is_stmt 1 view .LVU391
 1097              		.loc 5 324 26 is_stmt 0 view .LVU392
 1098 0446 BDF992C0 		ldrsh	ip, [sp, #146]
 1099              		.loc 5 324 7 view .LVU393
 1100 044a 6045     		cmp	r0, ip
 1101 044c 80F29C80 		bge	.L66
 325:lvgl/src/lv_draw/lv_img_buf.h ****     else if(ys_int < 0) return false;
 1102              		.loc 5 325 10 is_stmt 1 view .LVU394
 1103              		.loc 5 325 12 is_stmt 0 view .LVU395
 1104 0450 0028     		cmp	r0, #0
 1105 0452 C0F29B80 		blt	.L67
 326:lvgl/src/lv_draw/lv_img_buf.h **** 
 327:lvgl/src/lv_draw/lv_img_buf.h ****     uint8_t px_size;
 1106              		.loc 5 327 5 is_stmt 1 view .LVU396
 328:lvgl/src/lv_draw/lv_img_buf.h ****     uint32_t pxi;
 1107              		.loc 5 328 5 view .LVU397
 329:lvgl/src/lv_draw/lv_img_buf.h ****     if(dsc->tmp.native_color) {
ARM GAS  D:\Temp\ccEuVdRK.s 			page 52


 1108              		.loc 5 329 5 view .LVU398
 1109              		.loc 5 329 8 is_stmt 0 view .LVU399
 1110 0456 9DF8C020 		ldrb	r2, [sp, #192]	@ zero_extendqisi2
 1111              		.loc 5 329 7 view .LVU400
 1112 045a 12F0040F 		tst	r2, #4
 1113 045e 5DD0     		beq	.L31
 330:lvgl/src/lv_draw/lv_img_buf.h ****         if(dsc->tmp.has_alpha == 0) {
 1114              		.loc 5 330 9 is_stmt 1 view .LVU401
 1115              		.loc 5 330 11 is_stmt 0 view .LVU402
 1116 0460 12F0020F 		tst	r2, #2
 1117 0464 42D1     		bne	.L32
 331:lvgl/src/lv_draw/lv_img_buf.h ****             px_size = LV_COLOR_SIZE >> 3;
 1118              		.loc 5 331 13 is_stmt 1 view .LVU403
 1119              	.LVL125:
 332:lvgl/src/lv_draw/lv_img_buf.h **** 
 333:lvgl/src/lv_draw/lv_img_buf.h ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 1120              		.loc 5 333 13 view .LVU404
 1121              		.loc 5 333 57 is_stmt 0 view .LVU405
 1122 0466 03FB0073 		mla	r3, r3, r0, r7
 1123 046a 5B00     		lsls	r3, r3, #1
 1124 046c 1A93     		str	r3, [sp, #104]
 1125              	.LVL126:
 334:lvgl/src/lv_draw/lv_img_buf.h ****             _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 1126              		.loc 5 334 13 is_stmt 1 view .LVU406
 1127              		.loc 5 334 47 is_stmt 0 view .LVU407
 1128 046e 1944     		add	r1, r1, r3
 1129              	.LVL127:
 1130              	.LBB124:
 1131              	.LBI124:
 213:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 1132              		.loc 3 213 44 is_stmt 1 view .LVU408
 1133              	.LBB125:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1134              		.loc 3 215 5 view .LVU409
 216:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 1135              		.loc 3 216 5 view .LVU410
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 1136              		.loc 3 218 5 view .LVU411
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1137              		.loc 3 215 15 is_stmt 0 view .LVU412
 1138 0470 28AA     		add	r2, sp, #160
 1139              	.LVL128:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1140              		.loc 3 215 15 view .LVU413
 1141              	.LBE125:
 1142              	.LBE124:
 1143              		.loc 5 334 47 view .LVU414
 1144 0472 0223     		movs	r3, #2
 1145              	.LVL129:
 1146              		.loc 5 334 47 view .LVU415
 1147 0474 1DE0     		b	.L33
 1148              	.LVL130:
 1149              	.L29:
 311:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1150              		.loc 5 311 9 is_stmt 1 view .LVU416
 311:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1151              		.loc 5 311 46 is_stmt 0 view .LVU417
ARM GAS  D:\Temp\ccEuVdRK.s 			page 53


 1152 0476 319E     		ldr	r6, [sp, #196]
 311:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1153              		.loc 5 311 36 view .LVU418
 1154 0478 03FB06F3 		mul	r3, r3, r6
 1155              	.LVL131:
 311:lvgl/src/lv_draw/lv_img_buf.h ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 1156              		.loc 5 311 12 view .LVU419
 1157 047c 5B11     		asrs	r3, r3, #5
 1158              	.LVL132:
 312:lvgl/src/lv_draw/lv_img_buf.h ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1159              		.loc 5 312 9 is_stmt 1 view .LVU420
 312:lvgl/src/lv_draw/lv_img_buf.h ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1160              		.loc 5 312 36 is_stmt 0 view .LVU421
 1161 047e 02FB06F2 		mul	r2, r2, r6
 1162              	.LVL133:
 312:lvgl/src/lv_draw/lv_img_buf.h ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1163              		.loc 5 312 12 view .LVU422
 1164 0482 5211     		asrs	r2, r2, #5
 1165              	.LVL134:
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1166              		.loc 5 313 9 is_stmt 1 view .LVU423
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1167              		.loc 5 313 24 is_stmt 0 view .LVU424
 1168 0484 2F9E     		ldr	r6, [sp, #188]
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1169              		.loc 5 313 31 view .LVU425
 1170 0486 06FB03FC 		mul	ip, r6, r3
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1171              		.loc 5 313 46 view .LVU426
 1172 048a 2E9F     		ldr	r7, [sp, #184]
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1173              		.loc 5 313 36 view .LVU427
 1174 048c 07FB12CC 		mls	ip, r7, r2, ip
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1175              		.loc 5 313 101 view .LVU428
 1176 0490 2C98     		ldr	r0, [sp, #176]
 313:lvgl/src/lv_draw/lv_img_buf.h ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 1177              		.loc 5 313 12 view .LVU429
 1178 0492 00EBAC20 		add	r0, r0, ip, asr #10
 1179 0496 0A90     		str	r0, [sp, #40]
 1180              	.LVL135:
 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1181              		.loc 5 314 9 is_stmt 1 view .LVU430
 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1182              		.loc 5 314 53 is_stmt 0 view .LVU431
 1183 0498 06FB02F6 		mul	r6, r6, r2
 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1184              		.loc 5 314 36 view .LVU432
 1185 049c 07FB0363 		mla	r3, r7, r3, r6
 1186              	.LVL136:
 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1187              		.loc 5 314 101 view .LVU433
 1188 04a0 2D9E     		ldr	r6, [sp, #180]
 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1189              		.loc 5 314 12 view .LVU434
 1190 04a2 06EBA326 		add	r6, r6, r3, asr #10
 1191              	.LVL137:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 54


 314:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1192              		.loc 5 314 12 view .LVU435
 1193 04a6 C2E7     		b	.L28
 1194              	.LVL138:
 1195              	.L34:
 1196              	.LBB127:
 1197              	.LBB126:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1198              		.loc 3 219 9 is_stmt 1 view .LVU436
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1199              		.loc 3 219 15 is_stmt 0 view .LVU437
 1200 04a8 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1201              	.LVL139:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1202              		.loc 3 219 13 view .LVU438
 1203 04ac 02F8010B 		strb	r0, [r2], #1
 1204              	.LVL140:
 220:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         s8++;
 1205              		.loc 3 220 9 is_stmt 1 view .LVU439
 221:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         len--;
 1206              		.loc 3 221 9 view .LVU440
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 1207              		.loc 3 222 9 view .LVU441
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 1208              		.loc 3 222 12 is_stmt 0 view .LVU442
 1209 04b0 013B     		subs	r3, r3, #1
 1210              	.LVL141:
 1211              	.L33:
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 1212              		.loc 3 218 10 view .LVU443
 1213 04b2 002B     		cmp	r3, #0
 1214 04b4 F8D1     		bne	.L34
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 1215              		.loc 3 218 10 view .LVU444
 1216              	.LBE126:
 1217              	.LBE127:
 331:lvgl/src/lv_draw/lv_img_buf.h **** 
 1218              		.loc 5 331 21 view .LVU445
 1219 04b6 0222     		movs	r2, #2
 1220              	.LVL142:
 1221              	.L35:
 335:lvgl/src/lv_draw/lv_img_buf.h ****         }
 336:lvgl/src/lv_draw/lv_img_buf.h ****         else {
 337:lvgl/src/lv_draw/lv_img_buf.h ****             px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 338:lvgl/src/lv_draw/lv_img_buf.h ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 339:lvgl/src/lv_draw/lv_img_buf.h ****             _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 340:lvgl/src/lv_draw/lv_img_buf.h ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 341:lvgl/src/lv_draw/lv_img_buf.h ****         }
 342:lvgl/src/lv_draw/lv_img_buf.h ****     }
 343:lvgl/src/lv_draw/lv_img_buf.h ****     else {
 344:lvgl/src/lv_draw/lv_img_buf.h ****         pxi = 0; /*unused*/
 345:lvgl/src/lv_draw/lv_img_buf.h ****         px_size = 0;    /*unused*/
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color)
 347:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 348:lvgl/src/lv_draw/lv_img_buf.h ****     }
 349:lvgl/src/lv_draw/lv_img_buf.h **** 
 350:lvgl/src/lv_draw/lv_img_buf.h ****     if(dsc->tmp.chroma_keyed) {
ARM GAS  D:\Temp\ccEuVdRK.s 			page 55


 1222              		.loc 5 350 5 is_stmt 1 view .LVU446
 1223              		.loc 5 350 8 is_stmt 0 view .LVU447
 1224 04b8 9DF8C030 		ldrb	r3, [sp, #192]	@ zero_extendqisi2
 1225              		.loc 5 350 7 view .LVU448
 1226 04bc 13F0010F 		tst	r3, #1
 1227 04c0 0ED0     		beq	.L38
 1228              	.LBB128:
 351:lvgl/src/lv_draw/lv_img_buf.h ****         lv_color_t ct = LV_COLOR_TRANSP;
 1229              		.loc 5 351 9 is_stmt 1 view .LVU449
 1230              		.loc 5 351 20 is_stmt 0 view .LVU450
 1231 04c2 BDF86C30 		ldrh	r3, [sp, #108]
 1232 04c6 6FF30403 		bfc	r3, #0, #5
 1233 04ca 43F4FC63 		orr	r3, r3, #2016
 1234 04ce 6FF3CF23 		bfc	r3, #11, #5
 1235              	.LVL143:
 1236              		.loc 5 351 20 view .LVU451
 1237 04d2 ADF86C30 		strh	r3, [sp, #108]	@ movhi
 352:lvgl/src/lv_draw/lv_img_buf.h ****         if(dsc->res.color.full == ct.full) return false;
 1238              		.loc 5 352 9 is_stmt 1 view .LVU452
 1239              		.loc 5 352 26 is_stmt 0 view .LVU453
 1240 04d6 BDF8A010 		ldrh	r1, [sp, #160]
 1241              		.loc 5 352 37 view .LVU454
 1242 04da 9BB2     		uxth	r3, r3
 1243              	.LVL144:
 1244              		.loc 5 352 11 view .LVU455
 1245 04dc 9942     		cmp	r1, r3
 1246 04de 34D0     		beq	.L85
 1247              	.L38:
 1248              	.LBE128:
 353:lvgl/src/lv_draw/lv_img_buf.h ****     }
 354:lvgl/src/lv_draw/lv_img_buf.h **** 
 355:lvgl/src/lv_draw/lv_img_buf.h ****     if(dsc->cfg.antialias == false) return true;
 1249              		.loc 5 355 5 is_stmt 1 view .LVU456
 1250              		.loc 5 355 16 is_stmt 0 view .LVU457
 1251 04e0 9DF89F30 		ldrb	r3, [sp, #159]	@ zero_extendqisi2
 1252              		.loc 5 355 7 view .LVU458
 1253 04e4 002B     		cmp	r3, #0
 1254 04e6 32D1     		bne	.L86
 1255              		.loc 5 355 44 view .LVU459
 1256 04e8 0498     		ldr	r0, [sp, #16]
 1257 04ea 43E0     		b	.L30
 1258              	.LVL145:
 1259              	.L32:
 337:lvgl/src/lv_draw/lv_img_buf.h ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 1260              		.loc 5 337 13 is_stmt 1 view .LVU460
 338:lvgl/src/lv_draw/lv_img_buf.h ****             _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 1261              		.loc 5 338 13 view .LVU461
 338:lvgl/src/lv_draw/lv_img_buf.h ****             _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 1262              		.loc 5 338 57 is_stmt 0 view .LVU462
 1263 04ec 0D9A     		ldr	r2, [sp, #52]
 1264 04ee 03FB0273 		mla	r3, r3, r2, r7
 1265 04f2 03EB4303 		add	r3, r3, r3, lsl #1
 338:lvgl/src/lv_draw/lv_img_buf.h ****             _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 1266              		.loc 5 338 21 view .LVU463
 1267 04f6 1A93     		str	r3, [sp, #104]
 1268              	.LVL146:
 339:lvgl/src/lv_draw/lv_img_buf.h ****             dsc->res.opa = src_u8[pxi + px_size - 1];
ARM GAS  D:\Temp\ccEuVdRK.s 			page 56


 1269              		.loc 5 339 13 is_stmt 1 view .LVU464
 339:lvgl/src/lv_draw/lv_img_buf.h ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 1270              		.loc 5 339 47 is_stmt 0 view .LVU465
 1271 04f8 01EB030C 		add	ip, r1, r3
 1272              	.LVL147:
 1273              	.LBB129:
 1274              	.LBI129:
 213:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** {
 1275              		.loc 3 213 44 is_stmt 1 view .LVU466
 1276              	.LBB130:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1277              		.loc 3 215 5 view .LVU467
 216:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 1278              		.loc 3 216 5 view .LVU468
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 1279              		.loc 3 218 5 view .LVU469
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1280              		.loc 3 215 15 is_stmt 0 view .LVU470
 1281 04fc 28A8     		add	r0, sp, #160
 1282              	.LVL148:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1283              		.loc 3 215 15 view .LVU471
 1284              	.LBE130:
 1285              	.LBE129:
 339:lvgl/src/lv_draw/lv_img_buf.h ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 1286              		.loc 5 339 47 view .LVU472
 1287 04fe 0222     		movs	r2, #2
 1288 0500 04E0     		b	.L36
 1289              	.LVL149:
 1290              	.L37:
 1291              	.LBB132:
 1292              	.LBB131:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1293              		.loc 3 219 9 is_stmt 1 view .LVU473
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1294              		.loc 3 219 15 is_stmt 0 view .LVU474
 1295 0502 1CF801EB 		ldrb	lr, [ip], #1	@ zero_extendqisi2
 1296              	.LVL150:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 1297              		.loc 3 219 13 view .LVU475
 1298 0506 00F801EB 		strb	lr, [r0], #1
 1299              	.LVL151:
 220:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         s8++;
 1300              		.loc 3 220 9 is_stmt 1 view .LVU476
 221:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         len--;
 1301              		.loc 3 221 9 view .LVU477
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 1302              		.loc 3 222 9 view .LVU478
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 1303              		.loc 3 222 12 is_stmt 0 view .LVU479
 1304 050a 013A     		subs	r2, r2, #1
 1305              	.LVL152:
 1306              	.L36:
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 1307              		.loc 3 218 10 view .LVU480
 1308 050c 002A     		cmp	r2, #0
 1309 050e F8D1     		bne	.L37
ARM GAS  D:\Temp\ccEuVdRK.s 			page 57


 1310              		.loc 3 225 5 is_stmt 1 view .LVU481
 1311              	.LVL153:
 1312              		.loc 3 225 5 is_stmt 0 view .LVU482
 1313              	.LBE131:
 1314              	.LBE132:
 340:lvgl/src/lv_draw/lv_img_buf.h ****         }
 1315              		.loc 5 340 13 is_stmt 1 view .LVU483
 340:lvgl/src/lv_draw/lv_img_buf.h ****         }
 1316              		.loc 5 340 34 is_stmt 0 view .LVU484
 1317 0510 1944     		add	r1, r1, r3
 1318              	.LVL154:
 340:lvgl/src/lv_draw/lv_img_buf.h ****         }
 1319              		.loc 5 340 34 view .LVU485
 1320 0512 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 1321              	.LVL155:
 340:lvgl/src/lv_draw/lv_img_buf.h ****         }
 1322              		.loc 5 340 26 view .LVU486
 1323 0514 8DF8A230 		strb	r3, [sp, #162]
 337:lvgl/src/lv_draw/lv_img_buf.h ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 1324              		.loc 5 337 21 view .LVU487
 1325 0518 0322     		movs	r2, #3
 1326 051a CDE7     		b	.L35
 1327              	.LVL156:
 1328              	.L31:
 344:lvgl/src/lv_draw/lv_img_buf.h ****         px_size = 0;    /*unused*/
 1329              		.loc 5 344 9 is_stmt 1 view .LVU488
 345:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color)
 1330              		.loc 5 345 9 view .LVU489
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 1331              		.loc 5 346 9 view .LVU490
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 1332              		.loc 5 346 26 is_stmt 0 view .LVU491
 1333 051c 39B2     		sxth	r1, r7
 1334              	.LVL157:
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 1335              		.loc 5 346 26 view .LVU492
 1336 051e BDF93420 		ldrsh	r2, [sp, #52]
 1337 0522 BDF89C30 		ldrh	r3, [sp, #156]
 1338 0526 1D92     		str	r2, [sp, #116]
 1339 0528 1A91     		str	r1, [sp, #104]
 1340 052a 29A8     		add	r0, sp, #164
 1341              	.LVL158:
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 1342              		.loc 5 346 26 view .LVU493
 1343 052c FFF7FEFF 		bl	lv_img_buf_get_px_color
 1344              	.LVL159:
 346:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 1345              		.loc 5 346 26 view .LVU494
 1346 0530 ADF8A000 		strh	r0, [sp, #160]	@ movhi
 347:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1347              		.loc 5 347 9 is_stmt 1 view .LVU495
 347:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1348              		.loc 5 347 24 is_stmt 0 view .LVU496
 1349 0534 1D9A     		ldr	r2, [sp, #116]
 1350 0536 1A99     		ldr	r1, [sp, #104]
 1351 0538 29A8     		add	r0, sp, #164
 1352 053a FFF7FEFF 		bl	lv_img_buf_get_px_alpha
ARM GAS  D:\Temp\ccEuVdRK.s 			page 58


 1353              	.LVL160:
 347:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1354              		.loc 5 347 22 view .LVU497
 1355 053e 8DF8A200 		strb	r0, [sp, #162]
 344:lvgl/src/lv_draw/lv_img_buf.h ****         px_size = 0;    /*unused*/
 1356              		.loc 5 344 13 view .LVU498
 1357 0542 0023     		movs	r3, #0
 1358 0544 1A93     		str	r3, [sp, #104]
 345:lvgl/src/lv_draw/lv_img_buf.h ****         dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color)
 1359              		.loc 5 345 17 view .LVU499
 1360 0546 1A46     		mov	r2, r3
 1361 0548 B6E7     		b	.L35
 1362              	.LVL161:
 1363              	.L85:
 1364              	.LBB133:
 352:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1365              		.loc 5 352 44 is_stmt 1 view .LVU500
 352:lvgl/src/lv_draw/lv_img_buf.h ****     }
 1366              		.loc 5 352 51 is_stmt 0 view .LVU501
 1367 054a 0020     		movs	r0, #0
 1368 054c 12E0     		b	.L30
 1369              	.L86:
 1370              	.LBE133:
 356:lvgl/src/lv_draw/lv_img_buf.h **** 
 357:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.xs = xs;
 1371              		.loc 5 357 5 is_stmt 1 view .LVU502
 1372              		.loc 5 357 17 is_stmt 0 view .LVU503
 1373 054e 0A9B     		ldr	r3, [sp, #40]
 1374 0550 ADF8C830 		strh	r3, [sp, #200]	@ movhi
 358:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.ys = ys;
 1375              		.loc 5 358 5 is_stmt 1 view .LVU504
 1376              		.loc 5 358 17 is_stmt 0 view .LVU505
 1377 0554 ADF8CA60 		strh	r6, [sp, #202]	@ movhi
 359:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.xs_int = xs_int;
 1378              		.loc 5 359 5 is_stmt 1 view .LVU506
 1379              		.loc 5 359 21 is_stmt 0 view .LVU507
 1380 0558 ADF8CC70 		strh	r7, [sp, #204]	@ movhi
 360:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.ys_int = ys_int;
 1381              		.loc 5 360 5 is_stmt 1 view .LVU508
 1382              		.loc 5 360 21 is_stmt 0 view .LVU509
 1383 055c 0D9B     		ldr	r3, [sp, #52]
 1384 055e ADF8CE30 		strh	r3, [sp, #206]	@ movhi
 361:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.pxi = pxi;
 1385              		.loc 5 361 5 is_stmt 1 view .LVU510
 1386              		.loc 5 361 18 is_stmt 0 view .LVU511
 1387 0562 1A9B     		ldr	r3, [sp, #104]
 1388 0564 3493     		str	r3, [sp, #208]
 362:lvgl/src/lv_draw/lv_img_buf.h ****     dsc->tmp.px_size = px_size;
 1389              		.loc 5 362 5 is_stmt 1 view .LVU512
 1390              		.loc 5 362 22 is_stmt 0 view .LVU513
 1391 0566 8DF8D420 		strb	r2, [sp, #212]
 363:lvgl/src/lv_draw/lv_img_buf.h **** 
 364:lvgl/src/lv_draw/lv_img_buf.h ****     bool ret;
 1392              		.loc 5 364 5 is_stmt 1 view .LVU514
 365:lvgl/src/lv_draw/lv_img_buf.h ****     ret = _lv_img_buf_transform_anti_alias(dsc);
 1393              		.loc 5 365 5 view .LVU515
 1394              		.loc 5 365 11 is_stmt 0 view .LVU516
ARM GAS  D:\Temp\ccEuVdRK.s 			page 59


 1395 056a 23A8     		add	r0, sp, #140
 1396              	.LVL162:
 1397              		.loc 5 365 11 view .LVU517
 1398 056c FFF7FEFF 		bl	_lv_img_buf_transform_anti_alias
 1399              	.LVL163:
 366:lvgl/src/lv_draw/lv_img_buf.h **** 
 367:lvgl/src/lv_draw/lv_img_buf.h ****     return ret;
 1400              		.loc 5 367 5 is_stmt 1 view .LVU518
 1401 0570 00E0     		b	.L30
 1402              	.LVL164:
 1403              	.L64:
 321:lvgl/src/lv_draw/lv_img_buf.h ****     else if(xs_int < 0) return false;
 1404              		.loc 5 321 41 is_stmt 0 view .LVU519
 1405 0572 0020     		movs	r0, #0
 1406              	.LVL165:
 1407              	.L30:
 321:lvgl/src/lv_draw/lv_img_buf.h ****     else if(xs_int < 0) return false;
 1408              		.loc 5 321 41 view .LVU520
 1409              	.LBE123:
 1410              	.LBE122:
 539:lvgl/src/lv_draw/lv_draw_img.c ****                         if(ret == false) {
 1411              		.loc 1 539 25 is_stmt 1 view .LVU521
 1412              		.loc 1 539 27 is_stmt 0 view .LVU522
 1413 0574 60B1     		cbz	r0, .L87
 540:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = LV_OPA_TRANSP;
 541:lvgl/src/lv_draw/lv_draw_img.c ****                             continue;
 542:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 543:lvgl/src/lv_draw/lv_draw_img.c ****                         else {
 544:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = trans_dsc.res.opa;
 1414              		.loc 1 544 29 is_stmt 1 view .LVU523
 1415              		.loc 1 544 59 is_stmt 0 view .LVU524
 1416 0576 9DF8A230 		ldrb	r3, [sp, #162]	@ zero_extendqisi2
 1417              		.loc 1 544 44 view .LVU525
 1418 057a 0AF80930 		strb	r3, [r10, r9]
 545:lvgl/src/lv_draw/lv_draw_img.c ****                             c.full = trans_dsc.res.color.full;
 1419              		.loc 1 545 29 is_stmt 1 view .LVU526
 1420              		.loc 1 545 36 is_stmt 0 view .LVU527
 1421 057e BDF8A030 		ldrh	r3, [sp, #160]
 1422              	.LBE121:
 1423 0582 19E0     		b	.L42
 1424              	.LVL166:
 1425              	.L65:
 1426              	.LBB136:
 1427              	.LBB135:
 1428              	.LBB134:
 322:lvgl/src/lv_draw/lv_img_buf.h **** 
 1429              		.loc 5 322 32 view .LVU528
 1430 0584 0020     		movs	r0, #0
 1431              	.LVL167:
 322:lvgl/src/lv_draw/lv_img_buf.h **** 
 1432              		.loc 5 322 32 view .LVU529
 1433 0586 F5E7     		b	.L30
 1434              	.LVL168:
 1435              	.L66:
 324:lvgl/src/lv_draw/lv_img_buf.h ****     else if(ys_int < 0) return false;
 1436              		.loc 5 324 41 view .LVU530
 1437 0588 0020     		movs	r0, #0
ARM GAS  D:\Temp\ccEuVdRK.s 			page 60


 1438              	.LVL169:
 324:lvgl/src/lv_draw/lv_img_buf.h ****     else if(ys_int < 0) return false;
 1439              		.loc 5 324 41 view .LVU531
 1440 058a F3E7     		b	.L30
 1441              	.LVL170:
 1442              	.L67:
 325:lvgl/src/lv_draw/lv_img_buf.h **** 
 1443              		.loc 5 325 32 view .LVU532
 1444 058c 0020     		movs	r0, #0
 1445              	.LVL171:
 325:lvgl/src/lv_draw/lv_img_buf.h **** 
 1446              		.loc 5 325 32 view .LVU533
 1447 058e F1E7     		b	.L30
 1448              	.LVL172:
 1449              	.L87:
 325:lvgl/src/lv_draw/lv_img_buf.h **** 
 1450              		.loc 5 325 32 view .LVU534
 1451              	.LBE134:
 1452              	.LBE135:
 540:lvgl/src/lv_draw/lv_draw_img.c ****                             continue;
 1453              		.loc 1 540 29 is_stmt 1 view .LVU535
 540:lvgl/src/lv_draw/lv_draw_img.c ****                             continue;
 1454              		.loc 1 540 44 is_stmt 0 view .LVU536
 1455 0590 0023     		movs	r3, #0
 1456 0592 0AF80930 		strb	r3, [r10, r9]
 541:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 1457              		.loc 1 541 29 is_stmt 1 view .LVU537
 1458 0596 44E0     		b	.L41
 1459              	.LVL173:
 1460              	.L43:
 541:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 1461              		.loc 1 541 29 is_stmt 0 view .LVU538
 1462              	.LBE136:
 546:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 547:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 548:lvgl/src/lv_draw/lv_draw_img.c ****                     /*No transform*/
 549:lvgl/src/lv_draw/lv_draw_img.c ****                     else
 550:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 551:lvgl/src/lv_draw/lv_draw_img.c ****                     {
 552:lvgl/src/lv_draw/lv_draw_img.c ****                         if(alpha_byte) {
 553:lvgl/src/lv_draw/lv_draw_img.c ****                             lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 554:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = px_opa;
 555:lvgl/src/lv_draw/lv_draw_img.c ****                             if(px_opa == 0) {
 556:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 557:lvgl/src/lv_draw/lv_draw_img.c ****                                 map2[px_i].full = 0;
 558:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 559:lvgl/src/lv_draw/lv_draw_img.c ****                                 continue;
 560:lvgl/src/lv_draw/lv_draw_img.c ****                             }
 561:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 562:lvgl/src/lv_draw/lv_draw_img.c ****                         else {
 563:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = 0xFF;
 1463              		.loc 1 563 29 is_stmt 1 view .LVU539
 1464              		.loc 1 563 44 is_stmt 0 view .LVU540
 1465 0598 FF23     		movs	r3, #255
 1466 059a 0AF80930 		strb	r3, [r10, r9]
 1467              	.L44:
 564:lvgl/src/lv_draw/lv_draw_img.c ****                         }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 61


 565:lvgl/src/lv_draw/lv_draw_img.c **** 
 566:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 1
 567:lvgl/src/lv_draw/lv_draw_img.c ****                         c.full = map_px[0];
 568:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 8
 569:lvgl/src/lv_draw/lv_draw_img.c ****                         c.full =  map_px[0];
 570:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 16
 571:lvgl/src/lv_draw/lv_draw_img.c ****                         c.full =  map_px[0] + (map_px[1] << 8);
 1468              		.loc 1 571 25 is_stmt 1 view .LVU541
 1469              		.loc 1 571 41 is_stmt 0 view .LVU542
 1470 059e 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1471              		.loc 1 571 54 view .LVU543
 1472 05a0 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1473              		.loc 1 571 45 view .LVU544
 1474 05a2 02EB0322 		add	r2, r2, r3, lsl #8
 1475 05a6 92B2     		uxth	r2, r2
 1476              		.loc 1 571 32 view .LVU545
 1477 05a8 1346     		mov	r3, r2	@ movhi
 1478              	.LVL174:
 572:lvgl/src/lv_draw/lv_draw_img.c **** #elif LV_COLOR_DEPTH == 32
 573:lvgl/src/lv_draw/lv_draw_img.c ****                         c.full =  *((uint32_t *)map_px);
 574:lvgl/src/lv_draw/lv_draw_img.c ****                         c.ch.alpha = 0xFF;
 575:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 576:lvgl/src/lv_draw/lv_draw_img.c ****                         if(chroma_key) {
 1479              		.loc 1 576 25 is_stmt 1 view .LVU546
 1480              		.loc 1 576 27 is_stmt 0 view .LVU547
 1481 05aa 0B99     		ldr	r1, [sp, #44]
 1482 05ac 21B1     		cbz	r1, .L42
 577:lvgl/src/lv_draw/lv_draw_img.c ****                             if(c.full == chroma_keyed_color.full) {
 1483              		.loc 1 577 29 is_stmt 1 view .LVU548
 1484              		.loc 1 577 60 is_stmt 0 view .LVU549
 1485 05ae 4FF4FC61 		mov	r1, #2016
 1486 05b2 89B2     		uxth	r1, r1
 1487              		.loc 1 577 31 view .LVU550
 1488 05b4 8A42     		cmp	r2, r1
 1489 05b6 48D0     		beq	.L88
 1490              	.L42:
 578:lvgl/src/lv_draw/lv_draw_img.c ****                                 mask_buf[px_i] = LV_OPA_TRANSP;
 579:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 580:lvgl/src/lv_draw/lv_draw_img.c ****                                 map2[px_i].full = 0;
 581:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 582:lvgl/src/lv_draw/lv_draw_img.c ****                                 continue;
 583:lvgl/src/lv_draw/lv_draw_img.c ****                             }
 584:lvgl/src/lv_draw/lv_draw_img.c ****                         }
 585:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 586:lvgl/src/lv_draw/lv_draw_img.c **** 
 587:lvgl/src/lv_draw/lv_draw_img.c ****                     if(draw_dsc->recolor_opa != 0) {
 1491              		.loc 1 587 21 is_stmt 1 view .LVU551
 1492              		.loc 1 587 32 is_stmt 0 view .LVU552
 1493 05b8 069A     		ldr	r2, [sp, #24]
 1494 05ba 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 1495              		.loc 1 587 23 view .LVU553
 1496 05bc 72B3     		cbz	r2, .L45
 588:lvgl/src/lv_draw/lv_draw_img.c ****                         c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
 1497              		.loc 1 588 25 is_stmt 1 view .LVU554
 1498              	.LVL175:
 1499              	.LBB137:
 1500              	.LBI137:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 62


 473:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 474:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     (void) mix;
 475:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 476:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 477:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 478:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 479:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 480:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 481:lvgl/src/lv_draw/../lv_misc/lv_color.h **** }
 482:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 483:lvgl/src/lv_draw/../lv_misc/lv_color.h **** /**
 484:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 485:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 486:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 487:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 488:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  *            Should be modified like mix = `255 - mix`
 489:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @return the mixed color
 490:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  * @note 255 won't give clearly `c1`.
 491:lvgl/src/lv_draw/../lv_misc/lv_color.h ****  */
 492:lvgl/src/lv_draw/../lv_misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color
 1501              		.loc 4 492 48 view .LVU555
 1502              	.LBB138:
 493:lvgl/src/lv_draw/../lv_misc/lv_color.h **** {
 494:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color_t ret;
 1503              		.loc 4 494 5 view .LVU556
 495:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 496:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 497:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROU
 1504              		.loc 4 497 5 view .LVU557
 1505 05be BDF87C10 		ldrh	r1, [sp, #124]
 1506              	.LVL176:
 1507              		.loc 4 497 5 is_stmt 0 view .LVU558
 1508 05c2 C3F3C422 		ubfx	r2, r3, #11, #5
 1509 05c6 0F98     		ldr	r0, [sp, #60]
 1510 05c8 00FB0212 		mla	r2, r0, r2, r1
 1511 05cc 8032     		adds	r2, r2, #128
 1512 05ce 02EB0221 		add	r1, r2, r2, lsl #8
 1513 05d2 02EBC112 		add	r2, r2, r1, lsl #7
 1514 05d6 C2F3C452 		ubfx	r2, r2, #23, #5
 1515 05da 62F3CF2B 		bfi	fp, r2, #11, #5
 498:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROU
 1516              		.loc 4 498 5 is_stmt 1 view .LVU559
 1517 05de BDF87E10 		ldrh	r1, [sp, #126]
 1518 05e2 C3F34512 		ubfx	r2, r3, #5, #6
 1519 05e6 02FB0012 		mla	r2, r2, r0, r1
 1520 05ea 8032     		adds	r2, r2, #128
 1521 05ec 02EB0221 		add	r1, r2, r2, lsl #8
 1522 05f0 02EBC112 		add	r2, r2, r1, lsl #7
 1523 05f4 C2F3C552 		ubfx	r2, r2, #23, #6
 1524 05f8 62F34A1B 		bfi	fp, r2, #5, #6
 499:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROU
 1525              		.loc 4 499 5 view .LVU560
 1526 05fc BDF88020 		ldrh	r2, [sp, #128]
 1527 0600 03F01F03 		and	r3, r3, #31
 1528              	.LVL177:
 1529              		.loc 4 499 5 is_stmt 0 view .LVU561
 1530 0604 03FB0023 		mla	r3, r3, r0, r2
ARM GAS  D:\Temp\ccEuVdRK.s 			page 63


 1531 0608 8033     		adds	r3, r3, #128
 1532 060a 03EB0322 		add	r2, r3, r3, lsl #8
 1533 060e 03EBC213 		add	r3, r3, r2, lsl #7
 1534 0612 C3F3C453 		ubfx	r3, r3, #23, #5
 1535 0616 63F3040B 		bfi	fp, r3, #0, #5
 500:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 1536              		.loc 4 500 5 is_stmt 1 view .LVU562
 1537              		.loc 4 500 5 view .LVU563
 501:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #else
 502:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 503:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     /*Restore color1*/
 504:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     lv_color_t c1;
 505:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 506:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 507:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 508:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 509:lvgl/src/lv_draw/../lv_misc/lv_color.h **** #endif
 510:lvgl/src/lv_draw/../lv_misc/lv_color.h **** 
 511:lvgl/src/lv_draw/../lv_misc/lv_color.h ****     return ret;
 1538              		.loc 4 511 5 view .LVU564
 1539 061a 5B46     		mov	r3, fp	@ movhi
 1540              	.LVL178:
 1541              	.L45:
 1542              		.loc 4 511 5 is_stmt 0 view .LVU565
 1543              	.LBE138:
 1544              	.LBE137:
 589:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 590:lvgl/src/lv_draw/lv_draw_img.c **** 
 591:lvgl/src/lv_draw/lv_draw_img.c ****                     map2[px_i].full = c.full;
 1545              		.loc 1 591 21 is_stmt 1 view .LVU566
 1546              		.loc 1 591 37 is_stmt 0 view .LVU567
 1547 061c 079A     		ldr	r2, [sp, #28]
 1548              	.LVL179:
 1549              		.loc 1 591 37 view .LVU568
 1550 061e 22F81930 		strh	r3, [r2, r9, lsl #1]	@ movhi
 1551              	.L41:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1552              		.loc 1 531 46 discriminator 2 view .LVU569
 1553 0622 0134     		adds	r4, r4, #1
 1554              	.LVL180:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1555              		.loc 1 531 57 discriminator 2 view .LVU570
 1556 0624 059B     		ldr	r3, [sp, #20]
 1557              	.LVL181:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1558              		.loc 1 531 57 discriminator 2 view .LVU571
 1559 0626 1D44     		add	r5, r5, r3
 1560              	.LVL182:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1561              		.loc 1 531 78 discriminator 2 view .LVU572
 1562 0628 09F10109 		add	r9, r9, #1
 1563              	.LVL183:
 1564              	.L25:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1565              		.loc 1 531 17 discriminator 1 view .LVU573
 1566 062c A045     		cmp	r8, r4
 1567 062e 10DD     		ble	.L89
ARM GAS  D:\Temp\ccEuVdRK.s 			page 64


 534:lvgl/src/lv_draw/lv_draw_img.c **** 
 1568              		.loc 1 534 21 is_stmt 1 view .LVU574
 534:lvgl/src/lv_draw/lv_draw_img.c **** 
 1569              		.loc 1 534 23 is_stmt 0 view .LVU575
 1570 0630 049B     		ldr	r3, [sp, #16]
 1571 0632 002B     		cmp	r3, #0
 1572 0634 7FF4C6AE 		bne	.L90
 552:lvgl/src/lv_draw/lv_draw_img.c ****                             lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 1573              		.loc 1 552 25 is_stmt 1 view .LVU576
 552:lvgl/src/lv_draw/lv_draw_img.c ****                             lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 1574              		.loc 1 552 27 is_stmt 0 view .LVU577
 1575 0638 099B     		ldr	r3, [sp, #36]
 1576 063a 002B     		cmp	r3, #0
 1577 063c ACD0     		beq	.L43
 1578              	.LBB139:
 553:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = px_opa;
 1579              		.loc 1 553 29 is_stmt 1 view .LVU578
 553:lvgl/src/lv_draw/lv_draw_img.c ****                             mask_buf[px_i] = px_opa;
 1580              		.loc 1 553 38 is_stmt 0 view .LVU579
 1581 063e AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1582              	.LVL184:
 554:lvgl/src/lv_draw/lv_draw_img.c ****                             if(px_opa == 0) {
 1583              		.loc 1 554 29 is_stmt 1 view .LVU580
 554:lvgl/src/lv_draw/lv_draw_img.c ****                             if(px_opa == 0) {
 1584              		.loc 1 554 44 is_stmt 0 view .LVU581
 1585 0640 0AF80930 		strb	r3, [r10, r9]
 555:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 1586              		.loc 1 555 29 is_stmt 1 view .LVU582
 555:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 1587              		.loc 1 555 31 is_stmt 0 view .LVU583
 1588 0644 002B     		cmp	r3, #0
 1589 0646 AAD1     		bne	.L44
 1590 0648 EBE7     		b	.L41
 1591              	.LVL185:
 1592              	.L88:
 555:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 1593              		.loc 1 555 31 view .LVU584
 1594              	.LBE139:
 578:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 1595              		.loc 1 578 33 is_stmt 1 view .LVU585
 578:lvgl/src/lv_draw/lv_draw_img.c **** #if LV_COLOR_DEPTH == 32
 1596              		.loc 1 578 48 is_stmt 0 view .LVU586
 1597 064a 0023     		movs	r3, #0
 1598 064c 0AF80930 		strb	r3, [r10, r9]
 582:lvgl/src/lv_draw/lv_draw_img.c ****                             }
 1599              		.loc 1 582 33 is_stmt 1 view .LVU587
 1600 0650 E7E7     		b	.L41
 1601              	.L89:
 592:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 593:lvgl/src/lv_draw/lv_draw_img.c **** 
 594:lvgl/src/lv_draw/lv_draw_img.c ****                 /*Apply the masks if any*/
 595:lvgl/src/lv_draw/lv_draw_img.c ****                 if(other_mask_cnt) {
 1602              		.loc 1 595 17 view .LVU588
 1603              		.loc 1 595 19 is_stmt 0 view .LVU589
 1604 0652 139B     		ldr	r3, [sp, #76]
 1605 0654 7BBB     		cbnz	r3, .L91
 1606              	.LVL186:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 65


 1607              	.L47:
 596:lvgl/src/lv_draw/lv_draw_img.c ****                     lv_draw_mask_res_t mask_res_sub;
 597:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->ar
 598:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 599:lvgl/src/lv_draw/lv_draw_img.c ****                     if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 600:lvgl/src/lv_draw/lv_draw_img.c ****                         _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 601:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 602:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 603:lvgl/src/lv_draw/lv_draw_img.c ****                     else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 604:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 605:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 606:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 607:lvgl/src/lv_draw/lv_draw_img.c **** 
 608:lvgl/src/lv_draw/lv_draw_img.c ****                 map_buf_tmp += map_w * px_size_byte;
 1608              		.loc 1 608 17 is_stmt 1 view .LVU590
 1609              		.loc 1 608 29 is_stmt 0 view .LVU591
 1610 0656 179B     		ldr	r3, [sp, #92]
 1611 0658 189A     		ldr	r2, [sp, #96]
 1612 065a 0E99     		ldr	r1, [sp, #56]
 1613 065c 02FB0313 		mla	r3, r2, r3, r1
 1614 0660 0E93     		str	r3, [sp, #56]
 1615              	.LVL187:
 609:lvgl/src/lv_draw/lv_draw_img.c ****                 if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 1616              		.loc 1 609 17 is_stmt 1 view .LVU592
 1617              	.LBB140:
 1618              	.LBI140:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 1619              		.loc 2 107 26 view .LVU593
 1620              	.LBB141:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1621              		.loc 2 109 5 view .LVU594
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1622              		.loc 2 109 31 is_stmt 0 view .LVU595
 1623 0662 BDF8DC30 		ldrh	r3, [sp, #220]
 1624              	.LVL188:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1625              		.loc 2 109 44 view .LVU596
 1626 0666 BDF8D820 		ldrh	r2, [sp, #216]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1627              		.loc 2 109 36 view .LVU597
 1628 066a 9B1A     		subs	r3, r3, r2
 1629 066c 9BB2     		uxth	r3, r3
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1630              		.loc 2 109 49 view .LVU598
 1631 066e 0133     		adds	r3, r3, #1
 1632              	.LVL189:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1633              		.loc 2 109 49 view .LVU599
 1634              	.LBE141:
 1635              	.LBE140:
 1636              		.loc 1 609 25 view .LVU600
 1637 0670 09FA83F3 		sxtah	r3, r9, r3
 1638              		.loc 1 609 19 view .LVU601
 1639 0674 159A     		ldr	r2, [sp, #84]
 1640 0676 9342     		cmp	r3, r2
 1641 0678 4AD2     		bcs	.L49
 610:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 ++;
ARM GAS  D:\Temp\ccEuVdRK.s 			page 66


 1642              		.loc 1 610 21 is_stmt 1 view .LVU602
 1643              		.loc 1 610 31 is_stmt 0 view .LVU603
 1644 067a BDF98A30 		ldrsh	r3, [sp, #138]
 1645              		.loc 1 610 35 view .LVU604
 1646 067e 0133     		adds	r3, r3, #1
 1647 0680 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 1648 0684 CDF84490 		str	r9, [sp, #68]
 1649              	.LVL190:
 1650              	.L50:
 1651              		.loc 1 610 35 view .LVU605
 1652              	.LBE120:
 524:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 1653              		.loc 1 524 42 discriminator 2 view .LVU606
 1654 0688 089B     		ldr	r3, [sp, #32]
 1655 068a 0133     		adds	r3, r3, #1
 1656 068c 0893     		str	r3, [sp, #32]
 1657              	.LVL191:
 1658              	.L24:
 524:lvgl/src/lv_draw/lv_draw_img.c ****                 map_px = map_buf_tmp;
 1659              		.loc 1 524 13 discriminator 1 view .LVU607
 1660 068e 169B     		ldr	r3, [sp, #88]
 1661 0690 089A     		ldr	r2, [sp, #32]
 1662 0692 9342     		cmp	r3, r2
 1663 0694 75DD     		ble	.L92
 1664              	.LBB147:
 525:lvgl/src/lv_draw/lv_draw_img.c ****                 uint32_t px_i_start = px_i;
 1665              		.loc 1 525 17 is_stmt 1 view .LVU608
 1666              	.LVL192:
 526:lvgl/src/lv_draw/lv_draw_img.c **** 
 1667              		.loc 1 526 17 view .LVU609
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1668              		.loc 1 529 17 view .LVU610
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1669              		.loc 1 529 42 is_stmt 0 view .LVU611
 1670 0696 129B     		ldr	r3, [sp, #72]
 1671 0698 B3F91030 		ldrsh	r3, [r3, #16]
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1672              		.loc 1 529 58 view .LVU612
 1673 069c BDF9D820 		ldrsh	r2, [sp, #216]
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1674              		.loc 1 529 47 view .LVU613
 1675 06a0 1344     		add	r3, r3, r2
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1676              		.loc 1 529 72 view .LVU614
 1677 06a2 149A     		ldr	r2, [sp, #80]
 1678 06a4 B2F90020 		ldrsh	r2, [r2]
 529:lvgl/src/lv_draw/lv_draw_img.c **** #endif
 1679              		.loc 1 529 25 view .LVU615
 1680 06a8 9B1A     		subs	r3, r3, r2
 1681 06aa 0C93     		str	r3, [sp, #48]
 1682              	.LVL193:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1683              		.loc 1 531 17 is_stmt 1 view .LVU616
 525:lvgl/src/lv_draw/lv_draw_img.c ****                 uint32_t px_i_start = px_i;
 1684              		.loc 1 525 24 is_stmt 0 view .LVU617
 1685 06ac 0E9D     		ldr	r5, [sp, #56]
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 67


 1686              		.loc 1 531 17 view .LVU618
 1687 06ae DDF84490 		ldr	r9, [sp, #68]
 1688              	.LVL194:
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1689              		.loc 1 531 23 view .LVU619
 1690 06b2 0024     		movs	r4, #0
 531:lvgl/src/lv_draw/lv_draw_img.c **** 
 1691              		.loc 1 531 17 view .LVU620
 1692 06b4 BAE7     		b	.L25
 1693              	.LVL195:
 1694              	.L91:
 1695              	.LBB142:
 596:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->ar
 1696              		.loc 1 596 21 is_stmt 1 view .LVU621
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1697              		.loc 1 597 21 view .LVU622
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1698              		.loc 1 597 36 is_stmt 0 view .LVU623
 1699 06b6 119B     		ldr	r3, [sp, #68]
 1700 06b8 5344     		add	r3, r3, r10
 1701 06ba 1C46     		mov	r4, r3
 1702              	.LVL196:
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1703              		.loc 1 597 87 view .LVU624
 1704 06bc BDF8D800 		ldrh	r0, [sp, #216]
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1705              		.loc 1 597 102 view .LVU625
 1706 06c0 129B     		ldr	r3, [sp, #72]
 1707 06c2 198A     		ldrh	r1, [r3, #16]
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1708              		.loc 1 597 91 view .LVU626
 1709 06c4 0144     		add	r1, r1, r0
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1710              		.loc 1 597 120 view .LVU627
 1711 06c6 BDF8DA20 		ldrh	r2, [sp, #218]
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1712              		.loc 1 597 109 view .LVU628
 1713 06ca 089D     		ldr	r5, [sp, #32]
 1714              	.LVL197:
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1715              		.loc 1 597 109 view .LVU629
 1716 06cc 2A44     		add	r2, r2, r5
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1717              		.loc 1 597 135 view .LVU630
 1718 06ce 5B8A     		ldrh	r3, [r3, #18]
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1719              		.loc 1 597 124 view .LVU631
 1720 06d0 13FA82F2 		uxtah	r2, r3, r2
 1721              	.LVL198:
 1722              	.LBB143:
 1723              	.LBI143:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 1724              		.loc 2 107 26 is_stmt 1 view .LVU632
 1725              	.LBB144:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1726              		.loc 2 109 5 view .LVU633
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 68


 1727              		.loc 2 109 31 is_stmt 0 view .LVU634
 1728 06d4 BDF8DC30 		ldrh	r3, [sp, #220]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1729              		.loc 2 109 36 view .LVU635
 1730 06d8 1B1A     		subs	r3, r3, r0
 1731 06da 9BB2     		uxth	r3, r3
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1732              		.loc 2 109 49 view .LVU636
 1733 06dc 0133     		adds	r3, r3, #1
 1734              	.LVL199:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1735              		.loc 2 109 49 view .LVU637
 1736              	.LBE144:
 1737              	.LBE143:
 597:lvgl/src/lv_draw/lv_draw_img.c ****                                                       lv_area_get_width(&draw_area));
 1738              		.loc 1 597 36 view .LVU638
 1739 06de 1BB2     		sxth	r3, r3
 1740 06e0 12B2     		sxth	r2, r2
 1741 06e2 09B2     		sxth	r1, r1
 1742 06e4 2046     		mov	r0, r4
 1743 06e6 FFF7FEFF 		bl	lv_draw_mask_apply
 1744              	.LVL200:
 599:lvgl/src/lv_draw/lv_draw_img.c ****                         _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 1745              		.loc 1 599 21 is_stmt 1 view .LVU639
 599:lvgl/src/lv_draw/lv_draw_img.c ****                         _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 1746              		.loc 1 599 23 is_stmt 0 view .LVU640
 1747 06ea 18B1     		cbz	r0, .L93
 603:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 1748              		.loc 1 603 26 is_stmt 1 view .LVU641
 603:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 1749              		.loc 1 603 28 is_stmt 0 view .LVU642
 1750 06ec 0228     		cmp	r0, #2
 1751 06ee B2D1     		bne	.L47
 604:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 1752              		.loc 1 604 34 view .LVU643
 1753 06f0 1990     		str	r0, [sp, #100]
 1754              	.LVL201:
 604:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 1755              		.loc 1 604 34 view .LVU644
 1756 06f2 B0E7     		b	.L47
 1757              	.LVL202:
 1758              	.L93:
 600:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 1759              		.loc 1 600 25 is_stmt 1 view .LVU645
 1760              	.LBB145:
 1761              	.LBI145:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 1762              		.loc 2 107 26 view .LVU646
 1763              	.LBB146:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1764              		.loc 2 109 5 view .LVU647
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1765              		.loc 2 109 31 is_stmt 0 view .LVU648
 1766 06f4 BDF8DC10 		ldrh	r1, [sp, #220]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1767              		.loc 2 109 44 view .LVU649
 1768 06f8 BDF8D830 		ldrh	r3, [sp, #216]
ARM GAS  D:\Temp\ccEuVdRK.s 			page 69


 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1769              		.loc 2 109 36 view .LVU650
 1770 06fc C91A     		subs	r1, r1, r3
 1771 06fe 89B2     		uxth	r1, r1
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1772              		.loc 2 109 49 view .LVU651
 1773 0700 0131     		adds	r1, r1, #1
 1774              	.LVL203:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 1775              		.loc 2 109 49 view .LVU652
 1776              	.LBE146:
 1777              	.LBE145:
 600:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 1778              		.loc 1 600 25 view .LVU653
 1779 0702 09B2     		sxth	r1, r1
 1780 0704 2046     		mov	r0, r4
 1781              	.LVL204:
 600:lvgl/src/lv_draw/lv_draw_img.c ****                         mask_res = LV_DRAW_MASK_RES_CHANGED;
 1782              		.loc 1 600 25 view .LVU654
 1783 0706 FFF7FEFF 		bl	_lv_memset_00
 1784              	.LVL205:
 601:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 1785              		.loc 1 601 25 is_stmt 1 view .LVU655
 601:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 1786              		.loc 1 601 34 is_stmt 0 view .LVU656
 1787 070a 0223     		movs	r3, #2
 1788 070c 1993     		str	r3, [sp, #100]
 1789 070e A2E7     		b	.L47
 1790              	.LVL206:
 1791              	.L49:
 601:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 1792              		.loc 1 601 34 view .LVU657
 1793              	.LBE142:
 611:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 612:lvgl/src/lv_draw/lv_draw_img.c ****                 else {
 613:lvgl/src/lv_draw/lv_draw_img.c **** 
 614:lvgl/src/lv_draw/lv_draw_img.c ****                     _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, 
 1794              		.loc 1 614 21 is_stmt 1 view .LVU658
 1795 0710 069C     		ldr	r4, [sp, #24]
 1796 0712 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1797 0714 0293     		str	r3, [sp, #8]
 1798 0716 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1799 0718 0193     		str	r3, [sp, #4]
 1800 071a 199B     		ldr	r3, [sp, #100]
 1801 071c 0093     		str	r3, [sp]
 1802 071e 5346     		mov	r3, r10
 1803 0720 079A     		ldr	r2, [sp, #28]
 1804 0722 21A9     		add	r1, sp, #132
 1805 0724 1C98     		ldr	r0, [sp, #112]
 1806 0726 FFF7FEFF 		bl	_lv_blend_map
 1807              	.LVL207:
 615:lvgl/src/lv_draw/lv_draw_img.c **** 
 616:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y1 = blend_area.y2 + 1;
 1808              		.loc 1 616 21 view .LVU659
 1809              		.loc 1 616 47 is_stmt 0 view .LVU660
 1810 072a BDF88A30 		ldrh	r3, [sp, #138]
 1811              		.loc 1 616 51 view .LVU661
ARM GAS  D:\Temp\ccEuVdRK.s 			page 70


 1812 072e 0133     		adds	r3, r3, #1
 1813 0730 1BB2     		sxth	r3, r3
 1814              		.loc 1 616 35 view .LVU662
 1815 0732 ADF88630 		strh	r3, [sp, #134]	@ movhi
 617:lvgl/src/lv_draw/lv_draw_img.c ****                     blend_area.y2 = blend_area.y1;
 1816              		.loc 1 617 21 is_stmt 1 view .LVU663
 1817              		.loc 1 617 35 is_stmt 0 view .LVU664
 1818 0736 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 618:lvgl/src/lv_draw/lv_draw_img.c **** 
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     px_i = 0;
 1819              		.loc 1 619 21 is_stmt 1 view .LVU665
 1820              	.LVL208:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1821              		.loc 1 620 21 view .LVU666
 1822              		.loc 1 620 30 is_stmt 0 view .LVU667
 1823 073a 099B     		ldr	r3, [sp, #36]
 1824 073c 53B9     		cbnz	r3, .L70
 1825              		.loc 1 620 44 discriminator 2 view .LVU668
 1826 073e 0B9B     		ldr	r3, [sp, #44]
 1827 0740 7BB9     		cbnz	r3, .L71
 1828              		.loc 1 620 69 discriminator 4 view .LVU669
 1829 0742 6388     		ldrh	r3, [r4, #2]
 1830              		.loc 1 620 58 discriminator 4 view .LVU670
 1831 0744 83B9     		cbnz	r3, .L72
 621:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1832              		.loc 1 621 41 discriminator 6 view .LVU671
 1833 0746 2389     		ldrh	r3, [r4, #8]
 620:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1834              		.loc 1 620 77 discriminator 6 view .LVU672
 1835 0748 B3F5807F 		cmp	r3, #256
 1836 074c 0FD0     		beq	.L73
 620:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1837              		.loc 1 620 30 view .LVU673
 1838 074e 0223     		movs	r3, #2
 1839 0750 1993     		str	r3, [sp, #100]
 1840              	.LVL209:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1841              		.loc 1 620 30 view .LVU674
 1842 0752 01E0     		b	.L51
 1843              	.LVL210:
 1844              	.L70:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1845              		.loc 1 620 30 view .LVU675
 1846 0754 0223     		movs	r3, #2
 1847 0756 1993     		str	r3, [sp, #100]
 1848              	.LVL211:
 1849              	.L51:
 622:lvgl/src/lv_draw/lv_draw_img.c **** 
 623:lvgl/src/lv_draw/lv_draw_img.c ****                     /*Prepare the `mask_buf`if there are other masks*/
 624:lvgl/src/lv_draw/lv_draw_img.c ****                     if(other_mask_cnt) {
 1850              		.loc 1 624 21 is_stmt 1 discriminator 10 view .LVU676
 1851              		.loc 1 624 23 is_stmt 0 discriminator 10 view .LVU677
 1852 0758 139B     		ldr	r3, [sp, #76]
 1853 075a 5BB9     		cbnz	r3, .L94
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1854              		.loc 1 619 26 view .LVU678
 1855 075c 0023     		movs	r3, #0
ARM GAS  D:\Temp\ccEuVdRK.s 			page 71


 1856 075e 1193     		str	r3, [sp, #68]
 1857              	.LVL212:
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1858              		.loc 1 619 26 view .LVU679
 1859 0760 92E7     		b	.L50
 1860              	.LVL213:
 1861              	.L71:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1862              		.loc 1 620 30 view .LVU680
 1863 0762 0223     		movs	r3, #2
 1864 0764 1993     		str	r3, [sp, #100]
 1865              	.LVL214:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1866              		.loc 1 620 30 view .LVU681
 1867 0766 F7E7     		b	.L51
 1868              	.LVL215:
 1869              	.L72:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1870              		.loc 1 620 30 view .LVU682
 1871 0768 0223     		movs	r3, #2
 1872 076a 1993     		str	r3, [sp, #100]
 1873              	.LVL216:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1874              		.loc 1 620 30 view .LVU683
 1875 076c F4E7     		b	.L51
 1876              	.LVL217:
 1877              	.L73:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1878              		.loc 1 620 30 view .LVU684
 1879 076e 0123     		movs	r3, #1
 1880 0770 1993     		str	r3, [sp, #100]
 1881              	.LVL218:
 620:lvgl/src/lv_draw/lv_draw_img.c ****                                 draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV
 1882              		.loc 1 620 30 view .LVU685
 1883 0772 F1E7     		b	.L51
 1884              	.LVL219:
 1885              	.L94:
 625:lvgl/src/lv_draw/lv_draw_img.c ****                         _lv_memset_ff(mask_buf, mask_buf_size);
 1886              		.loc 1 625 25 is_stmt 1 view .LVU686
 1887 0774 1599     		ldr	r1, [sp, #84]
 1888 0776 5046     		mov	r0, r10
 1889 0778 FFF7FEFF 		bl	_lv_memset_ff
 1890              	.LVL220:
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1891              		.loc 1 619 26 is_stmt 0 view .LVU687
 1892 077c 0023     		movs	r3, #0
 1893 077e 1193     		str	r3, [sp, #68]
 1894              	.LVL221:
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1895              		.loc 1 619 26 view .LVU688
 1896 0780 82E7     		b	.L50
 1897              	.LVL222:
 1898              	.L92:
 619:lvgl/src/lv_draw/lv_draw_img.c ****                     mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 1899              		.loc 1 619 26 view .LVU689
 1900 0782 D346     		mov	fp, r10
 1901              	.LBE147:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 72


 626:lvgl/src/lv_draw/lv_draw_img.c ****                     }
 627:lvgl/src/lv_draw/lv_draw_img.c ****                 }
 628:lvgl/src/lv_draw/lv_draw_img.c ****             }
 629:lvgl/src/lv_draw/lv_draw_img.c **** 
 630:lvgl/src/lv_draw/lv_draw_img.c ****             /*Flush the last part*/
 631:lvgl/src/lv_draw/lv_draw_img.c ****             if(blend_area.y1 != blend_area.y2) {
 1902              		.loc 1 631 13 is_stmt 1 view .LVU690
 1903              		.loc 1 631 26 is_stmt 0 view .LVU691
 1904 0784 BDF98620 		ldrsh	r2, [sp, #134]
 1905              	.LVL223:
 1906              		.loc 1 631 43 view .LVU692
 1907 0788 BDF98A30 		ldrsh	r3, [sp, #138]
 1908              		.loc 1 631 15 view .LVU693
 1909 078c 9A42     		cmp	r2, r3
 1910 078e 08D1     		bne	.L95
 1911              	.L53:
 632:lvgl/src/lv_draw/lv_draw_img.c ****                 blend_area.y2--;
 633:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw
 634:lvgl/src/lv_draw/lv_draw_img.c ****             }
 635:lvgl/src/lv_draw/lv_draw_img.c **** 
 636:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_mem_buf_release(mask_buf);
 1912              		.loc 1 636 13 is_stmt 1 view .LVU694
 1913 0790 5846     		mov	r0, fp
 1914 0792 FFF7FEFF 		bl	_lv_mem_buf_release
 1915              	.LVL224:
 637:lvgl/src/lv_draw/lv_draw_img.c ****             _lv_mem_buf_release(map2);
 1916              		.loc 1 637 13 view .LVU695
 1917 0796 0798     		ldr	r0, [sp, #28]
 1918 0798 FFF7FEFF 		bl	_lv_mem_buf_release
 1919              	.LVL225:
 1920              	.L1:
 1921              		.loc 1 637 13 is_stmt 0 view .LVU696
 1922              	.LBE155:
 1923              	.LBE158:
 638:lvgl/src/lv_draw/lv_draw_img.c ****         }
 639:lvgl/src/lv_draw/lv_draw_img.c ****     }
 640:lvgl/src/lv_draw/lv_draw_img.c **** }
 1924              		.loc 1 640 1 view .LVU697
 1925 079c 39B0     		add	sp, sp, #228
 1926              	.LCFI2:
 1927              		.cfi_remember_state
 1928              		.cfi_def_cfa_offset 36
 1929              		@ sp needed
 1930 079e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1931              	.LVL226:
 1932              	.L95:
 1933              	.LCFI3:
 1934              		.cfi_restore_state
 1935              	.LBB159:
 1936              	.LBB156:
 632:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw
 1937              		.loc 1 632 17 is_stmt 1 view .LVU698
 632:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw
 1938              		.loc 1 632 30 is_stmt 0 view .LVU699
 1939 07a2 013B     		subs	r3, r3, #1
 1940 07a4 ADF88A30 		strh	r3, [sp, #138]	@ movhi
 633:lvgl/src/lv_draw/lv_draw_img.c ****             }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 73


 1941              		.loc 1 633 17 is_stmt 1 view .LVU700
 1942 07a8 069A     		ldr	r2, [sp, #24]
 1943 07aa 937B     		ldrb	r3, [r2, #14]	@ zero_extendqisi2
 1944 07ac 0293     		str	r3, [sp, #8]
 1945 07ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1946 07b0 0193     		str	r3, [sp, #4]
 1947 07b2 199B     		ldr	r3, [sp, #100]
 1948 07b4 0093     		str	r3, [sp]
 1949 07b6 5346     		mov	r3, r10
 1950 07b8 079A     		ldr	r2, [sp, #28]
 1951 07ba 21A9     		add	r1, sp, #132
 1952 07bc 1C98     		ldr	r0, [sp, #112]
 1953 07be FFF7FEFF 		bl	_lv_blend_map
 1954              	.LVL227:
 1955 07c2 E5E7     		b	.L53
 1956              	.LBE156:
 1957              	.LBE159:
 1958              		.cfi_endproc
 1959              	.LFE465:
 1961              		.section	.text.show_error,"ax",%progbits
 1962              		.align	1
 1963              		.syntax unified
 1964              		.thumb
 1965              		.thumb_func
 1966              		.fpu fpv4-sp-d16
 1968              	show_error:
 1969              	.LVL228:
 1970              	.LFB466:
 641:lvgl/src/lv_draw/lv_draw_img.c **** 
 642:lvgl/src/lv_draw/lv_draw_img.c **** static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
 643:lvgl/src/lv_draw/lv_draw_img.c **** {
 1971              		.loc 1 643 1 view -0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 120
 1974              		@ frame_needed = 0, uses_anonymous_args = 0
 1975              		.loc 1 643 1 is_stmt 0 view .LVU702
 1976 0000 70B5     		push	{r4, r5, r6, lr}
 1977              	.LCFI4:
 1978              		.cfi_def_cfa_offset 16
 1979              		.cfi_offset 4, -16
 1980              		.cfi_offset 5, -12
 1981              		.cfi_offset 6, -8
 1982              		.cfi_offset 14, -4
 1983 0002 A0B0     		sub	sp, sp, #128
 1984              	.LCFI5:
 1985              		.cfi_def_cfa_offset 144
 1986 0004 0446     		mov	r4, r0
 1987 0006 0D46     		mov	r5, r1
 1988 0008 1646     		mov	r6, r2
 644:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_rect_dsc_t rect_dsc;
 1989              		.loc 1 644 5 is_stmt 1 view .LVU703
 645:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_rect_dsc_init(&rect_dsc);
 1990              		.loc 1 645 5 view .LVU704
 1991 000a 0BA8     		add	r0, sp, #44
 1992              	.LVL229:
 1993              		.loc 1 645 5 is_stmt 0 view .LVU705
 1994 000c FFF7FEFF 		bl	lv_draw_rect_dsc_init
ARM GAS  D:\Temp\ccEuVdRK.s 			page 74


 1995              	.LVL230:
 646:lvgl/src/lv_draw/lv_draw_img.c ****     rect_dsc.bg_color = LV_COLOR_WHITE;
 1996              		.loc 1 646 5 is_stmt 1 view .LVU706
 1997              		.loc 1 646 23 is_stmt 0 view .LVU707
 1998 0010 0A4B     		ldr	r3, .L98
 1999 0012 1B88     		ldrh	r3, [r3]
 2000 0014 ADF82E30 		strh	r3, [sp, #46]	@ movhi
 647:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_rect(coords, clip_area, &rect_dsc);
 2001              		.loc 1 647 5 is_stmt 1 view .LVU708
 2002 0018 0BAA     		add	r2, sp, #44
 2003 001a 2946     		mov	r1, r5
 2004 001c 2046     		mov	r0, r4
 2005 001e FFF7FEFF 		bl	lv_draw_rect
 2006              	.LVL231:
 648:lvgl/src/lv_draw/lv_draw_img.c **** 
 649:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_label_dsc_t label_dsc;
 2007              		.loc 1 649 5 view .LVU709
 650:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_label_dsc_init(&label_dsc);
 2008              		.loc 1 650 5 view .LVU710
 2009 0022 02A8     		add	r0, sp, #8
 2010 0024 FFF7FEFF 		bl	lv_draw_label_dsc_init
 2011              	.LVL232:
 651:lvgl/src/lv_draw/lv_draw_img.c ****     lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 2012              		.loc 1 651 5 view .LVU711
 2013 0028 0023     		movs	r3, #0
 2014 002a 0093     		str	r3, [sp]
 2015 002c 3346     		mov	r3, r6
 2016 002e 02AA     		add	r2, sp, #8
 2017 0030 2946     		mov	r1, r5
 2018 0032 2046     		mov	r0, r4
 2019 0034 FFF7FEFF 		bl	lv_draw_label
 2020              	.LVL233:
 652:lvgl/src/lv_draw/lv_draw_img.c **** }
 2021              		.loc 1 652 1 is_stmt 0 view .LVU712
 2022 0038 20B0     		add	sp, sp, #128
 2023              	.LCFI6:
 2024              		.cfi_def_cfa_offset 16
 2025              		@ sp needed
 2026 003a 70BD     		pop	{r4, r5, r6, pc}
 2027              	.LVL234:
 2028              	.L99:
 2029              		.loc 1 652 1 view .LVU713
 2030              		.align	2
 2031              	.L98:
 2032 003c 00000000 		.word	.LANCHOR0
 2033              		.cfi_endproc
 2034              	.LFE466:
 2036              		.section	.text.lv_draw_img_dsc_init,"ax",%progbits
 2037              		.align	1
 2038              		.global	lv_draw_img_dsc_init
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.fpu fpv4-sp-d16
 2044              	lv_draw_img_dsc_init:
 2045              	.LVL235:
 2046              	.LFB458:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 75


  58:lvgl/src/lv_draw/lv_draw_img.c ****     _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 2047              		.loc 1 58 1 is_stmt 1 view -0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 0, uses_anonymous_args = 0
  58:lvgl/src/lv_draw/lv_draw_img.c ****     _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 2051              		.loc 1 58 1 is_stmt 0 view .LVU715
 2052 0000 10B5     		push	{r4, lr}
 2053              	.LCFI7:
 2054              		.cfi_def_cfa_offset 8
 2055              		.cfi_offset 4, -8
 2056              		.cfi_offset 14, -4
 2057 0002 0446     		mov	r4, r0
  59:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->recolor = LV_COLOR_BLACK;
 2058              		.loc 1 59 5 is_stmt 1 view .LVU716
 2059 0004 1021     		movs	r1, #16
 2060 0006 FFF7FEFF 		bl	_lv_memset_00
 2061              	.LVL236:
  60:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->opa = LV_OPA_COVER;
 2062              		.loc 1 60 5 view .LVU717
  60:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->opa = LV_OPA_COVER;
 2063              		.loc 1 60 18 is_stmt 0 view .LVU718
 2064 000a 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2065 000c 6FF30403 		bfc	r3, #0, #5
 2066 0010 2373     		strb	r3, [r4, #12]
 2067 0012 A389     		ldrh	r3, [r4, #12]
 2068 0014 6FF34A13 		bfc	r3, #5, #6
 2069 0018 A381     		strh	r3, [r4, #12]	@ movhi
 2070 001a C3F30723 		ubfx	r3, r3, #8, #8
 2071 001e 6FF3C703 		bfc	r3, #3, #5
 2072 0022 6373     		strb	r3, [r4, #13]
  61:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->zoom = LV_IMG_ZOOM_NONE;
 2073              		.loc 1 61 5 is_stmt 1 view .LVU719
  61:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->zoom = LV_IMG_ZOOM_NONE;
 2074              		.loc 1 61 14 is_stmt 0 view .LVU720
 2075 0024 FF23     		movs	r3, #255
 2076 0026 2370     		strb	r3, [r4]
  62:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->antialias = LV_ANTIALIAS;
 2077              		.loc 1 62 5 is_stmt 1 view .LVU721
  62:lvgl/src/lv_draw/lv_draw_img.c ****     dsc->antialias = LV_ANTIALIAS;
 2078              		.loc 1 62 15 is_stmt 0 view .LVU722
 2079 0028 4FF48073 		mov	r3, #256
 2080 002c 2381     		strh	r3, [r4, #8]	@ movhi
  63:lvgl/src/lv_draw/lv_draw_img.c **** 
 2081              		.loc 1 63 5 is_stmt 1 view .LVU723
  63:lvgl/src/lv_draw/lv_draw_img.c **** 
 2082              		.loc 1 63 20 is_stmt 0 view .LVU724
 2083 002e E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 2084 0030 43F00103 		orr	r3, r3, #1
 2085 0034 E373     		strb	r3, [r4, #15]
  65:lvgl/src/lv_draw/lv_draw_img.c **** 
 2086              		.loc 1 65 1 view .LVU725
 2087 0036 10BD     		pop	{r4, pc}
  65:lvgl/src/lv_draw/lv_draw_img.c **** 
 2088              		.loc 1 65 1 view .LVU726
 2089              		.cfi_endproc
 2090              	.LFE458:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 76


 2092              		.section	.text.lv_img_cf_get_px_size,"ax",%progbits
 2093              		.align	1
 2094              		.global	lv_img_cf_get_px_size
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2098              		.fpu fpv4-sp-d16
 2100              	lv_img_cf_get_px_size:
 2101              	.LVL237:
 2102              	.LFB460:
 100:lvgl/src/lv_draw/lv_draw_img.c ****     uint8_t px_size = 0;
 2103              		.loc 1 100 1 is_stmt 1 view -0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107              		@ link register save eliminated.
 101:lvgl/src/lv_draw/lv_draw_img.c **** 
 2108              		.loc 1 101 5 view .LVU728
 103:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_UNKNOWN:
 2109              		.loc 1 103 5 view .LVU729
 2110 0000 0438     		subs	r0, r0, #4
 2111              	.LVL238:
 103:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_UNKNOWN:
 2112              		.loc 1 103 5 is_stmt 0 view .LVU730
 2113 0002 0A28     		cmp	r0, #10
 2114 0004 07D8     		bhi	.L103
 2115 0006 DFE800F0 		tbb	[pc, r0]
 2116              	.L105:
 2117 000a 12       		.byte	(.L111-.L105)/2
 2118 000b 08       		.byte	(.L110-.L105)/2
 2119 000c 12       		.byte	(.L111-.L105)/2
 2120 000d 0A       		.byte	(.L108-.L105)/2
 2121 000e 0C       		.byte	(.L107-.L105)/2
 2122 000f 0E       		.byte	(.L106-.L105)/2
 2123 0010 10       		.byte	(.L104-.L105)/2
 2124 0011 0A       		.byte	(.L108-.L105)/2
 2125 0012 0C       		.byte	(.L107-.L105)/2
 2126 0013 0E       		.byte	(.L106-.L105)/2
 2127 0014 10       		.byte	(.L104-.L105)/2
 2128 0015 00       		.p2align 1
 2129              	.L103:
 106:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2130              		.loc 1 106 21 view .LVU731
 2131 0016 0020     		movs	r0, #0
 2132 0018 7047     		bx	lr
 2133              	.L110:
 113:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2134              		.loc 1 113 13 is_stmt 1 view .LVU732
 2135              	.LVL239:
 114:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_1BIT:
 2136              		.loc 1 114 13 view .LVU733
 113:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2137              		.loc 1 113 21 is_stmt 0 view .LVU734
 2138 001a 1820     		movs	r0, #24
 114:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_1BIT:
 2139              		.loc 1 114 13 view .LVU735
 2140 001c 7047     		bx	lr
ARM GAS  D:\Temp\ccEuVdRK.s 			page 77


 2141              	.LVL240:
 2142              	.L108:
 117:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2143              		.loc 1 117 13 is_stmt 1 view .LVU736
 118:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_2BIT:
 2144              		.loc 1 118 13 view .LVU737
 117:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2145              		.loc 1 117 21 is_stmt 0 view .LVU738
 2146 001e 0120     		movs	r0, #1
 118:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_2BIT:
 2147              		.loc 1 118 13 view .LVU739
 2148 0020 7047     		bx	lr
 2149              	.LVL241:
 2150              	.L107:
 121:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2151              		.loc 1 121 13 is_stmt 1 view .LVU740
 122:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_4BIT:
 2152              		.loc 1 122 13 view .LVU741
 121:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2153              		.loc 1 121 21 is_stmt 0 view .LVU742
 2154 0022 0220     		movs	r0, #2
 122:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_4BIT:
 2155              		.loc 1 122 13 view .LVU743
 2156 0024 7047     		bx	lr
 2157              	.LVL242:
 2158              	.L106:
 125:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2159              		.loc 1 125 13 is_stmt 1 view .LVU744
 126:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_8BIT:
 2160              		.loc 1 126 13 view .LVU745
 125:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2161              		.loc 1 125 21 is_stmt 0 view .LVU746
 2162 0026 0420     		movs	r0, #4
 126:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_INDEXED_8BIT:
 2163              		.loc 1 126 13 view .LVU747
 2164 0028 7047     		bx	lr
 2165              	.LVL243:
 2166              	.L104:
 129:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2167              		.loc 1 129 13 is_stmt 1 view .LVU748
 130:lvgl/src/lv_draw/lv_draw_img.c ****         default:
 2168              		.loc 1 130 13 view .LVU749
 129:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2169              		.loc 1 129 21 is_stmt 0 view .LVU750
 2170 002a 0820     		movs	r0, #8
 130:lvgl/src/lv_draw/lv_draw_img.c ****         default:
 2171              		.loc 1 130 13 view .LVU751
 2172 002c 7047     		bx	lr
 2173              	.LVL244:
 2174              	.L111:
 110:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2175              		.loc 1 110 21 view .LVU752
 2176 002e 1020     		movs	r0, #16
 2177              	.LVL245:
 136:lvgl/src/lv_draw/lv_draw_img.c **** }
 2178              		.loc 1 136 5 is_stmt 1 view .LVU753
 137:lvgl/src/lv_draw/lv_draw_img.c **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 78


 2179              		.loc 1 137 1 is_stmt 0 view .LVU754
 2180 0030 7047     		bx	lr
 2181              		.cfi_endproc
 2182              	.LFE460:
 2184              		.section	.text.lv_img_cf_is_chroma_keyed,"ax",%progbits
 2185              		.align	1
 2186              		.global	lv_img_cf_is_chroma_keyed
 2187              		.syntax unified
 2188              		.thumb
 2189              		.thumb_func
 2190              		.fpu fpv4-sp-d16
 2192              	lv_img_cf_is_chroma_keyed:
 2193              	.LVL246:
 2194              	.LFB461:
 145:lvgl/src/lv_draw/lv_draw_img.c ****     bool is_chroma_keyed = false;
 2195              		.loc 1 145 1 is_stmt 1 view -0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 0
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199              		@ link register save eliminated.
 146:lvgl/src/lv_draw/lv_draw_img.c **** 
 2200              		.loc 1 146 5 view .LVU756
 148:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 2201              		.loc 1 148 5 view .LVU757
 2202 0000 0328     		cmp	r0, #3
 2203 0002 06D0     		beq	.L114
 2204 0004 07D3     		bcc	.L115
 2205 0006 0638     		subs	r0, r0, #6
 2206              	.LVL247:
 148:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 2207              		.loc 1 148 5 is_stmt 0 view .LVU758
 2208 0008 C0B2     		uxtb	r0, r0
 2209 000a 0428     		cmp	r0, #4
 2210 000c 05D8     		bhi	.L116
 155:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2211              		.loc 1 155 29 view .LVU759
 2212 000e 0120     		movs	r0, #1
 2213 0010 7047     		bx	lr
 2214              	.LVL248:
 2215              	.L114:
 155:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2216              		.loc 1 155 29 view .LVU760
 2217 0012 0120     		movs	r0, #1
 2218              	.LVL249:
 155:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2219              		.loc 1 155 29 view .LVU761
 2220 0014 7047     		bx	lr
 2221              	.LVL250:
 2222              	.L115:
 159:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2223              		.loc 1 159 29 view .LVU762
 2224 0016 0020     		movs	r0, #0
 2225              	.LVL251:
 159:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2226              		.loc 1 159 29 view .LVU763
 2227 0018 7047     		bx	lr
 2228              	.L116:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 79


 2229 001a 0020     		movs	r0, #0
 2230              	.LVL252:
 163:lvgl/src/lv_draw/lv_draw_img.c **** }
 2231              		.loc 1 163 5 is_stmt 1 view .LVU764
 164:lvgl/src/lv_draw/lv_draw_img.c **** 
 2232              		.loc 1 164 1 is_stmt 0 view .LVU765
 2233 001c 7047     		bx	lr
 2234              		.cfi_endproc
 2235              	.LFE461:
 2237              		.section	.text.lv_img_cf_has_alpha,"ax",%progbits
 2238              		.align	1
 2239              		.global	lv_img_cf_has_alpha
 2240              		.syntax unified
 2241              		.thumb
 2242              		.thumb_func
 2243              		.fpu fpv4-sp-d16
 2245              	lv_img_cf_has_alpha:
 2246              	.LVL253:
 2247              	.LFB462:
 172:lvgl/src/lv_draw/lv_draw_img.c ****     bool has_alpha = false;
 2248              		.loc 1 172 1 is_stmt 1 view -0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 0
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 2252              		@ link register save eliminated.
 173:lvgl/src/lv_draw/lv_draw_img.c **** 
 2253              		.loc 1 173 5 view .LVU767
 175:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 2254              		.loc 1 175 5 view .LVU768
 2255 0000 0238     		subs	r0, r0, #2
 2256              	.LVL254:
 175:lvgl/src/lv_draw/lv_draw_img.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 2257              		.loc 1 175 5 is_stmt 0 view .LVU769
 2258 0002 0C28     		cmp	r0, #12
 2259 0004 0AD8     		bhi	.L121
 2260 0006 DFE800F0 		tbb	[pc, r0]
 2261              	.L120:
 2262 000a 07       		.byte	(.L119-.L120)/2
 2263 000b 09       		.byte	(.L121-.L120)/2
 2264 000c 09       		.byte	(.L121-.L120)/2
 2265 000d 07       		.byte	(.L119-.L120)/2
 2266 000e 09       		.byte	(.L121-.L120)/2
 2267 000f 07       		.byte	(.L119-.L120)/2
 2268 0010 07       		.byte	(.L119-.L120)/2
 2269 0011 07       		.byte	(.L119-.L120)/2
 2270 0012 07       		.byte	(.L119-.L120)/2
 2271 0013 07       		.byte	(.L119-.L120)/2
 2272 0014 07       		.byte	(.L119-.L120)/2
 2273 0015 07       		.byte	(.L119-.L120)/2
 2274 0016 07       		.byte	(.L119-.L120)/2
 2275 0017 00       		.p2align 1
 2276              	.L119:
 186:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2277              		.loc 1 186 23 view .LVU770
 2278 0018 0120     		movs	r0, #1
 2279 001a 7047     		bx	lr
 2280              	.L121:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 80


 189:lvgl/src/lv_draw/lv_draw_img.c ****             break;
 2281              		.loc 1 189 23 view .LVU771
 2282 001c 0020     		movs	r0, #0
 2283              	.LVL255:
 193:lvgl/src/lv_draw/lv_draw_img.c **** }
 2284              		.loc 1 193 5 is_stmt 1 view .LVU772
 194:lvgl/src/lv_draw/lv_draw_img.c **** 
 2285              		.loc 1 194 1 is_stmt 0 view .LVU773
 2286 001e 7047     		bx	lr
 2287              		.cfi_endproc
 2288              	.LFE462:
 2290              		.section	.text.lv_img_draw_core,"ax",%progbits
 2291              		.align	1
 2292              		.syntax unified
 2293              		.thumb
 2294              		.thumb_func
 2295              		.fpu fpv4-sp-d16
 2297              	lv_img_draw_core:
 2298              	.LVL256:
 2299              	.LFB464:
 236:lvgl/src/lv_draw/lv_draw_img.c ****     if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 2300              		.loc 1 236 1 is_stmt 1 view -0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 48
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 236:lvgl/src/lv_draw/lv_draw_img.c ****     if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 2304              		.loc 1 236 1 is_stmt 0 view .LVU775
 2305 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2306              	.LCFI8:
 2307              		.cfi_def_cfa_offset 36
 2308              		.cfi_offset 4, -36
 2309              		.cfi_offset 5, -32
 2310              		.cfi_offset 6, -28
 2311              		.cfi_offset 7, -24
 2312              		.cfi_offset 8, -20
 2313              		.cfi_offset 9, -16
 2314              		.cfi_offset 10, -12
 2315              		.cfi_offset 11, -8
 2316              		.cfi_offset 14, -4
 2317 0004 8FB0     		sub	sp, sp, #60
 2318              	.LCFI9:
 2319              		.cfi_def_cfa_offset 96
 237:lvgl/src/lv_draw/lv_draw_img.c **** 
 2320              		.loc 1 237 5 is_stmt 1 view .LVU776
 237:lvgl/src/lv_draw/lv_draw_img.c **** 
 2321              		.loc 1 237 16 is_stmt 0 view .LVU777
 2322 0006 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 237:lvgl/src/lv_draw/lv_draw_img.c **** 
 2323              		.loc 1 237 7 view .LVU778
 2324 0008 022C     		cmp	r4, #2
 2325 000a 03D8     		bhi	.L146
 237:lvgl/src/lv_draw/lv_draw_img.c **** 
 2326              		.loc 1 237 44 view .LVU779
 2327 000c 0120     		movs	r0, #1
 2328              	.LVL257:
 2329              	.L123:
 326:lvgl/src/lv_draw/lv_draw_img.c **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 81


 2330              		.loc 1 326 1 view .LVU780
 2331 000e 0FB0     		add	sp, sp, #60
 2332              	.LCFI10:
 2333              		.cfi_remember_state
 2334              		.cfi_def_cfa_offset 36
 2335              		@ sp needed
 2336 0010 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2337              	.LVL258:
 2338              	.L146:
 2339              	.LCFI11:
 2340              		.cfi_restore_state
 326:lvgl/src/lv_draw/lv_draw_img.c **** 
 2341              		.loc 1 326 1 view .LVU781
 2342 0014 1C46     		mov	r4, r3
 2343 0016 0E46     		mov	r6, r1
 2344 0018 0391     		str	r1, [sp, #12]
 2345 001a 0546     		mov	r5, r0
 239:lvgl/src/lv_draw/lv_draw_img.c **** 
 2346              		.loc 1 239 5 is_stmt 1 view .LVU782
 239:lvgl/src/lv_draw/lv_draw_img.c **** 
 2347              		.loc 1 239 35 is_stmt 0 view .LVU783
 2348 001c 9989     		ldrh	r1, [r3, #12]
 2349              	.LVL259:
 239:lvgl/src/lv_draw/lv_draw_img.c **** 
 2350              		.loc 1 239 35 view .LVU784
 2351 001e 1046     		mov	r0, r2
 2352              	.LVL260:
 239:lvgl/src/lv_draw/lv_draw_img.c **** 
 2353              		.loc 1 239 35 view .LVU785
 2354 0020 FFF7FEFF 		bl	_lv_img_cache_open
 2355              	.LVL261:
 241:lvgl/src/lv_draw/lv_draw_img.c **** 
 2356              		.loc 1 241 5 is_stmt 1 view .LVU786
 241:lvgl/src/lv_draw/lv_draw_img.c **** 
 2357              		.loc 1 241 7 is_stmt 0 view .LVU787
 2358 0024 0746     		mov	r7, r0
 2359 0026 0028     		cmp	r0, #0
 2360 0028 00F0D280 		beq	.L141
 243:lvgl/src/lv_draw/lv_draw_img.c ****     bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 2361              		.loc 1 243 5 is_stmt 1 view .LVU788
 243:lvgl/src/lv_draw/lv_draw_img.c ****     bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 2362              		.loc 1 243 71 is_stmt 0 view .LVU789
 2363 002c 90F80C80 		ldrb	r8, [r0, #12]	@ zero_extendqisi2
 2364 0030 08F01F08 		and	r8, r8, #31
 243:lvgl/src/lv_draw/lv_draw_img.c ****     bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 2365              		.loc 1 243 25 view .LVU790
 2366 0034 4046     		mov	r0, r8
 2367              	.LVL262:
 243:lvgl/src/lv_draw/lv_draw_img.c ****     bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 2368              		.loc 1 243 25 view .LVU791
 2369 0036 FFF7FEFF 		bl	lv_img_cf_is_chroma_keyed
 2370              	.LVL263:
 2371 003a 8146     		mov	r9, r0
 2372              	.LVL264:
 244:lvgl/src/lv_draw/lv_draw_img.c **** 
 2373              		.loc 1 244 5 is_stmt 1 view .LVU792
 244:lvgl/src/lv_draw/lv_draw_img.c **** 
ARM GAS  D:\Temp\ccEuVdRK.s 			page 82


 2374              		.loc 1 244 25 is_stmt 0 view .LVU793
 2375 003c 4046     		mov	r0, r8
 2376 003e FFF7FEFF 		bl	lv_img_cf_has_alpha
 2377              	.LVL265:
 2378 0042 8246     		mov	r10, r0
 2379              	.LVL266:
 246:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 2380              		.loc 1 246 5 is_stmt 1 view .LVU794
 246:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 2381              		.loc 1 246 21 is_stmt 0 view .LVU795
 2382 0044 BA69     		ldr	r2, [r7, #24]
 246:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 2383              		.loc 1 246 7 view .LVU796
 2384 0046 2AB1     		cbz	r2, .L124
 247:lvgl/src/lv_draw/lv_draw_img.c **** 
 2385              		.loc 1 247 40 is_stmt 1 view .LVU797
 249:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2386              		.loc 1 249 9 view .LVU798
 2387 0048 3146     		mov	r1, r6
 2388 004a 2846     		mov	r0, r5
 2389 004c FFF7FEFF 		bl	show_error
 2390              	.LVL267:
 2391              	.L125:
 324:lvgl/src/lv_draw/lv_draw_img.c ****     return LV_RES_OK;
 2392              		.loc 1 324 5 view .LVU799
 325:lvgl/src/lv_draw/lv_draw_img.c **** }
 2393              		.loc 1 325 5 view .LVU800
 325:lvgl/src/lv_draw/lv_draw_img.c **** }
 2394              		.loc 1 325 12 is_stmt 0 view .LVU801
 2395 0050 0120     		movs	r0, #1
 2396 0052 DCE7     		b	.L123
 2397              	.LVL268:
 2398              	.L124:
 253:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t map_area_rot;
 2399              		.loc 1 253 10 is_stmt 1 view .LVU802
 253:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t map_area_rot;
 2400              		.loc 1 253 26 is_stmt 0 view .LVU803
 2401 0054 3B69     		ldr	r3, [r7, #16]
 253:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_t map_area_rot;
 2402              		.loc 1 253 12 view .LVU804
 2403 0056 002B     		cmp	r3, #0
 2404 0058 4CD0     		beq	.L147
 2405              	.LBB160:
 2406              	.LBB161:
 2407              	.LBB162:
 2408              	.LBB163:
 216:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 2409              		.loc 3 216 21 view .LVU805
 2410 005a 2946     		mov	r1, r5
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2411              		.loc 3 215 15 view .LVU806
 2412 005c 0AAA     		add	r2, sp, #40
 2413              	.LBE163:
 2414              	.LBE162:
 2415              	.LBE161:
 2416              	.LBE160:
 2417 005e 0823     		movs	r3, #8
ARM GAS  D:\Temp\ccEuVdRK.s 			page 83


 2418              	.L126:
 2419              	.LVL269:
 2420              	.LBB172:
 2421              	.LBB166:
 2422              	.LBB165:
 2423              	.LBB164:
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 2424              		.loc 3 218 10 view .LVU807
 2425 0060 2BB1     		cbz	r3, .L148
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2426              		.loc 3 219 9 is_stmt 1 view .LVU808
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2427              		.loc 3 219 15 is_stmt 0 view .LVU809
 2428 0062 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2429              	.LVL270:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2430              		.loc 3 219 13 view .LVU810
 2431 0066 02F8010B 		strb	r0, [r2], #1
 2432              	.LVL271:
 220:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         s8++;
 2433              		.loc 3 220 9 is_stmt 1 view .LVU811
 221:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         len--;
 2434              		.loc 3 221 9 view .LVU812
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 2435              		.loc 3 222 9 view .LVU813
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 2436              		.loc 3 222 12 is_stmt 0 view .LVU814
 2437 006a 013B     		subs	r3, r3, #1
 2438              	.LVL272:
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 2439              		.loc 3 222 12 view .LVU815
 2440 006c F8E7     		b	.L126
 2441              	.L148:
 2442              		.loc 3 225 5 is_stmt 1 view .LVU816
 2443              	.LVL273:
 2444              		.loc 3 225 5 is_stmt 0 view .LVU817
 2445              	.LBE164:
 2446              	.LBE165:
 2447              	.LBE166:
 256:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 2448              		.loc 1 256 9 is_stmt 1 view .LVU818
 256:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 2449              		.loc 1 256 20 is_stmt 0 view .LVU819
 2450 006e 6388     		ldrh	r3, [r4, #2]
 256:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 2451              		.loc 1 256 11 view .LVU820
 2452 0070 1BB9     		cbnz	r3, .L129
 256:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 2453              		.loc 1 256 39 discriminator 1 view .LVU821
 2454 0072 2289     		ldrh	r2, [r4, #8]
 256:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t w = lv_area_get_width(coords);
 2455              		.loc 1 256 28 discriminator 1 view .LVU822
 2456 0074 B2F5807F 		cmp	r2, #256
 2457 0078 29D0     		beq	.L130
 2458              	.L129:
 2459              	.LBB167:
 257:lvgl/src/lv_draw/lv_draw_img.c ****             int32_t h = lv_area_get_height(coords);
ARM GAS  D:\Temp\ccEuVdRK.s 			page 84


 2460              		.loc 1 257 13 is_stmt 1 view .LVU823
 2461              	.LVL274:
 2462              	.LBB168:
 2463              	.LBI168:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 2464              		.loc 2 107 26 view .LVU824
 2465              	.LBB169:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2466              		.loc 2 109 5 view .LVU825
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2467              		.loc 2 109 31 is_stmt 0 view .LVU826
 2468 007a A988     		ldrh	r1, [r5, #4]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2469              		.loc 2 109 44 view .LVU827
 2470 007c 2A88     		ldrh	r2, [r5]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2471              		.loc 2 109 36 view .LVU828
 2472 007e 891A     		subs	r1, r1, r2
 2473 0080 89B2     		uxth	r1, r1
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2474              		.loc 2 109 49 view .LVU829
 2475 0082 0131     		adds	r1, r1, #1
 2476              	.LVL275:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2477              		.loc 2 109 49 view .LVU830
 2478              	.LBE169:
 2479              	.LBE168:
 258:lvgl/src/lv_draw/lv_draw_img.c **** 
 2480              		.loc 1 258 13 is_stmt 1 view .LVU831
 2481              	.LBB170:
 2482              	.LBI170:
 117:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 2483              		.loc 2 117 26 view .LVU832
 2484              	.LBB171:
 2485              		.loc 2 119 5 view .LVU833
 2486              		.loc 2 119 31 is_stmt 0 view .LVU834
 2487 0084 EA88     		ldrh	r2, [r5, #6]
 2488              		.loc 2 119 44 view .LVU835
 2489 0086 6888     		ldrh	r0, [r5, #2]
 2490              		.loc 2 119 36 view .LVU836
 2491 0088 121A     		subs	r2, r2, r0
 2492 008a 92B2     		uxth	r2, r2
 2493              		.loc 2 119 49 view .LVU837
 2494 008c 0132     		adds	r2, r2, #1
 2495              	.LVL276:
 2496              		.loc 2 119 49 view .LVU838
 2497              	.LBE171:
 2498              	.LBE170:
 260:lvgl/src/lv_draw/lv_draw_img.c **** 
 2499              		.loc 1 260 13 is_stmt 1 view .LVU839
 2500 008e 201D     		adds	r0, r4, #4
 2501 0090 0190     		str	r0, [sp, #4]
 2502 0092 2089     		ldrh	r0, [r4, #8]
 2503 0094 0090     		str	r0, [sp]
 2504 0096 1BB2     		sxth	r3, r3
 2505 0098 12B2     		sxth	r2, r2
 2506              	.LVL277:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 85


 260:lvgl/src/lv_draw/lv_draw_img.c **** 
 2507              		.loc 1 260 13 is_stmt 0 view .LVU840
 2508 009a 09B2     		sxth	r1, r1
 2509              	.LVL278:
 260:lvgl/src/lv_draw/lv_draw_img.c **** 
 2510              		.loc 1 260 13 view .LVU841
 2511 009c 0AA8     		add	r0, sp, #40
 2512 009e FFF7FEFF 		bl	_lv_img_buf_get_transformed_area
 2513              	.LVL279:
 262:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y1 += coords->y1;
 2514              		.loc 1 262 13 is_stmt 1 view .LVU842
 262:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y1 += coords->y1;
 2515              		.loc 1 262 38 is_stmt 0 view .LVU843
 2516 00a2 2A88     		ldrh	r2, [r5]
 262:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y1 += coords->y1;
 2517              		.loc 1 262 29 view .LVU844
 2518 00a4 BDF82830 		ldrh	r3, [sp, #40]
 2519 00a8 1344     		add	r3, r3, r2
 2520 00aa ADF82830 		strh	r3, [sp, #40]	@ movhi
 263:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.x2 += coords->x1;
 2521              		.loc 1 263 13 is_stmt 1 view .LVU845
 263:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.x2 += coords->x1;
 2522              		.loc 1 263 38 is_stmt 0 view .LVU846
 2523 00ae 6B88     		ldrh	r3, [r5, #2]
 263:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.x2 += coords->x1;
 2524              		.loc 1 263 29 view .LVU847
 2525 00b0 BDF82A10 		ldrh	r1, [sp, #42]
 2526 00b4 1944     		add	r1, r1, r3
 2527 00b6 ADF82A10 		strh	r1, [sp, #42]	@ movhi
 264:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y2 += coords->y1;
 2528              		.loc 1 264 13 is_stmt 1 view .LVU848
 264:lvgl/src/lv_draw/lv_draw_img.c ****             map_area_rot.y2 += coords->y1;
 2529              		.loc 1 264 29 is_stmt 0 view .LVU849
 2530 00ba BDF82C10 		ldrh	r1, [sp, #44]
 2531 00be 0A44     		add	r2, r2, r1
 2532 00c0 ADF82C20 		strh	r2, [sp, #44]	@ movhi
 265:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2533              		.loc 1 265 13 is_stmt 1 view .LVU850
 265:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2534              		.loc 1 265 29 is_stmt 0 view .LVU851
 2535 00c4 BDF82E20 		ldrh	r2, [sp, #46]
 2536 00c8 1344     		add	r3, r3, r2
 2537 00ca ADF82E30 		strh	r3, [sp, #46]	@ movhi
 2538              	.L130:
 265:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2539              		.loc 1 265 29 view .LVU852
 2540              	.LBE167:
 268:lvgl/src/lv_draw/lv_draw_img.c ****         bool union_ok;
 2541              		.loc 1 268 9 is_stmt 1 view .LVU853
 269:lvgl/src/lv_draw/lv_draw_img.c ****         union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 2542              		.loc 1 269 9 view .LVU854
 270:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 2543              		.loc 1 270 9 view .LVU855
 270:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 2544              		.loc 1 270 20 is_stmt 0 view .LVU856
 2545 00ce 0AAA     		add	r2, sp, #40
 2546 00d0 0399     		ldr	r1, [sp, #12]
ARM GAS  D:\Temp\ccEuVdRK.s 			page 86


 2547 00d2 0CA8     		add	r0, sp, #48
 2548 00d4 FFF7FEFF 		bl	_lv_area_intersect
 2549              	.LVL280:
 272:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 2550              		.loc 1 272 9 is_stmt 1 view .LVU857
 272:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 2551              		.loc 1 272 11 is_stmt 0 view .LVU858
 2552 00d8 08B9     		cbnz	r0, .L131
 273:lvgl/src/lv_draw/lv_draw_img.c ****             return LV_RES_OK;
 2553              		.loc 1 273 13 is_stmt 1 view .LVU859
 274:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2554              		.loc 1 274 13 view .LVU860
 274:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2555              		.loc 1 274 20 is_stmt 0 view .LVU861
 2556 00da 0120     		movs	r0, #1
 2557              	.LVL281:
 274:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2558              		.loc 1 274 20 view .LVU862
 2559 00dc 97E7     		b	.L123
 2560              	.LVL282:
 2561              	.L131:
 277:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2562              		.loc 1 277 9 is_stmt 1 view .LVU863
 2563 00de 3A69     		ldr	r2, [r7, #16]
 2564 00e0 CDF804A0 		str	r10, [sp, #4]
 2565 00e4 CDF80090 		str	r9, [sp]
 2566 00e8 2346     		mov	r3, r4
 2567 00ea 0CA9     		add	r1, sp, #48
 2568 00ec 2846     		mov	r0, r5
 2569              	.LVL283:
 277:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2570              		.loc 1 277 9 is_stmt 0 view .LVU864
 2571 00ee FFF7FEFF 		bl	lv_draw_map
 2572              	.LVL284:
 2573              	.LBE172:
 2574 00f2 ADE7     		b	.L125
 2575              	.L147:
 2576              	.LBB173:
 281:lvgl/src/lv_draw/lv_draw_img.c ****         bool union_ok;
 2577              		.loc 1 281 9 is_stmt 1 view .LVU865
 282:lvgl/src/lv_draw/lv_draw_img.c ****         union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 2578              		.loc 1 282 9 view .LVU866
 283:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 2579              		.loc 1 283 9 view .LVU867
 283:lvgl/src/lv_draw/lv_draw_img.c ****         /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
 2580              		.loc 1 283 20 is_stmt 0 view .LVU868
 2581 00f4 2A46     		mov	r2, r5
 2582 00f6 0399     		ldr	r1, [sp, #12]
 2583 00f8 08A8     		add	r0, sp, #32
 2584 00fa FFF7FEFF 		bl	_lv_area_intersect
 2585              	.LVL285:
 285:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 2586              		.loc 1 285 9 is_stmt 1 view .LVU869
 285:lvgl/src/lv_draw/lv_draw_img.c ****             draw_cleanup(cdsc);
 2587              		.loc 1 285 11 is_stmt 0 view .LVU870
 2588 00fe 08B9     		cbnz	r0, .L149
 287:lvgl/src/lv_draw/lv_draw_img.c ****         }
ARM GAS  D:\Temp\ccEuVdRK.s 			page 87


 2589              		.loc 1 287 20 view .LVU871
 2590 0100 0120     		movs	r0, #1
 2591              	.LVL286:
 287:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2592              		.loc 1 287 20 view .LVU872
 2593 0102 84E7     		b	.L123
 2594              	.LVL287:
 2595              	.L149:
 290:lvgl/src/lv_draw/lv_draw_img.c **** 
 2596              		.loc 1 290 9 is_stmt 1 view .LVU873
 2597              	.LBB174:
 2598              	.LBI174:
 107:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 2599              		.loc 2 107 26 view .LVU874
 2600              	.LBB175:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2601              		.loc 2 109 5 view .LVU875
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2602              		.loc 2 109 31 is_stmt 0 view .LVU876
 2603 0104 BDF82430 		ldrh	r3, [sp, #36]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2604              		.loc 2 109 44 view .LVU877
 2605 0108 BDF82020 		ldrh	r2, [sp, #32]
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2606              		.loc 2 109 36 view .LVU878
 2607 010c 9B1A     		subs	r3, r3, r2
 2608 010e 9BB2     		uxth	r3, r3
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2609              		.loc 2 109 49 view .LVU879
 2610 0110 0133     		adds	r3, r3, #1
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2611              		.loc 2 109 12 view .LVU880
 2612 0112 1BB2     		sxth	r3, r3
 2613 0114 0493     		str	r3, [sp, #16]
 2614              	.LVL288:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2615              		.loc 2 109 12 view .LVU881
 2616              	.LBE175:
 2617              	.LBE174:
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2618              		.loc 1 292 9 is_stmt 1 view .LVU882
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2619              		.loc 1 292 9 is_stmt 0 view .LVU883
 2620              	.LBE173:
 109:lvgl/src/lv_draw/../lv_misc/lv_area.h **** }
 2621              		.loc 2 109 5 is_stmt 1 view .LVU884
 2622              	.LBB184:
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2623              		.loc 1 292 26 is_stmt 0 view .LVU885
 2624 0116 03EB4300 		add	r0, r3, r3, lsl #1
 2625              	.LVL289:
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2626              		.loc 1 292 26 view .LVU886
 2627 011a FFF7FEFF 		bl	_lv_mem_buf_get
 2628              	.LVL290:
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2629              		.loc 1 292 26 view .LVU887
ARM GAS  D:\Temp\ccEuVdRK.s 			page 88


 2630 011e 0790     		str	r0, [sp, #28]
 2631              	.LVL291:
 295:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_copy(&line, &mask_com);
 2632              		.loc 1 295 9 is_stmt 1 view .LVU888
 296:lvgl/src/lv_draw/lv_draw_img.c ****         lv_area_set_height(&line, 1);
 2633              		.loc 1 296 9 view .LVU889
 2634              	.LBB176:
 2635              	.LBI176:
  97:lvgl/src/lv_draw/../lv_misc/lv_area.h **** {
 2636              		.loc 2 97 20 view .LVU890
 2637              	.LBB177:
 2638              	.LBB178:
 216:lvgl/src/lv_draw/../lv_misc/lv_mem.h **** 
 2639              		.loc 3 216 21 is_stmt 0 view .LVU891
 2640 0120 08A9     		add	r1, sp, #32
 2641              	.LVL292:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2642              		.loc 3 215 15 view .LVU892
 2643 0122 0AAA     		add	r2, sp, #40
 2644              	.LVL293:
 215:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2645              		.loc 3 215 15 view .LVU893
 2646              	.LBE178:
 2647              	.LBE177:
 2648              	.LBE176:
 292:lvgl/src/lv_draw/lv_draw_img.c ****                                          LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible 
 2649              		.loc 1 292 26 view .LVU894
 2650 0124 0823     		movs	r3, #8
 2651 0126 04E0     		b	.L133
 2652              	.LVL294:
 2653              	.L134:
 2654              	.LBB181:
 2655              	.LBB180:
 2656              	.LBB179:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2657              		.loc 3 219 9 is_stmt 1 view .LVU895
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2658              		.loc 3 219 15 is_stmt 0 view .LVU896
 2659 0128 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 2660              	.LVL295:
 219:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         d8++;
 2661              		.loc 3 219 13 view .LVU897
 2662 012c 02F8010B 		strb	r0, [r2], #1
 2663              	.LVL296:
 220:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         s8++;
 2664              		.loc 3 220 9 is_stmt 1 view .LVU898
 221:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         len--;
 2665              		.loc 3 221 9 view .LVU899
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 2666              		.loc 3 222 9 view .LVU900
 222:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****     }
 2667              		.loc 3 222 12 is_stmt 0 view .LVU901
 2668 0130 013B     		subs	r3, r3, #1
 2669              	.LVL297:
 2670              	.L133:
 218:lvgl/src/lv_draw/../lv_misc/lv_mem.h ****         *d8 = *s8;
 2671              		.loc 3 218 10 view .LVU902
ARM GAS  D:\Temp\ccEuVdRK.s 			page 89


 2672 0132 002B     		cmp	r3, #0
 2673 0134 F8D1     		bne	.L134
 2674              		.loc 3 225 5 is_stmt 1 view .LVU903
 2675              	.LVL298:
 2676              		.loc 3 225 5 is_stmt 0 view .LVU904
 2677              	.LBE179:
 2678              	.LBE180:
 2679              	.LBE181:
 297:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t x = mask_com.x1 - coords->x1;
 2680              		.loc 1 297 9 is_stmt 1 view .LVU905
 2681 0136 0121     		movs	r1, #1
 2682 0138 0AA8     		add	r0, sp, #40
 2683 013a FFF7FEFF 		bl	lv_area_set_height
 2684              	.LVL299:
 298:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t y = mask_com.y1 - coords->y1;
 2685              		.loc 1 298 9 view .LVU906
 298:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t y = mask_com.y1 - coords->y1;
 2686              		.loc 1 298 29 is_stmt 0 view .LVU907
 2687 013e BDF92060 		ldrsh	r6, [sp, #32]
 2688              	.LVL300:
 298:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t y = mask_com.y1 - coords->y1;
 2689              		.loc 1 298 41 view .LVU908
 2690 0142 B5F900B0 		ldrsh	fp, [r5]
 2691              	.LVL301:
 299:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t row;
 2692              		.loc 1 299 9 is_stmt 1 view .LVU909
 299:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t row;
 2693              		.loc 1 299 29 is_stmt 0 view .LVU910
 2694 0146 BDF92280 		ldrsh	r8, [sp, #34]
 299:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t row;
 2695              		.loc 1 299 41 view .LVU911
 2696 014a B5F90250 		ldrsh	r5, [r5, #2]
 2697              	.LVL302:
 299:lvgl/src/lv_draw/lv_draw_img.c ****         int32_t row;
 2698              		.loc 1 299 17 view .LVU912
 2699 014e A8EB0505 		sub	r5, r8, r5
 2700              	.LVL303:
 300:lvgl/src/lv_draw/lv_draw_img.c ****         lv_res_t read_res;
 2701              		.loc 1 300 9 is_stmt 1 view .LVU913
 301:lvgl/src/lv_draw/lv_draw_img.c ****         for(row = mask_com.y1; row <= mask_com.y2; row++) {
 2702              		.loc 1 301 9 view .LVU914
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2703              		.loc 1 302 9 view .LVU915
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2704              		.loc 1 302 9 is_stmt 0 view .LVU916
 2705 0152 0597     		str	r7, [sp, #20]
 2706 0154 079F     		ldr	r7, [sp, #28]
 2707              	.LVL304:
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2708              		.loc 1 302 9 view .LVU917
 2709 0156 2346     		mov	r3, r4
 2710 0158 4C46     		mov	r4, r9
 2711              	.LVL305:
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2712              		.loc 1 302 9 view .LVU918
 2713 015a 9946     		mov	r9, r3
 2714              	.LVL306:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 90


 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2715              		.loc 1 302 9 view .LVU919
 2716 015c 15E0     		b	.L135
 2717              	.LVL307:
 2718              	.L138:
 2719              	.LBB182:
 316:lvgl/src/lv_draw/lv_draw_img.c ****             line.y1++;
 2720              		.loc 1 316 13 is_stmt 1 view .LVU920
 2721 015e CDF804A0 		str	r10, [sp, #4]
 2722 0162 0094     		str	r4, [sp]
 2723 0164 4B46     		mov	r3, r9
 2724 0166 3A46     		mov	r2, r7
 2725 0168 0CA9     		add	r1, sp, #48
 2726 016a 0AA8     		add	r0, sp, #40
 2727              	.LVL308:
 316:lvgl/src/lv_draw/lv_draw_img.c ****             line.y1++;
 2728              		.loc 1 316 13 is_stmt 0 view .LVU921
 2729 016c FFF7FEFF 		bl	lv_draw_map
 2730              	.LVL309:
 317:lvgl/src/lv_draw/lv_draw_img.c ****             line.y2++;
 2731              		.loc 1 317 13 is_stmt 1 view .LVU922
 317:lvgl/src/lv_draw/lv_draw_img.c ****             line.y2++;
 2732              		.loc 1 317 17 is_stmt 0 view .LVU923
 2733 0170 BDF92A30 		ldrsh	r3, [sp, #42]
 317:lvgl/src/lv_draw/lv_draw_img.c ****             line.y2++;
 2734              		.loc 1 317 20 view .LVU924
 2735 0174 0133     		adds	r3, r3, #1
 2736 0176 ADF82A30 		strh	r3, [sp, #42]	@ movhi
 318:lvgl/src/lv_draw/lv_draw_img.c ****             y++;
 2737              		.loc 1 318 13 is_stmt 1 view .LVU925
 318:lvgl/src/lv_draw/lv_draw_img.c ****             y++;
 2738              		.loc 1 318 17 is_stmt 0 view .LVU926
 2739 017a BDF92E30 		ldrsh	r3, [sp, #46]
 318:lvgl/src/lv_draw/lv_draw_img.c ****             y++;
 2740              		.loc 1 318 20 view .LVU927
 2741 017e 0133     		adds	r3, r3, #1
 2742 0180 ADF82E30 		strh	r3, [sp, #46]	@ movhi
 319:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2743              		.loc 1 319 13 is_stmt 1 view .LVU928
 319:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2744              		.loc 1 319 14 is_stmt 0 view .LVU929
 2745 0184 0135     		adds	r5, r5, #1
 2746              	.LVL310:
 2747              	.L137:
 319:lvgl/src/lv_draw/lv_draw_img.c ****         }
 2748              		.loc 1 319 14 view .LVU930
 2749              	.LBE182:
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2750              		.loc 1 302 55 discriminator 2 view .LVU931
 2751 0186 08F10108 		add	r8, r8, #1
 2752              	.LVL311:
 2753              	.L135:
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2754              		.loc 1 302 47 discriminator 1 view .LVU932
 2755 018a BDF92630 		ldrsh	r3, [sp, #38]
 302:lvgl/src/lv_draw/lv_draw_img.c ****             lv_area_t mask_line;
 2756              		.loc 1 302 9 discriminator 1 view .LVU933
ARM GAS  D:\Temp\ccEuVdRK.s 			page 91


 2757 018e 4345     		cmp	r3, r8
 2758 0190 1ADB     		blt	.L150
 2759              	.LBB183:
 303:lvgl/src/lv_draw/lv_draw_img.c ****             union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 2760              		.loc 1 303 13 is_stmt 1 view .LVU934
 304:lvgl/src/lv_draw/lv_draw_img.c ****             if(union_ok == false) continue;
 2761              		.loc 1 304 13 view .LVU935
 304:lvgl/src/lv_draw/lv_draw_img.c ****             if(union_ok == false) continue;
 2762              		.loc 1 304 24 is_stmt 0 view .LVU936
 2763 0192 0AAA     		add	r2, sp, #40
 2764 0194 0399     		ldr	r1, [sp, #12]
 2765 0196 0CA8     		add	r0, sp, #48
 2766 0198 FFF7FEFF 		bl	_lv_area_intersect
 2767              	.LVL312:
 305:lvgl/src/lv_draw/lv_draw_img.c **** 
 2768              		.loc 1 305 13 is_stmt 1 view .LVU937
 305:lvgl/src/lv_draw/lv_draw_img.c **** 
 2769              		.loc 1 305 15 is_stmt 0 view .LVU938
 2770 019c 0028     		cmp	r0, #0
 2771 019e F2D0     		beq	.L137
 307:lvgl/src/lv_draw/lv_draw_img.c ****             if(read_res != LV_RES_OK) {
 2772              		.loc 1 307 13 is_stmt 1 view .LVU939
 307:lvgl/src/lv_draw/lv_draw_img.c ****             if(read_res != LV_RES_OK) {
 2773              		.loc 1 307 24 is_stmt 0 view .LVU940
 2774 01a0 0598     		ldr	r0, [sp, #20]
 2775              	.LVL313:
 307:lvgl/src/lv_draw/lv_draw_img.c ****             if(read_res != LV_RES_OK) {
 2776              		.loc 1 307 24 view .LVU941
 2777 01a2 0690     		str	r0, [sp, #24]
 2778 01a4 A6EB0B01 		sub	r1, r6, fp
 2779 01a8 0097     		str	r7, [sp]
 2780 01aa 049B     		ldr	r3, [sp, #16]
 2781 01ac 2AB2     		sxth	r2, r5
 2782 01ae 09B2     		sxth	r1, r1
 2783 01b0 FFF7FEFF 		bl	lv_img_decoder_read_line
 2784              	.LVL314:
 308:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_decoder_close(&cdsc->dec_dsc);
 2785              		.loc 1 308 13 is_stmt 1 view .LVU942
 308:lvgl/src/lv_draw/lv_draw_img.c ****                 lv_img_decoder_close(&cdsc->dec_dsc);
 2786              		.loc 1 308 15 is_stmt 0 view .LVU943
 2787 01b4 0128     		cmp	r0, #1
 2788 01b6 D2D0     		beq	.L138
 309:lvgl/src/lv_draw/lv_draw_img.c ****                 LV_LOG_WARN("Image draw can't read the line");
 2789              		.loc 1 309 17 is_stmt 1 view .LVU944
 2790 01b8 0698     		ldr	r0, [sp, #24]
 2791              	.LVL315:
 309:lvgl/src/lv_draw/lv_draw_img.c ****                 LV_LOG_WARN("Image draw can't read the line");
 2792              		.loc 1 309 17 is_stmt 0 view .LVU945
 2793 01ba FFF7FEFF 		bl	lv_img_decoder_close
 2794              	.LVL316:
 310:lvgl/src/lv_draw/lv_draw_img.c ****                 _lv_mem_buf_release(buf);
 2795              		.loc 1 310 62 is_stmt 1 view .LVU946
 311:lvgl/src/lv_draw/lv_draw_img.c ****                 draw_cleanup(cdsc);
 2796              		.loc 1 311 17 view .LVU947
 2797 01be 0798     		ldr	r0, [sp, #28]
 2798 01c0 FFF7FEFF 		bl	_lv_mem_buf_release
 2799              	.LVL317:
ARM GAS  D:\Temp\ccEuVdRK.s 			page 92


 312:lvgl/src/lv_draw/lv_draw_img.c ****                 return LV_RES_INV;
 2800              		.loc 1 312 17 view .LVU948
 313:lvgl/src/lv_draw/lv_draw_img.c ****             }
 2801              		.loc 1 313 17 view .LVU949
 313:lvgl/src/lv_draw/lv_draw_img.c ****             }
 2802              		.loc 1 313 24 is_stmt 0 view .LVU950
 2803 01c4 0020     		movs	r0, #0
 2804 01c6 22E7     		b	.L123
 2805              	.L150:
 313:lvgl/src/lv_draw/lv_draw_img.c ****             }
 2806              		.loc 1 313 24 view .LVU951
 2807              	.LBE183:
 321:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2808              		.loc 1 321 9 is_stmt 1 view .LVU952
 2809 01c8 0798     		ldr	r0, [sp, #28]
 2810 01ca FFF7FEFF 		bl	_lv_mem_buf_release
 2811              	.LVL318:
 2812 01ce 3FE7     		b	.L125
 2813              	.LVL319:
 2814              	.L141:
 321:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2815              		.loc 1 321 9 is_stmt 0 view .LVU953
 2816              	.LBE184:
 241:lvgl/src/lv_draw/lv_draw_img.c **** 
 2817              		.loc 1 241 29 view .LVU954
 2818 01d0 0020     		movs	r0, #0
 2819              	.LVL320:
 241:lvgl/src/lv_draw/lv_draw_img.c **** 
 2820              		.loc 1 241 29 view .LVU955
 2821 01d2 1CE7     		b	.L123
 2822              		.cfi_endproc
 2823              	.LFE464:
 2825              		.section	.text.lv_draw_img,"ax",%progbits
 2826              		.align	1
 2827              		.global	lv_draw_img
 2828              		.syntax unified
 2829              		.thumb
 2830              		.thumb_func
 2831              		.fpu fpv4-sp-d16
 2833              	lv_draw_img:
 2834              	.LVL321:
 2835              	.LFB459:
  75:lvgl/src/lv_draw/lv_draw_img.c ****     if(src == NULL) {
 2836              		.loc 1 75 1 is_stmt 1 view -0
 2837              		.cfi_startproc
 2838              		@ args = 0, pretend = 0, frame = 0
 2839              		@ frame_needed = 0, uses_anonymous_args = 0
  75:lvgl/src/lv_draw/lv_draw_img.c ****     if(src == NULL) {
 2840              		.loc 1 75 1 is_stmt 0 view .LVU957
 2841 0000 38B5     		push	{r3, r4, r5, lr}
 2842              	.LCFI12:
 2843              		.cfi_def_cfa_offset 16
 2844              		.cfi_offset 3, -16
 2845              		.cfi_offset 4, -12
 2846              		.cfi_offset 5, -8
 2847              		.cfi_offset 14, -4
 2848 0002 0446     		mov	r4, r0
ARM GAS  D:\Temp\ccEuVdRK.s 			page 93


 2849 0004 0D46     		mov	r5, r1
  76:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw: src is NULL");
 2850              		.loc 1 76 5 is_stmt 1 view .LVU958
  76:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw: src is NULL");
 2851              		.loc 1 76 7 is_stmt 0 view .LVU959
 2852 0006 22B1     		cbz	r2, .L155
 2853 0008 1146     		mov	r1, r2
 2854              	.LVL322:
  82:lvgl/src/lv_draw/lv_draw_img.c **** 
 2855              		.loc 1 82 5 is_stmt 1 view .LVU960
  82:lvgl/src/lv_draw/lv_draw_img.c **** 
 2856              		.loc 1 82 11 is_stmt 0 view .LVU961
 2857 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2858              	.LVL323:
  82:lvgl/src/lv_draw/lv_draw_img.c **** 
 2859              		.loc 1 82 7 view .LVU962
 2860 000c 022A     		cmp	r2, #2
 2861 000e 04D8     		bhi	.L156
 2862              	.LVL324:
 2863              	.L151:
  92:lvgl/src/lv_draw/lv_draw_img.c **** 
 2864              		.loc 1 92 1 view .LVU963
 2865 0010 38BD     		pop	{r3, r4, r5, pc}
 2866              	.LVL325:
 2867              	.L155:
  77:lvgl/src/lv_draw/lv_draw_img.c ****         show_error(coords, mask, "No\ndata");
 2868              		.loc 1 77 47 is_stmt 1 view .LVU964
  78:lvgl/src/lv_draw/lv_draw_img.c ****         return;
 2869              		.loc 1 78 9 view .LVU965
 2870 0012 084A     		ldr	r2, .L157
 2871              	.LVL326:
  78:lvgl/src/lv_draw/lv_draw_img.c ****         return;
 2872              		.loc 1 78 9 is_stmt 0 view .LVU966
 2873 0014 FFF7FEFF 		bl	show_error
 2874              	.LVL327:
  79:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2875              		.loc 1 79 9 is_stmt 1 view .LVU967
 2876 0018 FAE7     		b	.L151
 2877              	.LVL328:
 2878              	.L156:
  84:lvgl/src/lv_draw/lv_draw_img.c ****     res = lv_img_draw_core(coords, mask, src, dsc);
 2879              		.loc 1 84 5 view .LVU968
  85:lvgl/src/lv_draw/lv_draw_img.c **** 
 2880              		.loc 1 85 5 view .LVU969
  85:lvgl/src/lv_draw/lv_draw_img.c **** 
 2881              		.loc 1 85 11 is_stmt 0 view .LVU970
 2882 001a 0A46     		mov	r2, r1
 2883 001c 2946     		mov	r1, r5
 2884              	.LVL329:
  85:lvgl/src/lv_draw/lv_draw_img.c **** 
 2885              		.loc 1 85 11 view .LVU971
 2886 001e FFF7FEFF 		bl	lv_img_draw_core
 2887              	.LVL330:
  87:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 2888              		.loc 1 87 5 is_stmt 1 view .LVU972
  87:lvgl/src/lv_draw/lv_draw_img.c ****         LV_LOG_WARN("Image draw error");
 2889              		.loc 1 87 7 is_stmt 0 view .LVU973
ARM GAS  D:\Temp\ccEuVdRK.s 			page 94


 2890 0022 0028     		cmp	r0, #0
 2891 0024 F4D1     		bne	.L151
  88:lvgl/src/lv_draw/lv_draw_img.c ****         show_error(coords, mask, "No\ndata");
 2892              		.loc 1 88 40 is_stmt 1 view .LVU974
  89:lvgl/src/lv_draw/lv_draw_img.c ****         return;
 2893              		.loc 1 89 9 view .LVU975
 2894 0026 034A     		ldr	r2, .L157
 2895 0028 2946     		mov	r1, r5
 2896 002a 2046     		mov	r0, r4
 2897              	.LVL331:
  89:lvgl/src/lv_draw/lv_draw_img.c ****         return;
 2898              		.loc 1 89 9 is_stmt 0 view .LVU976
 2899 002c FFF7FEFF 		bl	show_error
 2900              	.LVL332:
  90:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2901              		.loc 1 90 9 is_stmt 1 view .LVU977
 2902 0030 EEE7     		b	.L151
 2903              	.L158:
 2904 0032 00BF     		.align	2
 2905              	.L157:
 2906 0034 00000000 		.word	.LC1
 2907              		.cfi_endproc
 2908              	.LFE459:
 2910              		.section	.text.lv_img_src_get_type,"ax",%progbits
 2911              		.align	1
 2912              		.global	lv_img_src_get_type
 2913              		.syntax unified
 2914              		.thumb
 2915              		.thumb_func
 2916              		.fpu fpv4-sp-d16
 2918              	lv_img_src_get_type:
 2919              	.LVL333:
 2920              	.LFB463:
 205:lvgl/src/lv_draw/lv_draw_img.c ****     lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 2921              		.loc 1 205 1 view -0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
 206:lvgl/src/lv_draw/lv_draw_img.c **** 
 2926              		.loc 1 206 5 view .LVU979
 208:lvgl/src/lv_draw/lv_draw_img.c ****     const uint8_t * u8_p = src;
 2927              		.loc 1 208 5 view .LVU980
 208:lvgl/src/lv_draw/lv_draw_img.c ****     const uint8_t * u8_p = src;
 2928              		.loc 1 208 7 is_stmt 0 view .LVU981
 2929 0000 60B1     		cbz	r0, .L161
 209:lvgl/src/lv_draw/lv_draw_img.c **** 
 2930              		.loc 1 209 5 is_stmt 1 view .LVU982
 2931              	.LVL334:
 212:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 2932              		.loc 1 212 5 view .LVU983
 212:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 2933              		.loc 1 212 12 is_stmt 0 view .LVU984
 2934 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 212:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 2935              		.loc 1 212 24 view .LVU985
 2936 0004 A2F12003 		sub	r3, r2, #32
ARM GAS  D:\Temp\ccEuVdRK.s 			page 95


 2937 0008 DBB2     		uxtb	r3, r3
 212:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 2938              		.loc 1 212 7 view .LVU986
 2939 000a 5F2B     		cmp	r3, #95
 2940 000c 08D9     		bls	.L162
 215:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 2941              		.loc 1 215 10 is_stmt 1 view .LVU987
 215:lvgl/src/lv_draw/lv_draw_img.c ****         img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 2942              		.loc 1 215 12 is_stmt 0 view .LVU988
 2943 000e 12F0800F 		tst	r2, #128
 2944 0012 01D1     		bne	.L164
 219:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2945              		.loc 1 219 22 view .LVU989
 2946 0014 0020     		movs	r0, #0
 2947              	.LVL335:
 227:lvgl/src/lv_draw/lv_draw_img.c **** 
 2948              		.loc 1 227 1 view .LVU990
 2949 0016 7047     		bx	lr
 2950              	.LVL336:
 2951              	.L164:
 216:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2952              		.loc 1 216 22 view .LVU991
 2953 0018 0220     		movs	r0, #2
 2954              	.LVL337:
 216:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2955              		.loc 1 216 22 view .LVU992
 2956 001a 7047     		bx	lr
 2957              	.LVL338:
 2958              	.L161:
 208:lvgl/src/lv_draw/lv_draw_img.c ****     const uint8_t * u8_p = src;
 2959              		.loc 1 208 28 view .LVU993
 2960 001c 0320     		movs	r0, #3
 2961              	.LVL339:
 208:lvgl/src/lv_draw/lv_draw_img.c ****     const uint8_t * u8_p = src;
 2962              		.loc 1 208 28 view .LVU994
 2963 001e 7047     		bx	lr
 2964              	.LVL340:
 2965              	.L162:
 213:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2966              		.loc 1 213 22 view .LVU995
 2967 0020 0120     		movs	r0, #1
 2968              	.LVL341:
 213:lvgl/src/lv_draw/lv_draw_img.c ****     }
 2969              		.loc 1 213 22 view .LVU996
 2970 0022 7047     		bx	lr
 2971              		.cfi_endproc
 2972              	.LFE463:
 2974              		.section	.rodata
 2975              		.align	2
 2976              		.set	.LANCHOR0,. + 0
 2977              	.LC0:
 2978 0000 FF       		.byte	255
 2979 0001 FF       		.byte	255
 2980              		.section	.rodata.lv_draw_img.str1.4,"aMS",%progbits,1
 2981              		.align	2
 2982              	.LC1:
 2983 0000 4E6F0A64 		.ascii	"No\012data\000"
ARM GAS  D:\Temp\ccEuVdRK.s 			page 96


 2983      61746100 
 2984              		.text
 2985              	.Letext0:
 2986              		.file 6 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\inc
 2987              		.file 7 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\inc
 2988              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 2989              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2990              		.file 10 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\lib\\gcc\\arm-non
 2991              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2992              		.file 12 "lvgl/lv_conf.h"
 2993              		.file 13 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\in
 2994              		.file 14 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\in
 2995              		.file 15 "c:\\stm32\\gnu mcu eclipse\\arm embedded gcc\\8.2.1-1.4-20190214-0604\\arm-none-eabi\\in
 2996              		.file 16 "lvgl/src/lv_draw/../lv_misc/lv_types.h"
 2997              		.file 17 "lvgl/src/lv_draw/../lv_core/../lv_font/lv_font.h"
 2998              		.file 18 "lvgl/src/lv_draw/../lv_core/../lv_misc/lv_anim.h"
 2999              		.file 19 "lvgl/src/lv_draw/../lv_core/../lv_draw/lv_draw_mask.h"
 3000              		.file 20 "lvgl/src/lv_draw/../lv_core/../lv_draw/lv_draw_blend.h"
 3001              		.file 21 "lvgl/src/lv_draw/../lv_core/lv_style.h"
 3002              		.file 22 "lvgl/src/lv_draw/lv_img_decoder.h"
 3003              		.file 23 "lvgl/src/lv_draw/lv_draw_img.h"
 3004              		.file 24 "lvgl/src/lv_draw/lv_img_cache.h"
 3005              		.file 25 "lvgl/src/lv_draw/../lv_hal/../lv_misc/lv_ll.h"
 3006              		.file 26 "lvgl/src/lv_draw/../lv_hal/../lv_misc/lv_task.h"
 3007              		.file 27 "lvgl/src/lv_draw/../lv_hal/lv_hal_indev.h"
 3008              		.file 28 "lvgl/src/lv_draw/../lv_hal/lv_hal_disp.h"
 3009              		.file 29 "lvgl/src/lv_draw/../lv_core/lv_obj.h"
 3010              		.file 30 "lvgl/src/lv_draw/../lv_core/../lv_draw/lv_draw_rect.h"
 3011              		.file 31 "lvgl/src/lv_draw/../lv_core/../lv_draw/../lv_misc/lv_bidi.h"
 3012              		.file 32 "lvgl/src/lv_draw/../lv_core/../lv_draw/../lv_misc/lv_txt.h"
 3013              		.file 33 "lvgl/src/lv_draw/../lv_core/../lv_draw/lv_draw_label.h"
 3014              		.file 34 "lvgl/src/lv_draw/../lv_core/lv_refr.h"
ARM GAS  D:\Temp\ccEuVdRK.s 			page 97


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lv_draw_img.c
  D:\Temp\ccEuVdRK.s:18     .text.lv_draw_map:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:25     .text.lv_draw_map:0000000000000000 lv_draw_map
  D:\Temp\ccEuVdRK.s:1962   .text.show_error:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:1968   .text.show_error:0000000000000000 show_error
  D:\Temp\ccEuVdRK.s:2032   .text.show_error:000000000000003c $d
  D:\Temp\ccEuVdRK.s:2037   .text.lv_draw_img_dsc_init:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2044   .text.lv_draw_img_dsc_init:0000000000000000 lv_draw_img_dsc_init
  D:\Temp\ccEuVdRK.s:2093   .text.lv_img_cf_get_px_size:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2100   .text.lv_img_cf_get_px_size:0000000000000000 lv_img_cf_get_px_size
  D:\Temp\ccEuVdRK.s:2117   .text.lv_img_cf_get_px_size:000000000000000a $d
  D:\Temp\ccEuVdRK.s:2185   .text.lv_img_cf_is_chroma_keyed:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2192   .text.lv_img_cf_is_chroma_keyed:0000000000000000 lv_img_cf_is_chroma_keyed
  D:\Temp\ccEuVdRK.s:2238   .text.lv_img_cf_has_alpha:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2245   .text.lv_img_cf_has_alpha:0000000000000000 lv_img_cf_has_alpha
  D:\Temp\ccEuVdRK.s:2262   .text.lv_img_cf_has_alpha:000000000000000a $d
  D:\Temp\ccEuVdRK.s:2291   .text.lv_img_draw_core:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2297   .text.lv_img_draw_core:0000000000000000 lv_img_draw_core
  D:\Temp\ccEuVdRK.s:2826   .text.lv_draw_img:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2833   .text.lv_draw_img:0000000000000000 lv_draw_img
  D:\Temp\ccEuVdRK.s:2906   .text.lv_draw_img:0000000000000034 $d
  D:\Temp\ccEuVdRK.s:2911   .text.lv_img_src_get_type:0000000000000000 $t
  D:\Temp\ccEuVdRK.s:2918   .text.lv_img_src_get_type:0000000000000000 lv_img_src_get_type
  D:\Temp\ccEuVdRK.s:2975   .rodata:0000000000000000 $d
  D:\Temp\ccEuVdRK.s:2981   .rodata.lv_draw_img.str1.4:0000000000000000 $d
  D:\Temp\ccEuVdRK.s:2128   .text.lv_img_cf_get_px_size:0000000000000015 $d
  D:\Temp\ccEuVdRK.s:2128   .text.lv_img_cf_get_px_size:0000000000000016 $t
  D:\Temp\ccEuVdRK.s:2275   .text.lv_img_cf_has_alpha:0000000000000017 $d
  D:\Temp\ccEuVdRK.s:2275   .text.lv_img_cf_has_alpha:0000000000000018 $t

UNDEFINED SYMBOLS
_lv_refr_get_disp_refreshing
lv_disp_get_buf
lv_draw_mask_get_cnt
_lv_blend_map
lv_disp_get_hor_res
lv_area_get_size
_lv_mem_buf_get
_lv_memset_00
_lv_mem_buf_release
_lv_img_buf_transform_init
_lv_memset_ff
lv_img_buf_get_px_color
lv_img_buf_get_px_alpha
_lv_img_buf_transform_anti_alias
lv_draw_mask_apply
lv_draw_rect_dsc_init
lv_draw_rect
lv_draw_label_dsc_init
lv_draw_label
_lv_img_cache_open
_lv_img_buf_get_transformed_area
_lv_area_intersect
lv_area_set_height
lv_img_decoder_read_line
lv_img_decoder_close
ARM GAS  D:\Temp\ccEuVdRK.s 			page 98


